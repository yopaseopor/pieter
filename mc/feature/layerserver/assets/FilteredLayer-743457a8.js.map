{"version":3,"file":"FilteredLayer-743457a8.js","sources":["../../src/Models/FilteredLayer.ts"],"sourcesContent":["import { Store, UIEventSource } from \"../Logic/UIEventSource\"\nimport LayerConfig from \"./ThemeConfig/LayerConfig\"\nimport { OsmConnection } from \"../Logic/Osm/OsmConnection\"\nimport { LocalStorageSource } from \"../Logic/Web/LocalStorageSource\"\nimport { QueryParameters } from \"../Logic/Web/QueryParameters\"\nimport { FilterConfigOption } from \"./ThemeConfig/FilterConfig\"\nimport { TagsFilter } from \"../Logic/Tags/TagsFilter\"\nimport { Utils } from \"../Utils\"\nimport { TagUtils } from \"../Logic/Tags/TagUtils\"\nimport { And } from \"../Logic/Tags/And\"\nimport { GlobalFilter } from \"./GlobalFilter\"\n\nexport default class FilteredLayer {\n    /**\n     * Whether or not the specified layer is enabled by the user\n     */\n    readonly isDisplayed: UIEventSource<boolean>\n    /**\n     * Maps the filter.option.id onto the actual used state.\n     * This state is either the chosen option (as number) or a representation of the fields\n     */\n    readonly appliedFilters: ReadonlyMap<string, UIEventSource<undefined | number | string>>\n    readonly layerDef: LayerConfig\n\n    /**\n     * Indicates if some filter is set.\n     * If this is the case, adding a new element of this type might be a bad idea\n     */\n    readonly hasFilter: Store<boolean>\n\n    /**\n     * Contains the current properties a feature should fulfill in order to match the filter\n     */\n    readonly currentFilter: Store<TagsFilter | undefined>\n\n    constructor(\n        layer: LayerConfig,\n        appliedFilters?: ReadonlyMap<string, UIEventSource<undefined | number | string>>,\n        isDisplayed?: UIEventSource<boolean>\n    ) {\n        this.layerDef = layer\n        this.isDisplayed = isDisplayed ?? new UIEventSource(true)\n        if (!appliedFilters) {\n            const appliedFiltersWritable = new Map<\n                string,\n                UIEventSource<number | string | undefined>\n            >()\n            for (const filter of this.layerDef.filters) {\n                appliedFiltersWritable.set(filter.id, new UIEventSource(undefined))\n            }\n            appliedFilters = appliedFiltersWritable\n        }\n        this.appliedFilters = appliedFilters\n\n        const self = this\n        const currentTags = new UIEventSource<TagsFilter>(undefined)\n        this.appliedFilters.forEach((filterSrc) => {\n            filterSrc.addCallbackAndRun((_) => {\n                currentTags.setData(self.calculateCurrentTags())\n            })\n        })\n        this.hasFilter = currentTags.map((ct) => ct !== undefined)\n        this.currentFilter = currentTags\n    }\n\n    public static fieldsToString(values: Record<string, string>): string {\n        for (const key in values) {\n            if (values[key] === \"\") {\n                delete values[key]\n            }\n        }\n        return JSON.stringify(values)\n    }\n\n    public static queryParameterKey(layer: LayerConfig) {\n        return \"layer-\" + layer.id\n    }\n\n    /**\n     * Creates a FilteredLayer which is tied into the QueryParameters and/or user preferences\n     */\n    public static initLinkedState(\n        layer: LayerConfig,\n        context: string,\n        osmConnection: OsmConnection\n    ) {\n        let isDisplayed: UIEventSource<boolean>\n        if (layer.syncSelection === \"local\") {\n            isDisplayed = LocalStorageSource.GetParsed(\n                context + \"-layer-\" + layer.id + \"-enabled\",\n                layer.shownByDefault\n            )\n        } else if (layer.syncSelection === \"theme-only\") {\n            isDisplayed = FilteredLayer.getPref(\n                osmConnection,\n                context + \"-layer-\" + layer.id + \"-enabled\",\n                layer\n            )\n        } else if (layer.syncSelection === \"global\") {\n            isDisplayed = FilteredLayer.getPref(\n                osmConnection,\n                \"layer-\" + layer.id + \"-enabled\",\n                layer\n            )\n        } else {\n            isDisplayed = QueryParameters.GetBooleanQueryParameter(\n                FilteredLayer.queryParameterKey(layer),\n                layer.shownByDefault,\n                \"Whether or not layer \" + layer.id + \" is shown\"\n            )\n        }\n\n        const appliedFilters = new Map<string, UIEventSource<undefined | number | string>>()\n        for (const subfilter of layer.filters) {\n            appliedFilters.set(subfilter.id, subfilter.initState(layer.id))\n        }\n        return new FilteredLayer(layer, appliedFilters, isDisplayed)\n    }\n\n    private static stringToFieldProperties(value: string): Record<string, string> {\n        const values = JSON.parse(value)\n        for (const key in values) {\n            if (values[key] === \"\") {\n                delete values[key]\n            }\n        }\n        return values\n    }\n\n    private static fieldsToTags(\n        option: FilterConfigOption,\n        fieldstate: string | Record<string, string>\n    ): TagsFilter | undefined {\n        let properties: Record<string, string>\n        if (typeof fieldstate === \"string\") {\n            properties = FilteredLayer.stringToFieldProperties(fieldstate)\n        } else {\n            properties = fieldstate\n        }\n        const missingKeys = option.fields\n            .map((f) => f.name)\n            .filter((key) => properties[key] === undefined)\n        if (missingKeys.length > 0) {\n            return undefined\n        }\n        const tagsSpec = Utils.WalkJson(option.originalTagsSpec, (v) => {\n            if (typeof v !== \"string\") {\n                return v\n            }\n\n            for (const key in properties) {\n                v = (<string>v).replace(\"{\" + key + \"}\", properties[key])\n            }\n\n            return v\n        })\n        return TagUtils.Tag(tagsSpec)\n    }\n\n    private static getPref(\n        osmConnection: OsmConnection,\n        key: string,\n        layer: LayerConfig\n    ): UIEventSource<boolean> {\n        return osmConnection.GetPreference(key, layer.shownByDefault + \"\").sync(\n            (v) => {\n                if (v === undefined) {\n                    return undefined\n                }\n                return v === \"true\"\n            },\n            [],\n            (b) => {\n                if (b === undefined) {\n                    return undefined\n                }\n                return \"\" + b\n            }\n        )\n    }\n\n    public disableAllFilters(): void {\n        this.appliedFilters.forEach((value) => value.setData(undefined))\n    }\n\n    /**\n     * Returns true if the given tags match\n     * - the current filters\n     * - the specified 'global filters'\n     * - the 'isShown'-filter set by the layer\n     */\n    public isShown(properties: Record<string, string>, globalFilters?: GlobalFilter[]): boolean {\n        if (properties._deleted === \"yes\") {\n            return false\n        }\n        for (const globalFilter of globalFilters ?? []) {\n            const neededTags = globalFilter.osmTags\n            if (neededTags !== undefined && !neededTags.matchesProperties(properties)) {\n                return false\n            }\n        }\n        {\n            const isShown: TagsFilter = this.layerDef.isShown\n            if (isShown !== undefined && !isShown.matchesProperties(properties)) {\n                return false\n            }\n        }\n\n        {\n            let neededTags: TagsFilter = this.currentFilter.data\n            if (neededTags !== undefined && !neededTags.matchesProperties(properties)) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n    private calculateCurrentTags(): TagsFilter {\n        let needed: TagsFilter[] = []\n        for (const filter of this.layerDef.filters) {\n            const state = this.appliedFilters.get(filter.id)\n            if (state.data === undefined) {\n                continue\n            }\n            if (filter.options[0].fields.length > 0) {\n                // This is a filter with fields\n                // We calculate the fields\n                const fieldProperties = FilteredLayer.stringToFieldProperties(<string>state.data)\n                const asTags = FilteredLayer.fieldsToTags(filter.options[0], fieldProperties)\n                if (asTags) {\n                    needed.push(asTags)\n                }\n                continue\n            }\n            needed.push(filter.options[state.data].osmTags)\n        }\n        needed = Utils.NoNull(needed)\n        if (needed.length == 0) {\n            return undefined\n        }\n        let tags: TagsFilter\n\n        if (needed.length == 1) {\n            tags = needed[0]\n        } else {\n            tags = new And(needed)\n        }\n        let optimized = tags.optimize()\n        if (optimized === true) {\n            return undefined\n        }\n        if (optimized === false) {\n            return tags\n        }\n        return optimized\n    }\n}\n"],"names":["FilteredLayer","layer","appliedFilters","isDisplayed","__publicField","UIEventSource","appliedFiltersWritable","filter","self","currentTags","filterSrc","_","ct","values","key","context","osmConnection","LocalStorageSource","QueryParameters","subfilter","value","option","fieldstate","properties","f","tagsSpec","Utils","v","TagUtils","b","globalFilters","globalFilter","neededTags","isShown","needed","state","fieldProperties","asTags","tags","And","optimized"],"mappings":"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"}