var Di=Object.defineProperty;var ki=(e,t,n)=>t in e?Di(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var S=(e,t,n)=>(ki(e,typeof t!="symbol"?t+"":t,n),n);import{U as ue}from"./Utils-498bb79d.js";import{T as Ri}from"./Translation-5455689e.js";import{c as b,a as Si}from"./Constants-45d3b9c3.js";import{S as ji,i as $i,s as Ii,G as Ei,e as Ji,b as ln,d as Mi,z as Ni,H as Wi,I as Bi,J as Fi,t as Oi,g as Li,h as Hi,r as Pi}from"./index-3f10102a.js";const O=class O{constructor(t,n,i){S(this,"path");S(this,"operation");S(this,"messages");S(this,"_hasErrors",!1);if(this.path=n,this.operation=i??[],this.messages=t,this.path.some(o=>typeof o=="object"||o==="[object Object]"))throw"ConversionMessage: got an object as path entry:"+JSON.stringify(n);this.path.some(o=>typeof o=="number"&&o<0)&&(O.reported||(O.reported=!0,console.trace("ConversionContext: got a path containing a negative number")))}static construct(t,n){return new O([],[...t],[...n])}static test(t){return new O([],t?[t]:[],["test"])}static print(t){const n=t.context.path.filter(i=>typeof i!="string"&&typeof i!="number");n.length>0&&console.warn("Non-string value in path:",...n),t.level==="error"?console.error(O.red("ERR "),t.context.path.join("."),O.red(t.message),t.context.operation.join(".")):t.level==="warning"?console.warn(O.red("<!> "),t.context.path.join("."),O.yellow(t.message),t.context.operation.join(".")):console.log("    ",t.context.path.join("."),t.message)}static yellow(t){return"\x1B[33m"+t+"\x1B[0m"}static red(t){return"\x1B[31m"+t+"\x1B[0m"}enter(t){if(!Array.isArray(t)){if(typeof t=="number"&&t<0)throw console.trace("Invalid key"),"Invalid key: <0";return new O(this.messages,[...this.path,t],this.operation)}return new O(this.messages,[...this.path,...t],this.operation)}enters(...t){return this.enter(t)}inOperation(t){return new O(this.messages,this.path,[...this.operation,t])}warn(t){this.messages.push({context:this,level:"warning",message:t})}err(t){this._hasErrors=!0,this.messages.push({context:this,level:"error",message:t})}info(t){this.messages.push({context:this,level:"information",message:t})}getAll(t){return this.messages.filter(n=>n.level===t)}hasErrors(){var n;if(this._hasErrors)return!0;const t=((n=this.messages)==null?void 0:n.find(i=>i.level==="error"))!==void 0;return this._hasErrors=t,t}debug(t){this.messages.push({context:this,level:"debug",message:t})}};S(O,"reported",!1);let at=O;class me{constructor(t,n=[],i){S(this,"modifiedAttributes");S(this,"name");S(this,"doc");this.modifiedAttributes=n,this.doc=t+`

Modified attributes are
`+n.join(", "),this.name=i}convertStrict(t,n){n??(n=at.construct([],[])),n=n.inOperation(this.name);const i=this.convert(t,n);for(const o of n.messages)o.level!=="debug"&&at.print(o);if(n.hasErrors())throw"Detected one or more errors, stopping now";return i}andThenF(t){return new Ui(this,new Vi(t))}}class ze extends me{}class Ui extends me{constructor(n,i){super("Merges two steps with different types",[],`Pipe(${n.name}, ${i.name})`);S(this,"_step0");S(this,"_step1");this._step0=n,this._step1=i}convert(n,i){const o=this._step0.convert(n,i.inOperation(this._step0.name));return this._step1.convert(o,i.inOperation(this._step1.name))}}class Vi extends me{constructor(n){super("Wrapper around a pure function",[],"Pure");S(this,"_f");this._f=n}convert(n,i){return this._f(n)}}class ba extends ze{constructor(n,i){super("Applies the step on the object, if the object satisfies the predicate",[],"Bypass");S(this,"_applyIf");S(this,"_step");this._applyIf=n,this._step=i}convert(n,i){return this._applyIf(n)?this._step.convert(n,i):n}}class zi extends me{constructor(n,i){super("Applies the given step on every element of the list",[],"OnEach("+n.name+")");S(this,"_step");S(this,"_msg");S(this,"_filter");this._step=n,this._msg=i==null?void 0:i.msg}convert(n,i){var u,l;if(n==null)return n;const o=this._step,s=[],a=i.inOperation("each");for(let r=0;r<n.length;r++){this._msg&&console.log(this._msg,`: ${r+1}/${n.length}`,((u=n[r])==null?void 0:u.id)!==void 0?(l=n[r])==null?void 0:l.id:"");const p=o.convert(n[r],a.enter(r));s.push(p)}return s}}class ya extends ze{constructor(n,i){super("Applies "+i.name+" onto property `"+n+"`",[n],`On(${n}, ${i.name})`);S(this,"key");S(this,"step");typeof i=="function"?this.step=i:this.step=o=>i,this.key=n}convert(n,i){const o=this.key,s=n[o];if(s==null)return n;n={...n};const a=this.step(n);return n[o]=a.convert(s,i.enter(o).inOperation("on["+o+"]")),n}}class wa extends me{constructor(t){super(t??"Does nothing, often to swap out steps in testing",[],"Pass")}convert(t,n){return t}}class va extends me{constructor(n){super("Executes the given step, flattens the resulting list",[],"Concat("+n.name+")");S(this,"_step");this._step=n}convert(n,i){if(n==null)return n;const o=new zi(this._step).convert(n,i.inOperation("concat"));return[].concat(...o)}}class Ta extends me{constructor(n){super("Picks the first result of the conversion step",[],"FirstOf("+n.name+")");S(this,"_conversion");this._conversion=n}convert(n,i){const o=this._conversion.convert(n,i.inOperation("firstOf"));if(o.length!==0)return o[0]}}class qa extends ze{constructor(n,...i){super((n??"")+"This fused pipeline of the following steps: "+i.map(o=>o.name).join(", "),ue.Dedup([].concat(...i.map(o=>o.modifiedAttributes))),"Fuse("+i.map(o=>o.name).join(", ")+")");S(this,"steps");S(this,"debug",!1);this.steps=ue.NoNull(i)}enableDebugging(){return this.debug=!0,this}convert(n,i){const o=[];for(let s=0;s<this.steps.length;s++){const a=new Date,u=this.steps[s];try{const l=u.convert(n,i.inOperation(u.name));if(l==null)break;n=l}catch(l){throw console.error("Step "+u.name+" failed due to ",l,l.stack),l}if(this.debug){const r=new Date().getTime()-a.getTime();o.push(r)}}return this.debug&&console.log("Time needed,",o.join(", ")),n}}class xa extends ze{constructor(n,i,o=!1){super("Sets "+n+" to a default value if undefined",[],"SetDefault of "+n);S(this,"value");S(this,"key");S(this,"_overrideEmptyString");this.key=n,this.value=i,this._overrideEmptyString=o}convert(n,i){if(n!==void 0)return(n[this.key]===void 0||n[this.key]===""&&this._overrideEmptyString)&&(n={...n},n[this.key]=this.value),n}}const Tn=[{path:[],required:!1,hints:{},type:"object",description:`Defines the entire theme.
A theme is the collection of the layers that are shown; the intro text, the icon, ...
It more or less defines the entire experience.
Most of the fields defined here are metadata about the theme, such as its name, description, supported languages, default starting location, ...
The main chunk of the json will however be the 'layers'-array, where the details of your layers are.
General remark: a type (string | any) indicates either a fixed or a translatable string.`},{path:["id"],required:!0,hints:{typehint:"id",group:"basic",question:"What is the id of this layout?"},type:"string",description:`The id is a unique string to identify the theme
It should be
- in english
- describe the theme in a single word (or a few words)
- all lowercase and with only [a-z] or underscores (_)
This is used as hashtag in the changeset message, which will read something like "Adding data with #mapcomplete for theme #<the theme id>"
On official themes, it'll become the name of the page, e.g.
'cyclestreets' which become 'cyclestreets.html'`},{path:["title"],required:!0,hints:{group:"basic",question:"What is the title of this theme?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The human-readable title, as shown in the welcome message and the index page"},{path:["mustHaveLanguage"],required:!1,hints:{},type:"array",description:`Only used in 'generateLayerOverview': if present, every translation will be checked to make sure it is fully translated.
This must be a list of two-letter, lowercase codes which identifies the language, e.g. "en", "nl", ...`},{path:["description"],required:!0,hints:{group:"basic",question:"How would you describe this theme?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The description, as shown in the welcome message and the more-screen"},{path:["shortDescription"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A short description, showed as social description and in the 'more theme'-buttons.
Note that if this one is not defined, the first sentence of 'description' is used`},{path:["descriptionTail"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A part of the description, shown under the login-button."},{path:["icon"],required:!0,hints:{typehint:"icon",group:"basic",question:"What icon should be used to represent this theme?"},type:"string",description:`Used as logo in the more-screen and (for official themes) as favicon, webmanifest logo, ...
Either a URL or a base64 encoded value (which should include 'data:image/svg+xml;base64)`},{path:["socialImage"],required:!1,hints:{typehint:"image",group:"basic",question:"What image should be used as social image preview?",ifunset:"use the default social image of mapcomplete (or generate one based on the icon)"},type:"string",description:`This is included as og:image-tag on official themes.
See https://www.h3xed.com/web-and-internet/how-to-use-og-image-meta-tag-facebook-reddit for more information`},{path:["extraLink"],required:!1,hints:{group:"advanced",question:"should an extra help button be shown in certain circumstances?",ifunset:"show a link to open MapComplete full screen if used in an iframe"},type:"object",description:`Adds an additional button on the top-left of the application.
This can link to an arbitrary location.
For example {icon: "./assets/svg/pop-out.svg", href: 'https://mapcomplete.org/{theme}.html?lat={lat}&lon={lon}&z={zoom}, requirements: ["iframe","no-welcome-message]},`},{path:["extraLink","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown in the link button?",ifunset:"do not show an icon"},type:"string",description:""},{path:["extraLink","text"],required:!1,hints:{question:"What text should be shown in the link icon?",ifunset:"do not show a text"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Note that {lat},{lon},{zoom}, {language} and {theme} will be replaced"},{path:["extraLink","href"],required:!0,hints:{typehint:"url",question:"if clicked, what webpage should open?"},type:"string",description:"Note that {lat},{lon},{zoom}, {language} and {theme} will be replaced"},{path:["extraLink","newTab"],required:!1,hints:{question:"Should the link open in a new tab?",iftrue:"Open in a new tab",iffalse:"do not open in a new tab",ifunset:"do not open in a new tab"},type:"boolean",description:""},{path:["extraLink","requirements"],required:!1,hints:{question:"When should the extra button be shown?",suggestions:[{if:"value=iframe",then:"When shown in an iframe"},{if:"value=no-iframe",then:"When shown as stand-alone webpage"},{if:"value=welcome-message",then:"When the welcome messages are enabled"},{if:"value=iframe",then:"When the welcome messages are disabled"}]},type:"array",description:""},{path:["startZoom"],required:!1,hints:{typehint:"float",group:"start_location",question:"At what zoomlevel should this theme open?",ifunset:"Use the default startzoom (0)"},type:"number",description:`Default location and zoom to start.
Note that this is barely used. Once the user has visited mapcomplete at least once, the previous location of the user will be used`},{path:["startLat"],required:!1,hints:{typehint:"float",group:"start_location",question:"At what start latitude should this theme open?",ifunset:"Use 0 as start latitude"},type:"number",description:`Default location and zoom to start.
Note that this is barely used. Once the user has visited mapcomplete at least once, the previous location of the user will be used`},{path:["startLon"],required:!1,hints:{typehint:"float",group:"start_location",question:"At what start longitude should this theme open?",ifunset:"Use 0 as start longitude"},type:"number",description:`Default location and zoom to start.
Note that this is barely used. Once the user has visited mapcomplete at least once, the previous location of the user will be used`},{path:["defaultBackgroundId"],required:!1,hints:{},type:"string",description:"The id of the default background. BY default: vanilla OSM"},{path:["credits"],required:!1,hints:{},type:[{type:"array",items:{type:"string"}},{type:"string"}],description:"Who helped to create this theme and should be attributed?"},{path:["hideFromOverview"],required:!1,hints:{},type:"boolean",description:"If set to true, this layout will not be shown in the overview with more themes"},{path:["layers"],required:!0,hints:{typehint:"layer[]",types:"hidden | layer | hidden",group:"layers",question:"What layers should this map show?",suggestions:[{if:"value=address",then:"address - Addresses"},{if:"value=advertising",then:"advertising - We will complete data from advertising features with reference, operator and lit"},{if:"value=ambulancestation",then:"ambulancestation - An ambulance station is an area for storage of ambulance vehicles, medical equipment, personal protective equipment, and other medical supplies."},{if:"value=animal_shelter",then:"animal_shelter - An animal shelter is a facility where animals in trouble are brought and facility's staff (volunteers or not) feeds them and cares of them, rehabilitating and healing them if necessary. This definition includes kennels for abandoned dogs, catteries for abandoned cats, shelters for other abandoned pets and wildlife recovery centres. "},{if:"value=artwork",then:"artwork - An open map of statues, busts, graffitis and other artwork all over the world"},{if:"value=atm",then:"atm - ATMs to withdraw money"},{if:"value=bank",then:"bank - A financial institution to deposit money"},{if:"value=barrier",then:"barrier - Obstacles while cycling, such as bollards and cycle barriers"},{if:"value=bench",then:"bench - A bench is a wooden, metal, stone, … surface where a human can sit. This layers visualises them and asks a few questions about them."},{if:"value=bench_at_pt",then:"bench_at_pt - A layer showing all public-transport-stops which do have a bench"},{if:"value=bicycle_library",then:"bicycle_library - A facility where bicycles can be lent for longer period of times"},{if:"value=bicycle_rental",then:"bicycle_rental - Bicycle rental stations"},{if:"value=bicycle_tube_vending_machine",then:"bicycle_tube_vending_machine - A layer showing vending machines for bicycle tubes (either purpose-built bicycle tube vending machines or classical vending machines with bicycle tubes and optionally additional bicycle related objects such as lights, gloves, locks, …)"},{if:"value=bike_cafe",then:"bike_cafe - A bike café is a café geared towards cyclists, for example with services such as a pump, with lots of bicycle-related decoration, …"},{if:"value=bike_cleaning",then:"bike_cleaning - A layer showing facilities where one can clean their bike"},{if:"value=bike_parking",then:"bike_parking - A layer showing where you can park your bike"},{if:"value=bike_repair_station",then:"bike_repair_station - A layer showing bicycle pumps and bicycle repair tool stands"},{if:"value=bike_shop",then:"bike_shop - A shop specifically selling bicycles or related items"},{if:"value=bike_themed_object",then:"bike_themed_object - A layer with bike-themed objects but who don't match any other layer"},{if:"value=binocular",then:"binocular - Binoculars"},{if:"value=birdhide",then:"birdhide - A birdhide"},{if:"value=cafe_pub",then:"cafe_pub - A layer showing cafés and pubs where one can gather around a drink. The layer asks for some relevant questions"},{if:"value=car_rental",then:"car_rental - Places where you can rent a car"},{if:"value=charging_station",then:"charging_station - A charging station"},{if:"value=climbing",then:"climbing - A dummy layer which contains tagrenderings, shared among the climbing layers"},{if:"value=climbing_area",then:"climbing_area - An area where climbing is possible, e.g. a crag, site, boulder, … Contains aggregation of routes"},{if:"value=climbing_club",then:"climbing_club - A climbing club or organisation"},{if:"value=climbing_gym",then:"climbing_gym - A climbing gym"},{if:"value=climbing_opportunity",then:"climbing_opportunity - Fallback layer with items on which climbing _might_ be possible. It is loaded when zoomed in a lot, to prevent duplicate items to be added"},{if:"value=climbing_route",then:"climbing_route - A single climbing route and its properties. Some properties are derived from the containing features"},{if:"value=clock",then:"clock - Layer with public clocks"},{if:"value=conflation",then:"conflation - If the import-button moves OSM points, the imported way points or conflates, a preview is shown. This layer defines how this preview is rendered. This layer cannot be included in a theme."},{if:"value=crab_address",then:"crab_address - Address data for Flanders by the governement, suited for import into OpenStreetMap. Datadump from 2021-10-26. This layer contains only visualisation logic. Import buttons should be added via an override. Note that HNRLABEL contains the original value, whereas _HNRLABEL contains a slightly cleaned version"},{if:"value=crossings",then:"crossings - Crossings for pedestrians and cyclists"},{if:"value=current_view",then:`current_view - A meta-layer which contains one single feature, namely the bounding box of the current map view. This can be used to trigger special actions. If a popup is defined for this layer, this popup will be accessible via an extra button on screen.

The icon on the button is the default icon of the layer, but can be customized by detecting 'button=yes'.`},{if:"value=cycleways_and_roads",then:"cycleways_and_roads - All infrastructure that someone can cycle over, accompanied with questions about this infrastructure"},{if:"value=defibrillator",then:"defibrillator - A layer showing defibrillators which can be used in case of emergency. This contains public defibrillators, but also defibrillators which might need staff to fetch the actual device"},{if:"value=dentist",then:"dentist - This layer shows dentist offices"},{if:"value=direction",then:"direction - This layer visualizes directions"},{if:"value=doctors",then:"doctors - This layer shows doctor offices"},{if:"value=dogpark",then:"dogpark - A layer showing dogparks, which are areas where dog are allowed to run without a leash"},{if:"value=drinking_water",then:"drinking_water - A layer showing drinking water fountains"},{if:"value=elevator",then:"elevator - This layer show elevators and asks for operational status and elevator dimensions. Useful for wheelchair accessibility information"},{if:"value=elongated_coin",then:"elongated_coin - Layer showing penny presses."},{if:"value=entrance",then:"entrance - A layer showing entrances and offering capabilities to survey some advanced data which is important for e.g. wheelchair users (but also bicycle users, people who want to deliver, …)"},{if:"value=etymology",then:"etymology - All objects which have an etymology known"},{if:"value=extinguisher",then:"extinguisher - Map layer to show fire extinguishers."},{if:"value=filters",then:"filters - This layer acts as library for common filters"},{if:"value=fire_station",then:"fire_station - Map layer to show fire stations."},{if:"value=fitness_centre",then:"fitness_centre - Layer showing fitness centres"},{if:"value=fitness_station",then:"fitness_station - Find a fitness station near you, and add missing ones."},{if:"value=fixme",then:"fixme - OSM objects that likely need to be fixed, based on a FIXME tag."},{if:"value=food",then:"food - A layer showing restaurants and fast-food amenities (with a special rendering for friteries)"},{if:"value=ghost_bike",then:"ghost_bike - A layer showing memorials for cyclists, killed in road accidents"},{if:"value=governments",then:"governments - This layer show governmental buildings. It was setup as commissioned layer for the client of OSOC '22"},{if:"value=gps_location",then:"gps_location - Meta layer showing the current location of the user. Add this to your theme and override the icon to change the appearance of the current location. The object will always have `id=gps` and will have _all_ the properties included in the [`Coordinates`-object](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates) (except latitude and longitude) returned by the browser, such as `speed`, `altitude`, `heading`, ...."},{if:"value=gps_location_history",then:"gps_location_history - Meta layer which contains the previous locations of the user as single points. This is mainly for technical reasons, e.g. to keep match the distance to the modified object"},{if:"value=gps_track",then:"gps_track - Meta layer showing the previous locations of the user as single line with controls, e.g. to erase, upload or download this track. Add this to your theme and override the maprendering to change the appearance of the travelled track."},{if:"value=guidepost",then:"guidepost - Guideposts (also known as fingerposts or finger posts) are often found along official hiking/cycling/riding/skiing routes to indicate the directions to different destinations"},{if:"value=hackerspace",then:"hackerspace - Hackerspace"},{if:"value=home_location",then:"home_location - Meta layer showing the home location of the user. The home location can be set in the [profile settings](https://www.openstreetmap.org/profile/edit) of OpenStreetMap."},{if:"value=hospital",then:"hospital - A layer showing hospital grounds"},{if:"value=hotel",then:"hotel - Layer showing all hotels"},{if:"value=hydrant",then:"hydrant - Map layer to show fire hydrants."},{if:"value=ice_cream",then:"ice_cream - A place where ice cream is sold over the counter"},{if:"value=icons",then:"icons - A layer acting as library for icon-tagrenderings, especially to show as badge next to a POI"},{if:"value=id_presets",then:"id_presets - Layer containing various presets and questions generated by ID. These are meant to be reused in other layers by importing the tagRenderings with `id_preset.<tagrendering>"},{if:"value=import_candidate",then:"import_candidate - Layer used as template in the importHelper"},{if:"value=indoors",then:"indoors - Basic indoor mapping: shows room outlines"},{if:"value=information_board",then:"information_board - A layer showing touristical, road side information boards (e.g. giving information about the landscape, a building, a feature, a map, …)"},{if:"value=kerbs",then:"kerbs - A layer showing kerbs."},{if:"value=kindergarten_childcare",then:"kindergarten_childcare - Shows kindergartens and preschools. Both are grouped in one layer, as they are regularly confused with each other"},{if:"value=last_click",then:"last_click - This layer defines how to render the 'last click'-location. By default, it will show a marker with the possibility to add a new point (if there are some presets) and/or to add a new note (if the 'note' layer attribute is set). If none are possible, this layer won't show up"},{if:"value=map",then:"map - A map, meant for tourists which is permanently installed in the public space"},{if:"value=maproulette",then:"maproulette - Layer showing all tasks in MapRoulette"},{if:"value=maproulette_challenge",then:"maproulette_challenge - Layer showing tasks of a single MapRoulette challenge. This layer is intended to be reused and extended in themes; refer to [the documentation](https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Integrating_Maproulette.md) on how to do this."},{if:"value=maxspeed",then:"maxspeed - Shows the allowed speed for every road"},{if:"value=memorial",then:"memorial - Layer showing memorial plaques, based upon a unofficial theme. Can be expanded to have multiple types of memorials later on"},{if:"value=named_streets",then:"named_streets - Hidden layer with all streets which have a name. Useful to detect addresses"},{if:"value=nature_reserve",then:"nature_reserve - A nature reserve is an area where nature can take its course"},{if:"value=note",then:"note - This layer shows notes on OpenStreetMap. Having this layer in your theme will trigger the 'add new note' functionality in the 'addNewPoint'-popup (or if your theme has no presets, it'll enable adding notes)"},{if:"value=observation_tower",then:"observation_tower - Towers with a panoramic view"},{if:"value=osm_community_index",then:"osm_community_index - A layer showing the OpenStreetMap Communities"},{if:"value=parcel_lockers",then:"parcel_lockers - Layer showing parcel lockers for collecting and sending parcels."},{if:"value=parking",then:"parking - A layer showing car parkings"},{if:"value=parking_spaces",then:"parking_spaces - Layer showing individual parking spaces."},{if:"value=parking_ticket_machine",then:"parking_ticket_machine - Layer with parking ticket machines to pay for parking."},{if:"value=pedestrian_path",then:"pedestrian_path - Pedestrian footpaths, especially used for indoor navigation and snapping entrances to this layer"},{if:"value=pharmacy",then:"pharmacy - A layer showing pharmacies, which (probably) dispense prescription drugs"},{if:"value=physiotherapist",then:"physiotherapist - This layer shows physiotherapists"},{if:"value=picnic_table",then:"picnic_table - The layer showing picnic tables"},{if:"value=play_forest",then:"play_forest - Een speelbos is een vrij toegankelijke zone in een bos"},{if:"value=playground",then:"playground - Playgrounds"},{if:"value=postboxes",then:"postboxes - The layer showing postboxes."},{if:"value=postoffices",then:"postoffices - A layer showing post offices."},{if:"value=public_bookcase",then:"public_bookcase - A streetside cabinet with books, accessible to anyone"},{if:"value=questions",then:"questions - Special library layer which does not need a '.questions'-prefix before being imported"},{if:"value=railway_platforms",then:"railway_platforms - Find every platform in the station, and the train routes that use them."},{if:"value=rainbow_crossings",then:"rainbow_crossings - A layer showing pedestrian crossings with rainbow paintings"},{if:"value=range",then:"range - Meta-layer, simply showing a bbox in red"},{if:"value=reception_desk",then:"reception_desk - A layer showing where the reception desks are and which asks some accessibility information"},{if:"value=recycling",then:"recycling - A layer with recycling containers and centres"},{if:"value=route_marker",then:"route_marker - Route markers are small markers often found along official hiking/cycling/riding/skiing routes to indicate the direction of the route."},{if:"value=school",then:"school - Schools giving primary and secondary education and post-secondary, non-tertiary education. Note that this level of education does not imply an age of the pupiles"},{if:"value=selected_element",then:"selected_element - Highlights the currently selected element. Override this layer to have different colors"},{if:"value=shelter",then:"shelter - Layer showing shelter structures"},{if:"value=shops",then:"shops - A shop"},{if:"value=shower",then:"shower - A layer showing (public) showers"},{if:"value=slow_roads",then:"slow_roads - All carfree roads"},{if:"value=speed_camera",then:"speed_camera - Layer showing speed cameras"},{if:"value=speed_display",then:"speed_display - Layer showing speed displays that alert drivers of their speed."},{if:"value=split_point",then:"split_point - Layer rendering the little scissors for the minimap in the 'splitRoadWizard'"},{if:"value=split_road",then:"split_road - Layer rendering the way to split in the 'splitRoadWizard'. This one is used instead of the variable rendering by the themes themselves, as they might not always be very visible"},{if:"value=sport_pitch",then:"sport_pitch - A sport pitch"},{if:"value=sports_centre",then:"sports_centre - Indoor and outdoor sports centres can be found on this layer"},{if:"value=stairs",then:"stairs - Layer showing stairs and escalators"},{if:"value=street_lamps",then:"street_lamps - A layer showing street lights"},{if:"value=surveillance_camera",then:"surveillance_camera - This layer shows surveillance cameras and allows a contributor to update information and add new cameras"},{if:"value=tertiary_education",then:"tertiary_education - Layer with all tertiary education institutes (ISCED:2011 levels 6,7 and 8)"},{if:"value=ticket_machine",then:"ticket_machine - Find ticket machines for public transport tickets"},{if:"value=ticket_validator",then:"ticket_validator - Find ticket validators to validate public transport tickets"},{if:"value=toilet",then:"toilet - A layer showing (public) toilets"},{if:"value=toilet_at_amenity",then:"toilet_at_amenity - A layer showing (public) toilets located at different places."},{if:"value=trail",then:"trail - Waymarked trails"},{if:"value=transit_routes",then:"transit_routes - Layer showing bus lines"},{if:"value=transit_stops",then:"transit_stops - Layer showing different types of transit stops."},{if:"value=tree_node",then:"tree_node - A layer showing trees"},{if:"value=unit",then:"unit - Library layer with all common units.  Units can _only_ be imported from this file."},{if:"value=usersettings",then:"usersettings - A special layer which is not meant to be shown on a map, but which is used to set user settings"},{if:"value=vending_machine",then:"vending_machine - Layer showing vending machines"},{if:"value=veterinary",then:"veterinary - A layer showing veterinarians"},{if:"value=viewpoint",then:"viewpoint - A nice viewpoint or nice view. Ideal to add an image if no other category fits"},{if:"value=village_green",then:"village_green - A layer showing village-green (which are communal green areas, but not quite parks)"},{if:"value=visitor_information_centre",then:"visitor_information_centre - A visitor center offers information about a specific attraction or place of interest where it is located."},{if:"value=walls_and_buildings",then:"walls_and_buildings - Special builtin layer providing all walls and buildings. This layer is useful in presets for objects which can be placed against walls (e.g. AEDs, postboxes, entrances, addresses, surveillance cameras, …). This layer is invisible by default and not toggleable by the user."},{if:"value=waste_basket",then:"waste_basket - This is a public waste basket, thrash can, where you can throw away your thrash."},{if:"value=waste_disposal",then:"waste_disposal - Waste Disposal Bin, medium to large bin for disposal of (household) waste"},{if:"value=windturbine",then:"windturbine - Modern windmills generating electricity"}]},type:[{description:"Configuration for a single layer",type:"object",properties:{id:{description:`question: What is the identifier of this layer?

This should be a simple, lowercase, human readable string that is used to identify the layer.
 A good ID is:
 - a noun
 - written in singular
 - describes the object
 - in english
 - only has lowercase letters, numbers or underscores. Do not use a space or a dash

type: id
group: Basic`,type:"string"},name:{description:`Used in the layer control panel to toggle a layer on and of.

ifunset: This will hide the layer in the layer control, making it not filterable and not toggleable

group: Basic
question: What is the name of this layer?`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},description:{description:`A description for the features shown in this layer.
This often resembles the introduction of the wiki.osm.org-page for this feature.

group: Basic
question: How would you describe the features that are shown on this layer?`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},source:{description:`Question: Where should the data be fetched from?
title: Data Source

This determines where the data for the layer is fetched: from OSM or from an external geojson dataset.

If no 'geojson' is defined, data will be fetched from overpass and the OSM-API.

Every source _must_ define which tags _must_ be present in order to be picked up.

Note: a source must always be defined. 'special' is only allowed if this is a builtin-layer

types: Load data with specific tags from OpenStreetMap ; Load data from an external geojson source ;
typesdefault: 0
group: Basic`,anyOf:[{type:"object",properties:{osmTags:{$ref:"#/definitions/TagConfigJson",description:`question: Which tags must be present on the feature to show it in this layer?
Every source must set which tags have to be present in order to load the given layer.`},maxCacheAge:{description:`question: How long (in seconds) is the data allowed to remain cached until it must be refreshed?
The maximum amount of seconds that a tile is allowed to linger in the cache

type: nat
default: 30 days
group: expert`,type:"number"}},required:["osmTags"]},{type:"object",properties:{geoJson:{description:`The actual source of the data to load, if loaded via geojson.

# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source

# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer

Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}

question: What is the URL of the geojson?
type: url`,type:"string"},geoJsonZoomLevel:{description:`To load a tiled geojson layer, set the zoomlevel of the tiles

question: If using a tiled geojson, what is the zoomlevel of the tiles?
ifunset: This is not a tiled geojson`,type:"number"},isOsmCache:{description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache.
This also indicates that making changes on this data is possible

question: Is this geojson a cache of OpenStreetMap data?
ifunset: This is not an OpenStreetMap cache
iftrue: this is based on OpenStreetMap and can thus be edited
group: expert`,type:"boolean"},mercatorCrs:{description:`Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag \`mercatorCrs: true\`  in the source for this

question: Does this geojson use  EPSG:900913 instead of WGS84 as projection?
iftrue: This geojson uses EPSG:900913 instead of WGS84
ifunset: This geojson uses WGS84 just like most geojson (default)`,type:"boolean"},idKey:{description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'

ifunset: An id with key \`id\` will be assigned automatically if no attribute \`id\` is set
inline: This geojson uses <b>{value}</b> as attribute to set the id
question: What is the name of the attribute containing the ID of the object?`,type:"string"}},required:["geoJson"]},{enum:["special","special:library"],type:"string"}]},calculatedTags:{description:`A list of extra tags to calculate, specified as "keyToAssignTo=javascript-expression".
There are a few extra functions available. Refer to <a>Docs/CalculatedTags.md</a> for more information
The functions will be run in order, e.g.
[
 "_max_overlap_m2=Math.max(...feat.overlapsWith("someOtherLayer").map(o => o.overlap))
 "_max_overlap_ratio=Number(feat._max_overlap_m2)/feat.area
]

The specified tags are evaluated lazily. E.g. if a calculated tag is only used in the popup (e.g. the number of nearby features),
the expensive calculation will only be performed then for that feature. This avoids clogging up the contributors PC when all features are loaded.

If a tag has to be evaluated strictly, use ':=' instead:

[
"_some_key:=some_javascript_expression"
]

See the full documentation on [https://github.com/pietervdvn/MapComplete/blob/master/Docs/CalculatedTags.md]

group: expert
question: What extra attributes should be calculated with javascript?`,type:"array",items:{type:"string"}},isShown:{description:`If set, only features matching this extra tag will be shown.
This is useful to hide certain features from view based on a calculated tag or if the features are provided by a different layer.

question: What other tags should features match for being shown?
group: advanced
ifunset: all features which match the 'source'-specification are shown.`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},minzoom:{description:`The minimum needed zoomlevel required to start loading and displaying the data.
This can be used to only show common features (e.g. a bicycle parking) only when the map is zoomed in very much (17).
This prevents cluttering the map with thousands of parkings if one is looking to an entire city.

Default: 0
group: Basic
type: nat
question: At what zoom level should features of the layer be shown?
ifunset: Always load this layer, even if the entire world is in view.`,type:"number"},shownByDefault:{description:`Indicates if this layer is shown by default;
can be used to hide a layer from start, or to load the layer but only to show it when appropriate (e.g. for advanced users)

question: Should this layer be enabled when opening the map for the first time?
iftrue: the layer is enabled when opening the map
iffalse: the layer is hidden until the contributor enables it. (If the filter-popup is disabled, this might never get enabled nor loaded)
default: true
group: advanced`,type:"boolean"},minzoomVisible:{description:`The zoom level at which point the data is hidden again
Default: 100 (thus: always visible

group: expert`,type:"number"},title:{description:`question: Edit the popup title
The title shown in a popup for elements of this layer.

group: title
types: use a fixed translation ; Use a dynamic tagRendering ; hidden
typesdefault: 1
type: translation
inline: {translated{value}}`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}]},popupInFloatover:{description:`Question: Should the information for this layer be shown in the sidebar or in a splash screen?

If set, open the selectedElementView in a floatOver instead of on the right.

iftrue: show the infobox in the splashscreen floating over the entire UI
iffalse: show the infobox in a sidebar on the right
group: advanced
default: sidebar`,type:"boolean"},titleIcons:{description:`Small icons shown next to the title.
If not specified, the OsmLink and wikipedia links will be used by default.
Use an empty array to hide them.
Note that "defaults" will insert all the default titleIcons (which are added automatically)

Use \`auto:<tagrenderingId>\` to automatically create an icon based on a tagRendering which has icons

Type: icon[]
group: infobox`,anyOf:[{type:"array",items:{anyOf:[{allOf:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"object",properties:{id:{type:"string"}}}]},{type:"string"}]}},{type:"array",items:[{type:"string",enum:["defaults"]}],minItems:1,maxItems:1}]},pointRendering:{description:`Creates points to render on the map.
This can render points for point-objects, lineobjects or areaobjects; use 'location' to indicate where it should be rendered

group: pointrendering`,type:"array",items:{$ref:"#/definitions/default_4"}},lineRendering:{description:`Creates lines and areas to render on the map
group: linerendering`,type:"array",items:{$ref:"#/definitions/default_5"}},passAllFeatures:{description:`If set, this layer will pass all the features it receives onto the next layer.
This is ideal for decoration, e.g. directions on cameras
iftrue: Make the features from this layer also available to the other layer; might result in this object being rendered by multiple layers
iffalse: normal behaviour: don't pass features allong
question: should this layer pass features to the next layers?
group: expert`,type:"boolean"},doNotDownload:{description:`If set, this layer will not query overpass; but it'll still match the tags above which are by chance returned by other layers.
Works well together with 'passAllFeatures', to add decoration
The opposite of \`forceLoad\`

iftrue: Do not attempt to query the data for this layer from overpass/the OSM API
iffalse: download the data as usual
group: expert
question: Should this layer be downloaded or is the data provided by a different layer (which has 'passAllFeatures'-set)?
default: false`,type:"boolean"},forceLoad:{description:`Advanced option - might be set by the theme compiler

If true, this data will _always_ be loaded, even if the theme is disabled by a filter or hidden.
The opposite of \`doNotDownload\`

question: Should this layer be forcibly loaded?
ifftrue: always download this layer, even if it is disabled
iffalse: only download data for this layer when needed (default)
default: false
group: expert`,type:"boolean"},presets:{description:`Presets for this layer.
A preset shows up when clicking the map on a without data (or when right-clicking/long-pressing);
it will prompt the user to add a new point.

The most important aspect are the tags, which define which tags the new point will have;
The title is shown in the dialog, along with the first sentence of the description.

Upon confirmation, the full description is shown beneath the buttons - perfect to add pictures and examples.

Note: the icon of the preset is determined automatically based on the tags and the icon above. Don't worry about that!
NB: if no presets are defined, the popup to add new points doesn't show up at all

group: presets`,type:"array",items:{type:"object",properties:{title:{description:`The title - shown on the 'add-new'-button.

This should include the article of the noun, e.g. 'a hydrant', 'a bicycle pump'.
This text will be inserted into \`Add {category} here\`, becoming \`Add a hydrant here\`.

Do _not_ indicate 'new': 'add a new shop here' is incorrect, as the shop might have existed forever, it could just be unmapped!

question: What is the word to describe this object?
inline: Add {translated(value)::font-bold} here`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},tags:{description:`A single tag (encoded as <code>key=value</code>) out of all the tags to add onto the newly created point.
Note that the icon in the UI will be chosen automatically based on the tags provided here.

question: What tag should be added to the new object?
type: simple_tag
typeHelper: uploadableOnly`,type:"array",items:{type:"string"}},description:{description:`An extra explanation of what the feature is, if it is not immediately clear from the title alone.

The _first sentence_ of the description is shown on the button of the \`add\` menu.
The full description is shown in the confirmation dialog.

(The first sentence is until the first '.'-character in the description)

question: How would you describe this feature?
ifunset: No extra description is given. This can be used to further explain the preset`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},exampleImages:{description:`The URL of an example image which shows a real-life example of what such a feature might look like.

Type: image
question: What is the URL of an image showing such a feature?`,type:"array",items:{type:"string"}},snapToLayer:{description:`question: Should the created point be snapped to a line layer?

If specified, these layers will be shown in the precise location picker  and the new point will be snapped towards it.
For example, this can be used to snap against \`walls_and_buildings\` (e.g. to attach a defibrillator, an entrance, an artwork, ... to the wall)
or to snap an obstacle (such as a bollard) to the \`cycleways_and_roads\`.

suggestions: return Array.from(layers.keys()).map(key => ({if: "value="+key, then: key+" - "+layers.get(key).description}))`,type:"array",items:{type:"string"}},maxSnapDistance:{description:`question: What is the maximum distance in the location-input that a point can be moved to be snapped to a way?

inline: a point is snapped if the location input is at most <b>{value}m</b> away from an object

If specified, a new point will only be snapped if it is within this range.
If further away, it'll be placed in the center of the location input
Distance in meter

ifunset: Do not snap to a layer`,type:"number"}},required:["tags","title"]}},tagRenderings:{description:`question: Edit this way this attributed is displayed or queried

A tag rendering is a block that either shows the known value or asks a question.

Refer to the class \`TagRenderingConfigJson\` to see the possibilities.

Note that we can also use a string here - where the string refers to a tag rendering defined in \`assets/questions/questions.json\`,
where a few very general questions are defined e.g. website, phone number, ...
Furthermore, _all_ the questions of another layer can be reused with \`otherlayer.*\`
If you need only a single of the tagRenderings, use \`otherlayer.tagrenderingId\`
If one or more questions have a 'group' or 'label' set, select all the entries with the corresponding group or label with \`otherlayer.*group\`
Remark: if a tagRendering is 'lent' from another layer, the 'source'-tags are copied and added as condition.
If they are not wanted, remove them with an override

A special value is 'questions', which indicates the location of the questions box. If not specified, it'll be appended to the bottom of the featureInfobox.

At last, one can define a group of renderings where parts of all strings will be replaced by multiple other strings.
This is mainly create questions for a 'left' and a 'right' side of the road.
These will be grouped and questions will be asked together

type: tagrendering[]
group: tagrenderings`,type:"array",items:{anyOf:[{description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`,type:"object",properties:{id:{type:"string"},mappings:{description:`Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes

question: What are common options?`,type:"array",items:{$ref:"#/definitions/MappingConfigJson"}},multiAnswer:{description:`If true, use checkboxes instead of radio buttons when asking the question

question: Should a contributor be allowed to select multiple mappings?

iftrue: allow to select multiple mappings
iffalse: only allow to select a single mapping
ifunset: only allow to select a single mapping`,type:"boolean"},freeform:{description:"Allow freeform text input from the user",type:"object",properties:{key:{description:`question: What is the name of the attribute that should be written to?
This is the OpenStreetMap-key that that value will be written to
ifunset: do not offer a freeform textfield as answer option`,type:"string"},type:{description:`question: What is the input type?
The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values
ifunset: use an unconstrained <b>string</b> as input (default)
suggestions: return validators.AllValidators.filter(type => !type.isMeta).map((type) => ({if: "value="+type.name, then: "<b>"+type.name+"</b> "+type.explanation.split("\\n")[0]}))`,type:"string"},placeholder:{description:`question: What placeholder text should be shown in the input-element if there is no input?
A (translated) text that is shown (as gray text) within the textfield
type: translation
group: expert`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},helperArgs:{description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'
group: expert`,type:"array",items:{}},addExtraTags:{description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'
group: expert`,type:"array",items:{type:"string"}},inline:{description:`question: Show the freeform as box within the question?
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
ifunset: show the freeform input field full-width
iftrue: show the freeform input field as a small field within the question
group: expert`,type:"boolean"},default:{description:`question: What value should be entered in the text field if no value is set?
This can help people to quickly enter the most common option
ifunset: do not prefill the textfield
group: expert`,type:"string"},invalidValues:{description:`question: What values of the freeform key should be interpreted as 'unknown'?
For example, if a feature has \`shop=yes\`, the question 'what type of shop is this?' should still asked
ifunset: The question will be considered answered if any value is set for the key
group: expert`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]}}},question:{description:`question: What question should be shown to the contributor?

A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well.

ifunset: This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},questionHint:{description:`question: Should some extra information be shown to the contributor, alongside the question?
This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like
ifunset: No extra hint is given`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},editButtonAriaLabel:{description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},labels:{description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer",type:"array",items:{type:"string"}},render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},required:["id"],additionalProperties:!1},{type:"object",properties:{id:{type:"string"},builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<QuestionableTagRenderingConfigJson>"}},required:["builtin","override"]},{allOf:[{$ref:"#/definitions/default<(string|QuestionableTagRenderingConfigJson|{builtin:string;override:Partial<QuestionableTagRenderingConfigJson>;})[]>"},{type:"object",properties:{id:{type:"string"}},required:["id"]}]},{type:"string"}]}},filter:{description:`All the extra questions for filtering.
If a string is given, mapComplete will search in 'filters.json' for the appropriate filter or will try to parse it as \`layername.filterid\` and us that one

group: filters`,anyOf:[{type:"array",items:{anyOf:[{$ref:"#/definitions/default_1"},{type:"string"}]}},{type:"object",properties:{sameAs:{type:"string"}},required:["sameAs"]}]},deletion:{description:`This block defines under what circumstances the delete dialog is shown for objects of this layer.
If set, a dialog is shown to the user to (soft) delete the point.
The dialog is built to be user friendly and to prevent mistakes.
If deletion is not possible, the dialog will hide itself and show the reason of non-deletability instead.

To configure, the following values are possible:

- false: never ever show the delete button
- true: show the default delete button
- undefined: use the mapcomplete default to show deletion or not. Currently, this is the same as 'false' but this will change in the future
- or: a hash with options (see below)

### The delete dialog



#### Hard deletion if enough experience

A feature can only be deleted from OpenStreetMap by mapcomplete if:

- It is a node
- No ways or relations use the node
- The logged-in user has enough experience OR the user is the only one to have edited the point previously
- The logged-in user has no unread messages (or has a ton of experience)
- The user did not select one of the 'non-delete-options' (see below)

In all other cases, a 'soft deletion' is used.

#### Soft deletion

A 'soft deletion' is when the point isn't deleted fromOSM but retagged so that it'll won't how up in the mapcomplete theme anymore.
This makes it look like it was deleted, without doing damage. A fixme will be added to the point.

Note that a soft deletion is _only_ possible if these tags are provided by the theme creator, as they'll be different for every theme

##### No-delete options

In some cases, the contributor might want to delete something for the wrong reason (e.g. someone who wants to have a path removed "because the path is on their private property").
However, the path exists in reality and should thus be on OSM - otherwise the next contributor will pass by and notice "hey, there is a path missing here! Let me redraw it in OSM!)

The correct approach is to retag the feature in such a way that it is semantically correct *and* that it doesn't show up on the theme anymore.
A no-delete option is offered as 'reason to delete it', but secretly retags.

group: editing
types: Use an advanced delete configuration ; boolean
iftrue: Allow deletion
iffalse: Do not allow deletion
ifunset: Do not allow deletion`,anyOf:[{type:"object",properties:{neededChangesets:{description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.

type: nat
question: How many changesets must a contributor have before being allowed to delete a point?`,type:"number"},extraDeleteReasons:{description:`*
By default, three reasons to delete a point are shown:

- The point does not exist anymore
- The point was a testing point
- THe point could not be found

However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:

- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...

These reasons can be stated here and will be shown in the list of options the user can choose from`,type:"array",items:{type:"object",properties:{explanation:{description:`The text that will be shown to the user as option for why this point does not exist anymore.
Note that the most common reasons (test point, does not exist anymore, cannot be found) are already offered by default

question: For what extra reason might this feature be removed in real-life?`},changesetMessage:{description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english

question: What should be added to the changeset as delete reason?`,type:"string"}},required:["changesetMessage","explanation"]}},nonDeleteMappings:{description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).

By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`,type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`The tags that will be given to the object.
This must remove tags so that the 'source/osmTags' won't match anymore

question: What tags should be applied to the object?`},then:{description:`The human explanation for the options

question: What text should be shown to the contributor for this reason?`}},required:["if","then"]}},softDeletionTags:{description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!

Example (note that "amenity=" erases the 'amenity'-key alltogether):

\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`

or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):

\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\`

question: If a hard delete is not possible, what tags should be applied to mark this feature as deleted?
type: tag`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},omitDefaultDeleteReasons:{description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping

question: Should the default delete reasons be hidden?
iftrue: Hide the default delete reasons
iffalse: Show the default delete reasons
ifunset: Show the default delete reasons (default behaviour)`,type:"boolean"}},additionalProperties:!1},{type:"boolean"}]},allowMove:{description:`Indicates if a point can be moved and why.

A feature can be moved by MapComplete if:

- It is a point
- The point is _not_ part of a way or a a relation.

types: use an advanced move configuration ; boolean
group: editing
question: Is deleting a point allowed?
iftrue: Allow contributors to move a point (for accuracy or a relocation)
iffalse: Don't allow contributors to move points
ifunset: Don't allow contributors to move points (default)`,anyOf:[{type:"object",properties:{enableImproveAccuracy:{description:`question: Should moving this type of point to improve the accuracy be allowed?
iftrue: This point can be moved to improve the accuracy
ifunset: (default) This point can be moved to improve the accuracy
iffalse: This point cannot be moved to improve the accuracy`,type:"boolean"},enableRelocation:{description:"question: Should moving this type of point due to a relocation be allowed?\n\nThis will erase the attributes `addr:street`, `addr:housenumber`, `addr:city` and `addr:postcode`\n\niftrue: This type of point can be moved due to a relocation (and will remove address information when this is done)\nifunset: (default) This type of point can be moved due to a relocation (and will remove address information when this is done)\niffalse: This type of point cannot be moved due to a relocation",type:"boolean"}},additionalProperties:!1},{type:"boolean"}]},allowSplit:{description:`If set, a 'split this way' button is shown on objects rendered as LineStrings, e.g. highways.

If the way is part of a relation, MapComplete will attempt to update this relation as well
question: Should the contributor be able to split ways using this layer?
iftrue: enable the 'split-roads'-component
iffalse: don't enable the split-roads componenet
ifunset: don't enable the split-roads component
group: editing`,type:"boolean"},units:{type:"array",items:{anyOf:[{$ref:"#/definitions/default_2"},{$ref:"#/definitions/Record<string,string|{quantity:string;denominations:string[];canonical?:string|undefined;}>"}]}},syncSelection:{description:`If set, synchronizes whether or not this layer is enabled.

group: advanced
question: Should enabling/disabling the layer be saved (locally or in the cloud)?
suggestions: return [{if: "value=no", then: "Don't save, always revert to the default"}, {if: "value=local", then: "Save selection in local storage"}, {if: "value=theme-only", then: "Save the state in the OSM-usersettings, but apply on this theme only (default)"}, {if: "value=global", then: "Save in OSM-usersettings and toggle on _all_ themes using this layer"}]`,enum:["global","local","no","theme-only"],type:"string"},"#":{description:`Used for comments and/or to disable some checks

no-question-hint-check: disables a check in MiscTagRenderingChecks which complains about 'div', 'span' or 'class=subtle'-HTML elements in the tagRendering

group: hidden`,type:"string"},fullNodeDatabase:{description:`_Set automatically by MapComplete, please ignore_

group: hidden`,type:"boolean"}},required:["id","pointRendering","source"],additionalProperties:!1},{type:"object",properties:{builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<LayerConfigJson>"},hideTagRenderingsWithLabels:{description:`TagRenderings with any of these labels will be removed from the layer.
Note that the 'id' and 'group' are considered labels too`,type:"array",items:{type:"string"}}},required:["builtin","override"]},{type:"string"}],description:`Every layer contains a description of which feature to display - the overpassTags which are queried.
Instead of running one query for every layer, the query is fused.
Afterwards, every layer is given the list of features.
Every layer takes away the features that match with them*, and give the leftovers to the next layers.
This implies that the _order_ of the layers is important in the case of features with the same tags;
as the later layers might never receive their feature.
*layers can also remove 'leftover'-features if the leftovers overlap with a feature in the layer itself
Note that builtin layers can be reused. Either put in the name of the layer to reuse, or use {builtin: "layername", override: ...}
The 'override'-object will be copied over the original values of the layer, which allows to change certain aspects of the layer
For example: If you would like to use layer nature reserves, but only from a specific operator (eg. Natuurpunt) you would use the following in your theme:
\`\`\`
"layer": {
 "builtin": "nature_reserve",
 "override": {"source":
 {"osmTags": {
 "+and":["operator=Natuurpunt"]
   }
  }
 }
}
\`\`\`
It's also possible to load multiple layers at once, for example, if you would like for both drinking water and benches to start at the zoomlevel at 12, you would use the following:
\`\`\`
"layer": {
 "builtin": ["benches", "drinking_water"],
 "override": {"minzoom": 12}
}
\`\`\``},{path:["layers","id"],required:!0,hints:{typehint:"id",group:"Basic",question:"What is the identifier of this layer?"},type:"string",description:`This should be a simple, lowercase, human readable string that is used to identify the layer.
 A good ID is:
 - a noun
 - written in singular
 - describes the object
 - in english
 - only has lowercase letters, numbers or underscores. Do not use a space or a dash`},{path:["layers","name"],required:!1,hints:{group:"Basic",question:"What is the name of this layer?",ifunset:"This will hide the layer in the layer control, making it not filterable and not toggleable"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Used in the layer control panel to toggle a layer on and of."},{path:["layers","description"],required:!1,hints:{group:"Basic",question:"How would you describe the features that are shown on this layer?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A description for the features shown in this layer.
This often resembles the introduction of the wiki.osm.org-page for this feature.`},{path:["layers","source"],required:!0,hints:{types:"Load data with specific tags from OpenStreetMap ; Load data from an external geojson source ;",typesdefault:"0",group:"Basic",question:"Where should the data be fetched from?",title:"Data Source"},type:[{type:"object",properties:{osmTags:{$ref:"#/definitions/TagConfigJson",description:`question: Which tags must be present on the feature to show it in this layer?
Every source must set which tags have to be present in order to load the given layer.`},maxCacheAge:{description:`question: How long (in seconds) is the data allowed to remain cached until it must be refreshed?
The maximum amount of seconds that a tile is allowed to linger in the cache

type: nat
default: 30 days
group: expert`,type:"number"}},required:["osmTags"]},{type:"object",properties:{geoJson:{description:`The actual source of the data to load, if loaded via geojson.

# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source

# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer

Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}

question: What is the URL of the geojson?
type: url`,type:"string"},geoJsonZoomLevel:{description:`To load a tiled geojson layer, set the zoomlevel of the tiles

question: If using a tiled geojson, what is the zoomlevel of the tiles?
ifunset: This is not a tiled geojson`,type:"number"},isOsmCache:{description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache.
This also indicates that making changes on this data is possible

question: Is this geojson a cache of OpenStreetMap data?
ifunset: This is not an OpenStreetMap cache
iftrue: this is based on OpenStreetMap and can thus be edited
group: expert`,type:"boolean"},mercatorCrs:{description:`Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag \`mercatorCrs: true\`  in the source for this

question: Does this geojson use  EPSG:900913 instead of WGS84 as projection?
iftrue: This geojson uses EPSG:900913 instead of WGS84
ifunset: This geojson uses WGS84 just like most geojson (default)`,type:"boolean"},idKey:{description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'

ifunset: An id with key \`id\` will be assigned automatically if no attribute \`id\` is set
inline: This geojson uses <b>{value}</b> as attribute to set the id
question: What is the name of the attribute containing the ID of the object?`,type:"string"}},required:["geoJson"]},{enum:["special","special:library"],type:"string"}],description:`This determines where the data for the layer is fetched: from OSM or from an external geojson dataset.
If no 'geojson' is defined, data will be fetched from overpass and the OSM-API.
Every source _must_ define which tags _must_ be present in order to be picked up.
Note: a source must always be defined. 'special' is only allowed if this is a builtin-layer`},{path:["layers","source","osmTags"],required:!0,hints:{typehint:"tag",question:"Which tags must be present on the feature to show it in this layer?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"Every source must set which tags have to be present in order to load the given layer."},{path:["layers","source","maxCacheAge"],required:!1,hints:{typehint:"nat",group:"expert",default:"30 days",question:"How long (in seconds) is the data allowed to remain cached until it must be refreshed?"},type:"number",description:"The maximum amount of seconds that a tile is allowed to linger in the cache"},{path:["layers","source","geoJson"],required:!0,hints:{typehint:"url",question:"What is the URL of the geojson?"},type:"string",description:`The actual source of the data to load, if loaded via geojson.
# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source
# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer
Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}`},{path:["layers","source","geoJsonZoomLevel"],required:!1,hints:{question:"If using a tiled geojson, what is the zoomlevel of the tiles?",ifunset:"This is not a tiled geojson"},type:"number",description:"To load a tiled geojson layer, set the zoomlevel of the tiles"},{path:["layers","source","isOsmCache"],required:!1,hints:{group:"expert",question:"Is this geojson a cache of OpenStreetMap data?",iftrue:"this is based on OpenStreetMap and can thus be edited",ifunset:"This is not an OpenStreetMap cache"},type:"boolean",description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache.
This also indicates that making changes on this data is possible`},{path:["layers","source","mercatorCrs"],required:!1,hints:{question:"Does this geojson use  EPSG:900913 instead of WGS84 as projection?",iftrue:"This geojson uses EPSG:900913 instead of WGS84",ifunset:"This geojson uses WGS84 just like most geojson (default)"},type:"boolean",description:"Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag `mercatorCrs: true`  in the source for this"},{path:["layers","source","idKey"],required:!1,hints:{question:"What is the name of the attribute containing the ID of the object?",ifunset:"An id with key `id` will be assigned automatically if no attribute `id` is set",inline:"This geojson uses <b>{value}</b> as attribute to set the id"},type:"string",description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'`},{path:["layers","calculatedTags"],required:!1,hints:{group:"expert",question:"What extra attributes should be calculated with javascript?"},type:"array",description:`A list of extra tags to calculate, specified as "keyToAssignTo=javascript-expression".
There are a few extra functions available. Refer to <a>Docs/CalculatedTags.md</a> for more information
The functions will be run in order, e.g.
[
 "_max_overlap_m2=Math.max(...feat.overlapsWith("someOtherLayer").map(o => o.overlap))
 "_max_overlap_ratio=Number(feat._max_overlap_m2)/feat.area
]
The specified tags are evaluated lazily. E.g. if a calculated tag is only used in the popup (e.g. the number of nearby features),
the expensive calculation will only be performed then for that feature. This avoids clogging up the contributors PC when all features are loaded.
If a tag has to be evaluated strictly, use ':=' instead:
[
"_some_key:=some_javascript_expression"
]
See the full documentation on [https://github.com/pietervdvn/MapComplete/blob/master/Docs/CalculatedTags.md]`},{path:["layers","isShown"],required:!1,hints:{group:"advanced",question:"What other tags should features match for being shown?",ifunset:"all features which match the 'source'-specification are shown."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, only features matching this extra tag will be shown.
This is useful to hide certain features from view based on a calculated tag or if the features are provided by a different layer.`},{path:["layers","isShown","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","isShown","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","minzoom"],required:!1,hints:{typehint:"nat",group:"Basic",default:"0",question:"At what zoom level should features of the layer be shown?",ifunset:"Always load this layer, even if the entire world is in view."},type:"number",description:`The minimum needed zoomlevel required to start loading and displaying the data.
This can be used to only show common features (e.g. a bicycle parking) only when the map is zoomed in very much (17).
This prevents cluttering the map with thousands of parkings if one is looking to an entire city.`},{path:["layers","shownByDefault"],required:!1,hints:{group:"advanced",default:"true",question:"Should this layer be enabled when opening the map for the first time?",iftrue:"the layer is enabled when opening the map",iffalse:"the layer is hidden until the contributor enables it. (If the filter-popup is disabled, this might never get enabled nor loaded)"},type:"boolean",description:`Indicates if this layer is shown by default;
can be used to hide a layer from start, or to load the layer but only to show it when appropriate (e.g. for advanced users)`},{path:["layers","minzoomVisible"],required:!1,hints:{group:"expert",default:"100 (thus: always visible"},type:"number",description:"The zoom level at which point the data is hidden again"},{path:["layers","title"],required:!1,hints:{typehint:"translation",types:"use a fixed translation ; Use a dynamic tagRendering ; hidden",typesdefault:"1",group:"title",question:"Edit the popup title",inline:"{translated{value}}"},type:[{$ref:"#/definitions/Record<string,string>"},{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"The title shown in a popup for elements of this layer."},{path:["layers","title","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","title","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","title","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","title","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","title","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","title","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","title","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","title","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","title","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","title","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","title","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","title","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","title","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","title","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","title","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","title","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","popupInFloatover"],required:!1,hints:{group:"advanced",default:"sidebar",question:"Should the information for this layer be shown in the sidebar or in a splash screen?",iftrue:"show the infobox in the splashscreen floating over the entire UI",iffalse:"show the infobox in a sidebar on the right"},type:"boolean",description:"If set, open the selectedElementView in a floatOver instead of on the right."},{path:["layers","titleIcons"],required:!1,hints:{typehint:"icon[]",group:"infobox"},type:[{type:"array",items:{anyOf:[{allOf:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"object",properties:{id:{type:"string"}}}]},{type:"string"}]}},{type:"array",items:[{type:"string",enum:["defaults"]}],minItems:1,maxItems:1}],description:`Small icons shown next to the title.
If not specified, the OsmLink and wikipedia links will be used by default.
Use an empty array to hide them.
Note that "defaults" will insert all the default titleIcons (which are added automatically)
Use \`auto:<tagrenderingId>\` to automatically create an icon based on a tagRendering which has icons`},{path:["layers","titleIcons"],required:!1,hints:{},type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","titleIcons","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","titleIcons","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","titleIcons","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","titleIcons","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","titleIcons","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","titleIcons","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","titleIcons","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","titleIcons","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","titleIcons","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","titleIcons","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","titleIcons","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","titleIcons","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","titleIcons","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","titleIcons","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","titleIcons","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","titleIcons","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering"],required:!0,hints:{group:"pointrendering"},type:"array",description:`Creates points to render on the map.
This can render points for point-objects, lineobjects or areaobjects; use 'location' to indicate where it should be rendered`},{path:["layers","pointRendering"],required:!1,hints:{},type:"object",description:`The PointRenderingConfig gives all details onto how to render a single point of a feature.
This can be used if:
- The feature is a point
- To render something at the centroid of an area, or at the start, end or projected centroid of a way`},{path:["layers","pointRendering","location"],required:!0,hints:{question:"At what location should this icon be shown?",suggestions:[{if:"value=point",then:"Show an icon for point (node) objects"},{if:"value=centroid",then:"Show an icon for line or polygon (way) objects at their centroid location"},{if:"value=start",then:"Show an icon for line (way) objects at the start"},{if:"value=end",then:"Show an icon for line (way) object at the end"},{if:"value=projected_centerpoint",then:"Show an icon for line (way) object near the centroid location, but moved onto the line"}],multianswer:"true"},type:"array",description:""},{path:["layers","pointRendering","marker"],required:!1,hints:{},type:"array",description:"The marker for an element.\nNote that this also defines the icon for this layer (rendered with the overpass-tags) <i>and</i> the icon in the presets.\nThe result of the icon is rendered as follows:\n- The first icon is rendered on the map\n- The second entry is overlayed on top of it\n- ...\nAs a result, on could use a generic icon (`pin`, `circle`, `square`) with a color, then overlay it with a specific icon."},{path:["layers","pointRendering","marker","icon"],required:!0,hints:{typehint:"icon",question:"What icon should be used?",suggestions:[{if:"value=pin",then:"pin",icon:"pin"},{if:"value=square",then:"square",icon:"square"},{if:"value=circle",then:"circle",icon:"circle"},{if:"value=checkmark",then:"checkmark",icon:"checkmark"},{if:"value=clock",then:"clock",icon:"clock"},{if:"value=close",then:"close",icon:"close"},{if:"value=crosshair",then:"crosshair",icon:"crosshair"},{if:"value=help",then:"help",icon:"help"},{if:"value=home",then:"home",icon:"home"},{if:"value=invalid",then:"invalid",icon:"invalid"},{if:"value=location",then:"location",icon:"location"},{if:"value=location_empty",then:"location_empty",icon:"location_empty"},{if:"value=location_locked",then:"location_locked",icon:"location_locked"},{if:"value=note",then:"note",icon:"note"},{if:"value=resolved",then:"resolved",icon:"resolved"},{if:"value=ring",then:"ring",icon:"ring"},{if:"value=scissors",then:"scissors",icon:"scissors"},{if:"value=teardrop",then:"teardrop",icon:"teardrop"},{if:"value=teardrop_with_hole_green",then:"teardrop_with_hole_green",icon:"teardrop_with_hole_green"},{if:"value=triangle",then:"triangle",icon:"triangle"},{if:"value=brick_wall_square",then:"brick_wall_square",icon:"brick_wall_square"},{if:"value=brick_wall_round",then:"brick_wall_round",icon:"brick_wall_round"},{if:"value=gps_arrow",then:"gps_arrow",icon:"gps_arrow"},{if:"value=checkmark",then:"checkmark",icon:"checkmark"},{if:"value=help",then:"help",icon:"help"},{if:"value=close",then:"close",icon:"close"},{if:"value=invalid",then:"invalid",icon:"invalid"},{if:"value=heart",then:"heart",icon:"heart"},{if:"value=heart_outline",then:"heart_outline",icon:"heart_outline"},{if:"value=confirm",then:"confirm",icon:"confirm"},{if:"value=direction",then:"direction",icon:"direction"},{if:"value=not_found",then:"not_found",icon:"not_found"},{if:"value=mastodon",then:"mastodon",icon:"mastodon"},{if:"value=party",then:"party",icon:"party"},{if:"value=addSmall",then:"addSmall",icon:"addSmall"}]},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"object",properties:{builtin:{type:"string"},override:{}},required:["builtin","override"]},{type:"string"}],description:""},{path:["layers","pointRendering","marker","icon","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","pointRendering","marker","icon","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","marker","icon","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","marker","icon","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","marker","color"],required:!1,hints:{typehint:"color",question:"What colour should the icon be?"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"object",properties:{builtin:{type:"string"},override:{}},required:["builtin","override"]},{type:"string"}],description:"This will only work for the default icons such as `pin`,`circle`,..."},{path:["layers","pointRendering","marker","color","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","pointRendering","marker","color","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","marker","color","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","marker","color","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","iconBadges"],required:!1,hints:{group:"hidden"},type:"array",description:"A list of extra badges to show next to the icon as small badge\nThey will be added as a 25% height icon at the bottom right of the icon, with all the badges in a flex layout.\nNote: strings are interpreted as icons, so layering and substituting is supported. You can use `circle:white;./my_icon.svg` to add a background circle"},{path:["layers","pointRendering","iconBadges","if"],required:!0,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","iconBadges","then"],required:!0,hints:{typehint:"icon"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:"Badge to show"},{path:["layers","pointRendering","iconBadges","then","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","pointRendering","iconBadges","then","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","iconBadges","then","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","iconBadges","then","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","iconSize"],required:!1,hints:{question:"What size should the marker be on the map?",ifunset:"Use the default size (<b>40,40</b> px)"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:'A string containing "<width>,<height>" in pixels'},{path:["layers","pointRendering","iconSize","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","iconSize","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","iconSize","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","iconSize","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","iconSize","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","iconSize","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","iconSize","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","iconSize","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","iconSize","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","iconSize","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","iconSize","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","iconSize","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","iconSize","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","iconSize","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","iconSize","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","iconSize","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","iconSize","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","iconSize","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","iconSize","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","iconSize","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","anchor"],required:!1,hints:{question:"What is the anchorpoint of the icon?",ifunset:"Use MapComplete-default (<b>center</b>)",suggestions:[{if:"value=center",then:"Place the <b>center</b> of the icon on the geographical location"},{if:"value=top",then:"Place the <b>top</b> of the icon on the geographical location"},{if:"value=bottom",then:"Place the <b>bottom</b> of the icon on the geographical location"},{if:"value=left",then:"Place the <b>left</b> of the icon on the geographical location"},{if:"value=right",then:"Place the <b>right</b> of the icon on the geographical location"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This matches the geographical point with a location on the icon."},{path:["layers","pointRendering","anchor","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","anchor","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","anchor","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","anchor","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","anchor","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","anchor","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","anchor","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","anchor","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","anchor","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","anchor","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","anchor","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","anchor","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","anchor","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","anchor","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","anchor","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","anchor","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","anchor","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","anchor","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","anchor","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","anchor","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","rotation"],required:!1,hints:{question:"What rotation should be applied on the icon?",ifunset:"Do not rotate"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This is mostly useful for items that face a specific direction, such as surveillance cameras\nThis is interpreted as css property for 'rotate', thus has to end with 'deg', e.g. `90deg`, `{direction}deg`, `calc(90deg - {camera:direction}deg)``"},{path:["layers","pointRendering","rotation","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","rotation","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","rotation","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","rotation","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","rotation","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","rotation","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotation","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotation","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","rotation","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotation","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotation","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","rotation","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","rotation","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","rotation","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","rotation","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","rotation","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","rotation","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","rotation","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","rotation","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","rotation","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","label"],required:!1,hints:{types:"Dynamic value based on the attributes ; string",question:"What label should be shown beneath the marker?",ifunset:"Do not show a label beneath the marker",inline:"Always show label <b>{value}</b> beneath the marker"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:'For example: `&LT;div style="background: white">{name}&LT;/div>`\nIf the icon is undefined, then the label is shown in the center of the feature.'},{path:["layers","pointRendering","label","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","label","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","label","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","label","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","label","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","label","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","label","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","label","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","label","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","label","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","label","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","label","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","label","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","label","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","label","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","label","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","label","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","label","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","label","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","label","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","labelCss"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"What CSS should be applied to the label?",ifunset:"Do not apply extra CSS-labels to the label",inline:"Apply CSS-style <b>{value}</b> to the label"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"You can set the css-properties here, e.g. `background: red; font-size: 12px; `"},{path:["layers","pointRendering","labelCss","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","labelCss","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","labelCss","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","labelCss","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","labelCss","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","labelCss","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCss","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCss","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","labelCss","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCss","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCss","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","labelCss","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","labelCss","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","labelCss","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","labelCss","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","labelCss","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","labelCss","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","labelCss","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","labelCss","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","labelCss","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","labelCssClasses"],required:!1,hints:{types:"Dynamic value ; string",question:"Which CSS-classes should be applied to the label?",ifunset:"Do not apply extra CSS-classes to the label",inline:"Apply CSS-classes <b>{value}</b> to the label",suggestions:[{if:"value=bg-white rounded px-2",then:"Draw on a white background"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"The classes should be separated by a space (` `)\nYou can use most Tailwind-css classes, see https://tailwindcss.com/ for more information\nFor example: `center bg-gray-500 mx-2 my-1 rounded-full`"},{path:["layers","pointRendering","labelCssClasses","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","labelCssClasses","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","labelCssClasses","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","labelCssClasses","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","labelCssClasses","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","labelCssClasses","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCssClasses","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCssClasses","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","labelCssClasses","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCssClasses","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCssClasses","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","labelCssClasses","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","labelCssClasses","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","labelCssClasses","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","labelCssClasses","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","labelCssClasses","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","labelCssClasses","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","labelCssClasses","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","labelCssClasses","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","labelCssClasses","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","css"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"What CSS should be applied to the entire marker?",ifunset:"Do not apply extra CSS element to the entire marker",inline:"Apply CSS-style <b>{value}</b> to the _entire marker_"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"You can set the css-properties here, e.g. `background: red; font-size: 12px; `\nThis will be applied to the _container_ containing both the marker and the label"},{path:["layers","pointRendering","css","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","css","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","css","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","css","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","css","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","css","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","css","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","css","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","css","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","css","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","css","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","css","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","css","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","css","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","css","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","css","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","css","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","css","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","css","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","css","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","cssClasses"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"Which CSS-classes should be applied to the entire marker?",ifunset:"Do not apply extra CSS-classes to the label",inline:"Apply CSS-classes <b>{value}</b> to the entire container"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This will be applied to the _container_ containing both the marker and the label\nThe classes should be separated by a space (` `)\nYou can use most Tailwind-css classes, see https://tailwindcss.com/ for more information\nFor example: `center bg-gray-500 mx-2 my-1 rounded-full`"},{path:["layers","pointRendering","cssClasses","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","cssClasses","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","cssClasses","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","cssClasses","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","cssClasses","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","cssClasses","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","cssClasses","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","cssClasses","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","cssClasses","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","cssClasses","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","cssClasses","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","cssClasses","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","cssClasses","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","cssClasses","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","cssClasses","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","cssClasses","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","cssClasses","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","cssClasses","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","cssClasses","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","cssClasses","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","pitchAlignment"],required:!1,hints:{group:"expert",question:"If the map is pitched, should the icon stay parallel to the screen or to the groundplane?",suggestions:[{if:"value=canvas",then:"The icon will stay upward and not be transformed as if it sticks to the screen"},{if:"value=map",then:"The icon will be transformed as if it were painted onto the ground. (Automatically sets rotationAlignment)"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{enum:["canvas","map"],type:"string"}],description:""},{path:["layers","pointRendering","pitchAlignment","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","pitchAlignment","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","pitchAlignment","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","pitchAlignment","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","pitchAlignment","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","pitchAlignment","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","pitchAlignment","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","pitchAlignment","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","pitchAlignment","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","pitchAlignment","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","pitchAlignment","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","pitchAlignment","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","pitchAlignment","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","pitchAlignment","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","pitchAlignment","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","pitchAlignment","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","pitchAlignment","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","pitchAlignment","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","pitchAlignment","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","pitchAlignment","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","rotationAlignment"],required:!1,hints:{group:"expert",question:"Should the icon be rotated if the map is rotated?",ifunset:"Do not rotate or tilt icons. Always keep the icons straight",suggestions:[{if:"value=canvas",then:"Never rotate the icon"},{if:"value=map",then:"If the map is rotated, rotate the icon as well. This gives the impression of an icon that floats perpendicular above the ground."}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{enum:["canvas","map"],type:"string"}],description:""},{path:["layers","pointRendering","rotationAlignment","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","rotationAlignment","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","rotationAlignment","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","rotationAlignment","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","rotationAlignment","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","rotationAlignment","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotationAlignment","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotationAlignment","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","rotationAlignment","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotationAlignment","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotationAlignment","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","rotationAlignment","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","rotationAlignment","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","rotationAlignment","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","rotationAlignment","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","rotationAlignment","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","rotationAlignment","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","rotationAlignment","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","rotationAlignment","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","rotationAlignment","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","lineRendering"],required:!1,hints:{group:"linerendering"},type:"array",description:"Creates lines and areas to render on the map"},{path:["layers","lineRendering"],required:!1,hints:{},type:"object",description:`The LineRenderingConfig gives all details onto how to render a single line of a feature.
This can be used if:
- The feature is a line
- The feature is an area`},{path:["layers","lineRendering","color"],required:!1,hints:{typehint:"color",types:"dynamic value ; string",question:"What color should lines be drawn in?",inline:"The line colour always is <b>{value}</b>",title:"Line Colour"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:`For an area, this will be the colour of the outside line.
If the value starts with "--", the style of the body element will be queried for the corresponding variable instead`},{path:["layers","lineRendering","color","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","lineRendering","color","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","lineRendering","color","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","lineRendering","color","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","lineRendering","width"],required:!1,hints:{typehint:"pnat",types:"dynamic value ; string",question:"How wide should the line be?",ifunset:"Use the default-linewidth of 7 pixels",inline:"The line width is <b>{value} pixels</b>",title:"Line width"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:["string","number"]}],description:"The stroke-width for way-elements"},{path:["layers","lineRendering","width","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","lineRendering","width","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","lineRendering","width","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","lineRendering","width","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","lineRendering","dashArray"],required:!1,hints:{question:"Should a dasharray be used to render the lines?",ifunset:"Ways are rendered with a full line"},type:"string",description:"The dasharray defines 'pixels of line, pixels of gap, pixels of line, pixels of gap, ...'. For example, `5 6` will be 5 pixels of line followed by a 6 pixel gap.\nCannot be a dynamic property due to a mapbox limitation"},{path:["layers","lineRendering","lineCap"],required:!1,hints:{types:"dynamic value ; string",question:"What form should the line-ending have?",ifunset:"Use the default value (round ending)",suggestions:[{if:"value=round",then:"Round endings"},{if:"value=square",then:"square endings"},{if:"value=butt",then:"no ending (square ending at the end, without padding)"}],title:"Line Cap"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:""},{path:["layers","lineRendering","lineCap","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","lineRendering","lineCap","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","lineRendering","lineCap","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","lineRendering","lineCap","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","lineRendering","fillColor"],required:!1,hints:{typehint:"color",types:"dynamic value ; string",question:"What colour should be used as fill colour for polygons?",ifunset:"The polygon fill colour will be a more transparent version of the stroke colour",inline:"The fill colour is <b>{value}</b>",suggestions:[{if:"value=#00000000",then:"Use a transparent fill (only render the outline)"}]},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:""},{path:["layers","lineRendering","fillColor","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","lineRendering","fillColor","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","lineRendering","fillColor","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","lineRendering","fillColor","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","lineRendering","offset"],required:!1,hints:{typehint:"int",types:"dynamic value ; number",question:"Should the lines be moved (offsetted) with a number of pixels against the geographical lines?",ifunset:"don't offset lines on the map",inline:"Pixel offset by <b>{value}</b> pixels"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"number"}],description:`The number of pixels this line should be moved.
Use a positive number to move to the right in the drawing direction or a negative to move to the left (left/right as defined by the drawing direction of the line).
IMPORTANT: MapComplete will already normalize 'key:both:property' and 'key:both' into the corresponding 'key:left' and 'key:right' tagging (same for 'sidewalk=left/right/both' which is rewritten to 'sidewalk:left' and 'sidewalk:right')
This simplifies programming. Refer to the CalculatedTags.md-documentation for more details`},{path:["layers","lineRendering","offset","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","lineRendering","offset","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","lineRendering","offset","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","lineRendering","offset","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","passAllFeatures"],required:!1,hints:{group:"expert",question:"should this layer pass features to the next layers?",iftrue:"Make the features from this layer also available to the other layer; might result in this object being rendered by multiple layers",iffalse:"normal behaviour: don't pass features allong"},type:"boolean",description:`If set, this layer will pass all the features it receives onto the next layer.
This is ideal for decoration, e.g. directions on cameras`},{path:["layers","doNotDownload"],required:!1,hints:{group:"expert",default:"false",question:"Should this layer be downloaded or is the data provided by a different layer (which has 'passAllFeatures'-set)?",iftrue:"Do not attempt to query the data for this layer from overpass/the OSM API",iffalse:"download the data as usual"},type:"boolean",description:"If set, this layer will not query overpass; but it'll still match the tags above which are by chance returned by other layers.\nWorks well together with 'passAllFeatures', to add decoration\nThe opposite of `forceLoad`"},{path:["layers","forceLoad"],required:!1,hints:{group:"expert",default:"false",question:"Should this layer be forcibly loaded?",iffalse:"only download data for this layer when needed (default)"},type:"boolean",description:`Advanced option - might be set by the theme compiler
If true, this data will _always_ be loaded, even if the theme is disabled by a filter or hidden.
The opposite of \`doNotDownload\`
ifftrue: always download this layer, even if it is disabled`},{path:["layers","presets"],required:!1,hints:{group:"presets"},type:"array",description:`Presets for this layer.
A preset shows up when clicking the map on a without data (or when right-clicking/long-pressing);
it will prompt the user to add a new point.
The most important aspect are the tags, which define which tags the new point will have;
The title is shown in the dialog, along with the first sentence of the description.
Upon confirmation, the full description is shown beneath the buttons - perfect to add pictures and examples.
Note: the icon of the preset is determined automatically based on the tags and the icon above. Don't worry about that!
NB: if no presets are defined, the popup to add new points doesn't show up at all`},{path:["layers","presets","title"],required:!0,hints:{question:"What is the word to describe this object?",inline:"Add {translated(value)::font-bold} here"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The title - shown on the 'add-new'-button.\nThis should include the article of the noun, e.g. 'a hydrant', 'a bicycle pump'.\nThis text will be inserted into `Add {category} here`, becoming `Add a hydrant here`.\nDo _not_ indicate 'new': 'add a new shop here' is incorrect, as the shop might have existed forever, it could just be unmapped!"},{path:["layers","presets","tags"],required:!0,hints:{typehint:"simple_tag",typehelper:"uploadableOnly",question:"What tag should be added to the new object?"},type:"array",description:`A single tag (encoded as <code>key=value</code>) out of all the tags to add onto the newly created point.
Note that the icon in the UI will be chosen automatically based on the tags provided here.`},{path:["layers","presets","description"],required:!1,hints:{question:"How would you describe this feature?",ifunset:"No extra description is given. This can be used to further explain the preset"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`An extra explanation of what the feature is, if it is not immediately clear from the title alone.
The _first sentence_ of the description is shown on the button of the \`add\` menu.
The full description is shown in the confirmation dialog.
(The first sentence is until the first '.'-character in the description)`},{path:["layers","presets","exampleImages"],required:!1,hints:{typehint:"image",question:"What is the URL of an image showing such a feature?"},type:"array",description:"The URL of an example image which shows a real-life example of what such a feature might look like."},{path:["layers","presets","snapToLayer"],required:!1,hints:{question:"Should the created point be snapped to a line layer?",suggestions:[{if:"value=address",then:"address - Addresses"},{if:"value=advertising",then:"advertising - We will complete data from advertising features with reference, operator and lit"},{if:"value=ambulancestation",then:"ambulancestation - An ambulance station is an area for storage of ambulance vehicles, medical equipment, personal protective equipment, and other medical supplies."},{if:"value=animal_shelter",then:"animal_shelter - An animal shelter is a facility where animals in trouble are brought and facility's staff (volunteers or not) feeds them and cares of them, rehabilitating and healing them if necessary. This definition includes kennels for abandoned dogs, catteries for abandoned cats, shelters for other abandoned pets and wildlife recovery centres. "},{if:"value=artwork",then:"artwork - An open map of statues, busts, graffitis and other artwork all over the world"},{if:"value=atm",then:"atm - ATMs to withdraw money"},{if:"value=bank",then:"bank - A financial institution to deposit money"},{if:"value=barrier",then:"barrier - Obstacles while cycling, such as bollards and cycle barriers"},{if:"value=bench",then:"bench - A bench is a wooden, metal, stone, … surface where a human can sit. This layers visualises them and asks a few questions about them."},{if:"value=bench_at_pt",then:"bench_at_pt - A layer showing all public-transport-stops which do have a bench"},{if:"value=bicycle_library",then:"bicycle_library - A facility where bicycles can be lent for longer period of times"},{if:"value=bicycle_rental",then:"bicycle_rental - Bicycle rental stations"},{if:"value=bicycle_tube_vending_machine",then:"bicycle_tube_vending_machine - A layer showing vending machines for bicycle tubes (either purpose-built bicycle tube vending machines or classical vending machines with bicycle tubes and optionally additional bicycle related objects such as lights, gloves, locks, …)"},{if:"value=bike_cafe",then:"bike_cafe - A bike café is a café geared towards cyclists, for example with services such as a pump, with lots of bicycle-related decoration, …"},{if:"value=bike_cleaning",then:"bike_cleaning - A layer showing facilities where one can clean their bike"},{if:"value=bike_parking",then:"bike_parking - A layer showing where you can park your bike"},{if:"value=bike_repair_station",then:"bike_repair_station - A layer showing bicycle pumps and bicycle repair tool stands"},{if:"value=bike_shop",then:"bike_shop - A shop specifically selling bicycles or related items"},{if:"value=bike_themed_object",then:"bike_themed_object - A layer with bike-themed objects but who don't match any other layer"},{if:"value=binocular",then:"binocular - Binoculars"},{if:"value=birdhide",then:"birdhide - A birdhide"},{if:"value=cafe_pub",then:"cafe_pub - A layer showing cafés and pubs where one can gather around a drink. The layer asks for some relevant questions"},{if:"value=car_rental",then:"car_rental - Places where you can rent a car"},{if:"value=charging_station",then:"charging_station - A charging station"},{if:"value=climbing",then:"climbing - A dummy layer which contains tagrenderings, shared among the climbing layers"},{if:"value=climbing_area",then:"climbing_area - An area where climbing is possible, e.g. a crag, site, boulder, … Contains aggregation of routes"},{if:"value=climbing_club",then:"climbing_club - A climbing club or organisation"},{if:"value=climbing_gym",then:"climbing_gym - A climbing gym"},{if:"value=climbing_opportunity",then:"climbing_opportunity - Fallback layer with items on which climbing _might_ be possible. It is loaded when zoomed in a lot, to prevent duplicate items to be added"},{if:"value=climbing_route",then:"climbing_route - A single climbing route and its properties. Some properties are derived from the containing features"},{if:"value=clock",then:"clock - Layer with public clocks"},{if:"value=conflation",then:"conflation - If the import-button moves OSM points, the imported way points or conflates, a preview is shown. This layer defines how this preview is rendered. This layer cannot be included in a theme."},{if:"value=crab_address",then:"crab_address - Address data for Flanders by the governement, suited for import into OpenStreetMap. Datadump from 2021-10-26. This layer contains only visualisation logic. Import buttons should be added via an override. Note that HNRLABEL contains the original value, whereas _HNRLABEL contains a slightly cleaned version"},{if:"value=crossings",then:"crossings - Crossings for pedestrians and cyclists"},{if:"value=current_view",then:`current_view - A meta-layer which contains one single feature, namely the bounding box of the current map view. This can be used to trigger special actions. If a popup is defined for this layer, this popup will be accessible via an extra button on screen.

The icon on the button is the default icon of the layer, but can be customized by detecting 'button=yes'.`},{if:"value=cycleways_and_roads",then:"cycleways_and_roads - All infrastructure that someone can cycle over, accompanied with questions about this infrastructure"},{if:"value=defibrillator",then:"defibrillator - A layer showing defibrillators which can be used in case of emergency. This contains public defibrillators, but also defibrillators which might need staff to fetch the actual device"},{if:"value=dentist",then:"dentist - This layer shows dentist offices"},{if:"value=direction",then:"direction - This layer visualizes directions"},{if:"value=doctors",then:"doctors - This layer shows doctor offices"},{if:"value=dogpark",then:"dogpark - A layer showing dogparks, which are areas where dog are allowed to run without a leash"},{if:"value=drinking_water",then:"drinking_water - A layer showing drinking water fountains"},{if:"value=elevator",then:"elevator - This layer show elevators and asks for operational status and elevator dimensions. Useful for wheelchair accessibility information"},{if:"value=elongated_coin",then:"elongated_coin - Layer showing penny presses."},{if:"value=entrance",then:"entrance - A layer showing entrances and offering capabilities to survey some advanced data which is important for e.g. wheelchair users (but also bicycle users, people who want to deliver, …)"},{if:"value=etymology",then:"etymology - All objects which have an etymology known"},{if:"value=extinguisher",then:"extinguisher - Map layer to show fire extinguishers."},{if:"value=filters",then:"filters - This layer acts as library for common filters"},{if:"value=fire_station",then:"fire_station - Map layer to show fire stations."},{if:"value=fitness_centre",then:"fitness_centre - Layer showing fitness centres"},{if:"value=fitness_station",then:"fitness_station - Find a fitness station near you, and add missing ones."},{if:"value=fixme",then:"fixme - OSM objects that likely need to be fixed, based on a FIXME tag."},{if:"value=food",then:"food - A layer showing restaurants and fast-food amenities (with a special rendering for friteries)"},{if:"value=ghost_bike",then:"ghost_bike - A layer showing memorials for cyclists, killed in road accidents"},{if:"value=governments",then:"governments - This layer show governmental buildings. It was setup as commissioned layer for the client of OSOC '22"},{if:"value=gps_location",then:"gps_location - Meta layer showing the current location of the user. Add this to your theme and override the icon to change the appearance of the current location. The object will always have `id=gps` and will have _all_ the properties included in the [`Coordinates`-object](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates) (except latitude and longitude) returned by the browser, such as `speed`, `altitude`, `heading`, ...."},{if:"value=gps_location_history",then:"gps_location_history - Meta layer which contains the previous locations of the user as single points. This is mainly for technical reasons, e.g. to keep match the distance to the modified object"},{if:"value=gps_track",then:"gps_track - Meta layer showing the previous locations of the user as single line with controls, e.g. to erase, upload or download this track. Add this to your theme and override the maprendering to change the appearance of the travelled track."},{if:"value=guidepost",then:"guidepost - Guideposts (also known as fingerposts or finger posts) are often found along official hiking/cycling/riding/skiing routes to indicate the directions to different destinations"},{if:"value=hackerspace",then:"hackerspace - Hackerspace"},{if:"value=home_location",then:"home_location - Meta layer showing the home location of the user. The home location can be set in the [profile settings](https://www.openstreetmap.org/profile/edit) of OpenStreetMap."},{if:"value=hospital",then:"hospital - A layer showing hospital grounds"},{if:"value=hotel",then:"hotel - Layer showing all hotels"},{if:"value=hydrant",then:"hydrant - Map layer to show fire hydrants."},{if:"value=ice_cream",then:"ice_cream - A place where ice cream is sold over the counter"},{if:"value=icons",then:"icons - A layer acting as library for icon-tagrenderings, especially to show as badge next to a POI"},{if:"value=id_presets",then:"id_presets - Layer containing various presets and questions generated by ID. These are meant to be reused in other layers by importing the tagRenderings with `id_preset.<tagrendering>"},{if:"value=import_candidate",then:"import_candidate - Layer used as template in the importHelper"},{if:"value=indoors",then:"indoors - Basic indoor mapping: shows room outlines"},{if:"value=information_board",then:"information_board - A layer showing touristical, road side information boards (e.g. giving information about the landscape, a building, a feature, a map, …)"},{if:"value=kerbs",then:"kerbs - A layer showing kerbs."},{if:"value=kindergarten_childcare",then:"kindergarten_childcare - Shows kindergartens and preschools. Both are grouped in one layer, as they are regularly confused with each other"},{if:"value=last_click",then:"last_click - This layer defines how to render the 'last click'-location. By default, it will show a marker with the possibility to add a new point (if there are some presets) and/or to add a new note (if the 'note' layer attribute is set). If none are possible, this layer won't show up"},{if:"value=map",then:"map - A map, meant for tourists which is permanently installed in the public space"},{if:"value=maproulette",then:"maproulette - Layer showing all tasks in MapRoulette"},{if:"value=maproulette_challenge",then:"maproulette_challenge - Layer showing tasks of a single MapRoulette challenge. This layer is intended to be reused and extended in themes; refer to [the documentation](https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Integrating_Maproulette.md) on how to do this."},{if:"value=maxspeed",then:"maxspeed - Shows the allowed speed for every road"},{if:"value=memorial",then:"memorial - Layer showing memorial plaques, based upon a unofficial theme. Can be expanded to have multiple types of memorials later on"},{if:"value=named_streets",then:"named_streets - Hidden layer with all streets which have a name. Useful to detect addresses"},{if:"value=nature_reserve",then:"nature_reserve - A nature reserve is an area where nature can take its course"},{if:"value=note",then:"note - This layer shows notes on OpenStreetMap. Having this layer in your theme will trigger the 'add new note' functionality in the 'addNewPoint'-popup (or if your theme has no presets, it'll enable adding notes)"},{if:"value=observation_tower",then:"observation_tower - Towers with a panoramic view"},{if:"value=osm_community_index",then:"osm_community_index - A layer showing the OpenStreetMap Communities"},{if:"value=parcel_lockers",then:"parcel_lockers - Layer showing parcel lockers for collecting and sending parcels."},{if:"value=parking",then:"parking - A layer showing car parkings"},{if:"value=parking_spaces",then:"parking_spaces - Layer showing individual parking spaces."},{if:"value=parking_ticket_machine",then:"parking_ticket_machine - Layer with parking ticket machines to pay for parking."},{if:"value=pedestrian_path",then:"pedestrian_path - Pedestrian footpaths, especially used for indoor navigation and snapping entrances to this layer"},{if:"value=pharmacy",then:"pharmacy - A layer showing pharmacies, which (probably) dispense prescription drugs"},{if:"value=physiotherapist",then:"physiotherapist - This layer shows physiotherapists"},{if:"value=picnic_table",then:"picnic_table - The layer showing picnic tables"},{if:"value=play_forest",then:"play_forest - Een speelbos is een vrij toegankelijke zone in een bos"},{if:"value=playground",then:"playground - Playgrounds"},{if:"value=postboxes",then:"postboxes - The layer showing postboxes."},{if:"value=postoffices",then:"postoffices - A layer showing post offices."},{if:"value=public_bookcase",then:"public_bookcase - A streetside cabinet with books, accessible to anyone"},{if:"value=questions",then:"questions - Special library layer which does not need a '.questions'-prefix before being imported"},{if:"value=railway_platforms",then:"railway_platforms - Find every platform in the station, and the train routes that use them."},{if:"value=rainbow_crossings",then:"rainbow_crossings - A layer showing pedestrian crossings with rainbow paintings"},{if:"value=range",then:"range - Meta-layer, simply showing a bbox in red"},{if:"value=reception_desk",then:"reception_desk - A layer showing where the reception desks are and which asks some accessibility information"},{if:"value=recycling",then:"recycling - A layer with recycling containers and centres"},{if:"value=route_marker",then:"route_marker - Route markers are small markers often found along official hiking/cycling/riding/skiing routes to indicate the direction of the route."},{if:"value=school",then:"school - Schools giving primary and secondary education and post-secondary, non-tertiary education. Note that this level of education does not imply an age of the pupiles"},{if:"value=selected_element",then:"selected_element - Highlights the currently selected element. Override this layer to have different colors"},{if:"value=shelter",then:"shelter - Layer showing shelter structures"},{if:"value=shops",then:"shops - A shop"},{if:"value=shower",then:"shower - A layer showing (public) showers"},{if:"value=slow_roads",then:"slow_roads - All carfree roads"},{if:"value=speed_camera",then:"speed_camera - Layer showing speed cameras"},{if:"value=speed_display",then:"speed_display - Layer showing speed displays that alert drivers of their speed."},{if:"value=split_point",then:"split_point - Layer rendering the little scissors for the minimap in the 'splitRoadWizard'"},{if:"value=split_road",then:"split_road - Layer rendering the way to split in the 'splitRoadWizard'. This one is used instead of the variable rendering by the themes themselves, as they might not always be very visible"},{if:"value=sport_pitch",then:"sport_pitch - A sport pitch"},{if:"value=sports_centre",then:"sports_centre - Indoor and outdoor sports centres can be found on this layer"},{if:"value=stairs",then:"stairs - Layer showing stairs and escalators"},{if:"value=street_lamps",then:"street_lamps - A layer showing street lights"},{if:"value=surveillance_camera",then:"surveillance_camera - This layer shows surveillance cameras and allows a contributor to update information and add new cameras"},{if:"value=tertiary_education",then:"tertiary_education - Layer with all tertiary education institutes (ISCED:2011 levels 6,7 and 8)"},{if:"value=ticket_machine",then:"ticket_machine - Find ticket machines for public transport tickets"},{if:"value=ticket_validator",then:"ticket_validator - Find ticket validators to validate public transport tickets"},{if:"value=toilet",then:"toilet - A layer showing (public) toilets"},{if:"value=toilet_at_amenity",then:"toilet_at_amenity - A layer showing (public) toilets located at different places."},{if:"value=trail",then:"trail - Waymarked trails"},{if:"value=transit_routes",then:"transit_routes - Layer showing bus lines"},{if:"value=transit_stops",then:"transit_stops - Layer showing different types of transit stops."},{if:"value=tree_node",then:"tree_node - A layer showing trees"},{if:"value=unit",then:"unit - Library layer with all common units.  Units can _only_ be imported from this file."},{if:"value=usersettings",then:"usersettings - A special layer which is not meant to be shown on a map, but which is used to set user settings"},{if:"value=vending_machine",then:"vending_machine - Layer showing vending machines"},{if:"value=veterinary",then:"veterinary - A layer showing veterinarians"},{if:"value=viewpoint",then:"viewpoint - A nice viewpoint or nice view. Ideal to add an image if no other category fits"},{if:"value=village_green",then:"village_green - A layer showing village-green (which are communal green areas, but not quite parks)"},{if:"value=visitor_information_centre",then:"visitor_information_centre - A visitor center offers information about a specific attraction or place of interest where it is located."},{if:"value=walls_and_buildings",then:"walls_and_buildings - Special builtin layer providing all walls and buildings. This layer is useful in presets for objects which can be placed against walls (e.g. AEDs, postboxes, entrances, addresses, surveillance cameras, …). This layer is invisible by default and not toggleable by the user."},{if:"value=waste_basket",then:"waste_basket - This is a public waste basket, thrash can, where you can throw away your thrash."},{if:"value=waste_disposal",then:"waste_disposal - Waste Disposal Bin, medium to large bin for disposal of (household) waste"},{if:"value=windturbine",then:"windturbine - Modern windmills generating electricity"}]},type:"array",description:"If specified, these layers will be shown in the precise location picker  and the new point will be snapped towards it.\nFor example, this can be used to snap against `walls_and_buildings` (e.g. to attach a defibrillator, an entrance, an artwork, ... to the wall)\nor to snap an obstacle (such as a bollard) to the `cycleways_and_roads`."},{path:["layers","presets","maxSnapDistance"],required:!1,hints:{question:"What is the maximum distance in the location-input that a point can be moved to be snapped to a way?",ifunset:"Do not snap to a layer",inline:"a point is snapped if the location input is at most <b>{value}m</b> away from an object"},type:"number",description:`If specified, a new point will only be snapped if it is within this range.
If further away, it'll be placed in the center of the location input
Distance in meter`},{path:["layers","tagRenderings"],required:!1,hints:{typehint:"tagrendering[]",group:"tagrenderings",question:"Edit this way this attributed is displayed or queried"},type:[{description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`,type:"object",properties:{id:{type:"string"},mappings:{description:`Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes

question: What are common options?`,type:"array",items:{$ref:"#/definitions/MappingConfigJson"}},multiAnswer:{description:`If true, use checkboxes instead of radio buttons when asking the question

question: Should a contributor be allowed to select multiple mappings?

iftrue: allow to select multiple mappings
iffalse: only allow to select a single mapping
ifunset: only allow to select a single mapping`,type:"boolean"},freeform:{description:"Allow freeform text input from the user",type:"object",properties:{key:{description:`question: What is the name of the attribute that should be written to?
This is the OpenStreetMap-key that that value will be written to
ifunset: do not offer a freeform textfield as answer option`,type:"string"},type:{description:`question: What is the input type?
The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values
ifunset: use an unconstrained <b>string</b> as input (default)
suggestions: return validators.AllValidators.filter(type => !type.isMeta).map((type) => ({if: "value="+type.name, then: "<b>"+type.name+"</b> "+type.explanation.split("\\n")[0]}))`,type:"string"},placeholder:{description:`question: What placeholder text should be shown in the input-element if there is no input?
A (translated) text that is shown (as gray text) within the textfield
type: translation
group: expert`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},helperArgs:{description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'
group: expert`,type:"array",items:{}},addExtraTags:{description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'
group: expert`,type:"array",items:{type:"string"}},inline:{description:`question: Show the freeform as box within the question?
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
ifunset: show the freeform input field full-width
iftrue: show the freeform input field as a small field within the question
group: expert`,type:"boolean"},default:{description:`question: What value should be entered in the text field if no value is set?
This can help people to quickly enter the most common option
ifunset: do not prefill the textfield
group: expert`,type:"string"},invalidValues:{description:`question: What values of the freeform key should be interpreted as 'unknown'?
For example, if a feature has \`shop=yes\`, the question 'what type of shop is this?' should still asked
ifunset: The question will be considered answered if any value is set for the key
group: expert`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]}}},question:{description:`question: What question should be shown to the contributor?

A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well.

ifunset: This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},questionHint:{description:`question: Should some extra information be shown to the contributor, alongside the question?
This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like
ifunset: No extra hint is given`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},editButtonAriaLabel:{description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},labels:{description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer",type:"array",items:{type:"string"}},render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},required:["id"],additionalProperties:!1},{type:"object",properties:{id:{type:"string"},builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<QuestionableTagRenderingConfigJson>"}},required:["builtin","override"]},{allOf:[{$ref:"#/definitions/default<(string|QuestionableTagRenderingConfigJson|{builtin:string;override:Partial<QuestionableTagRenderingConfigJson>;})[]>"},{type:"object",properties:{id:{type:"string"}},required:["id"]}]},{type:"string"}],description:`A tag rendering is a block that either shows the known value or asks a question.
Refer to the class \`TagRenderingConfigJson\` to see the possibilities.
Note that we can also use a string here - where the string refers to a tag rendering defined in \`assets/questions/questions.json\`,
where a few very general questions are defined e.g. website, phone number, ...
Furthermore, _all_ the questions of another layer can be reused with \`otherlayer.*\`
If you need only a single of the tagRenderings, use \`otherlayer.tagrenderingId\`
If one or more questions have a 'group' or 'label' set, select all the entries with the corresponding group or label with \`otherlayer.*group\`
Remark: if a tagRendering is 'lent' from another layer, the 'source'-tags are copied and added as condition.
If they are not wanted, remove them with an override
A special value is 'questions', which indicates the location of the questions box. If not specified, it'll be appended to the bottom of the featureInfobox.
At last, one can define a group of renderings where parts of all strings will be replaced by multiple other strings.
This is mainly create questions for a 'left' and a 'right' side of the road.
These will be grouped and questions will be asked together`},{path:["layers","tagRenderings","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","tagRenderings","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","tagRenderings","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","tagRenderings","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","tagRenderings","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","tagRenderings","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","tagRenderings","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","tagRenderings","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","tagRenderings","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","tagRenderings","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","tagRenderings","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","tagRenderings","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","tagRenderings","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","tagRenderings","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","tagRenderings","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","tagRenderings","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","tagRenderings","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","tagRenderings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","tagRenderings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","tagRenderings","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","tagRenderings","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","tagRenderings","override","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","override","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","tagRenderings","override","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","tagRenderings","override","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","tagRenderings","override","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","tagRenderings","override","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","tagRenderings","override","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","override","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","tagRenderings","override","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","override","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","tagRenderings","override","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","tagRenderings","override","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","override","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","override","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","override","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","override","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","tagRenderings","override","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","override","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","override","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","override","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","override","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","tagRenderings","override","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","tagRenderings","override","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","tagRenderings","override","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","tagRenderings","override","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","override","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","tagRenderings","override","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","tagRenderings","override","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","tagRenderings","override","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","tagRenderings","override","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","tagRenderings","override","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","tagRenderings","override","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","override","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","override","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","tagRenderings","override","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","tagRenderings"],required:!1,hints:{},type:"object",description:`Rewrites and multiplies the given renderings of type T.
This can be used for introducing many similar questions automatically,
which also makes translations easier.
(Note that the key does _not_ need to be wrapped in {}.
However, we recommend to use them if the key is used in a translation, as missing keys will be picked up and warned for by the translation scripts)
For example:
\`\`\`
{
    rewrite: {
        sourceString: ["key", "a|b|c"],
        into: [
            ["X", 0]
            ["Y", 1],
            ["Z", 2]
        ],
        renderings: [{
            "key":"a|b|c"
        }]
    }
}
\`\`\`
will result in _three_ copies (as the values to rewrite into have three values, namely:
[
  {
  # The first pair: key --> X, a|b|c --> 0
      "X": 0
  },
  {
      "Y": 1
  },
  {
      "Z": 2
  }
]`},{path:["layers","tagRenderings","renderings","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","renderings","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","tagRenderings","renderings","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","tagRenderings","renderings","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","tagRenderings","renderings","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","tagRenderings","renderings","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","tagRenderings","renderings","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","renderings","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","tagRenderings","renderings","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","tagRenderings","renderings","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","renderings","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","renderings","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","renderings","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","tagRenderings","renderings","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","renderings","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","renderings","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","renderings","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","renderings","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","tagRenderings","renderings","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","tagRenderings","renderings","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","tagRenderings","renderings","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","tagRenderings","renderings","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","renderings","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","tagRenderings","renderings","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","tagRenderings","renderings","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","tagRenderings","renderings","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","tagRenderings","renderings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","tagRenderings","renderings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","tagRenderings","renderings","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","renderings","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","renderings","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","tagRenderings","renderings","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","tagRenderings","renderings","override","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","renderings","override","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","tagRenderings","renderings","override","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","tagRenderings","renderings","override","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","tagRenderings","renderings","override","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","tagRenderings","renderings","override","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","tagRenderings","renderings","override","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","tagRenderings","renderings","override","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","renderings","override","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","renderings","override","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","renderings","override","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","tagRenderings","renderings","override","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","renderings","override","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","renderings","override","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","renderings","override","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","renderings","override","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","tagRenderings","renderings","override","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","tagRenderings","renderings","override","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","tagRenderings","renderings","override","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","tagRenderings","renderings","override","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","renderings","override","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","tagRenderings","renderings","override","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","tagRenderings","renderings","override","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","tagRenderings","renderings","override","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","tagRenderings","renderings","override","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","tagRenderings","renderings","override","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","tagRenderings","renderings","override","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","renderings","override","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","renderings","override","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","tagRenderings","renderings","override","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","tagRenderings","renderings","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","renderings","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","tagRenderings","renderings","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","tagRenderings","renderings","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","tagRenderings","renderings","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","tagRenderings","renderings","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","tagRenderings","renderings","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","renderings","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","tagRenderings","renderings","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","tagRenderings","renderings","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","renderings","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","renderings","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","renderings","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","tagRenderings","renderings","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","renderings","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","renderings","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","renderings","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","renderings","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","tagRenderings","renderings","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","tagRenderings","renderings","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","tagRenderings","renderings","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","tagRenderings","renderings","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","renderings","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","tagRenderings","renderings","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","tagRenderings","renderings","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","tagRenderings","renderings","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","tagRenderings","renderings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","tagRenderings","renderings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","tagRenderings","renderings","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","renderings","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","renderings","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","tagRenderings","renderings","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","tagRenderings","renderings","override","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","renderings","override","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","tagRenderings","renderings","override","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","tagRenderings","renderings","override","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","tagRenderings","renderings","override","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","tagRenderings","renderings","override","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","tagRenderings","renderings","override","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","tagRenderings","renderings","override","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","renderings","override","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","renderings","override","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","renderings","override","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","tagRenderings","renderings","override","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","renderings","override","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","renderings","override","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","renderings","override","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","renderings","override","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","tagRenderings","renderings","override","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","tagRenderings","renderings","override","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","tagRenderings","renderings","override","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","tagRenderings","renderings","override","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","renderings","override","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","tagRenderings","renderings","override","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","tagRenderings","renderings","override","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","tagRenderings","renderings","override","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","tagRenderings","renderings","override","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","tagRenderings","renderings","override","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","tagRenderings","renderings","override","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","renderings","override","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","renderings","override","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","tagRenderings","renderings","override","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","filter"],required:!1,hints:{group:"filters"},type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/default_1"},{type:"string"}]}},{type:"object",properties:{sameAs:{type:"string"}},required:["sameAs"]}],description:"All the extra questions for filtering.\nIf a string is given, mapComplete will search in 'filters.json' for the appropriate filter or will try to parse it as `layername.filterid` and us that one"},{path:["layers","filter","id"],required:!0,hints:{},type:"string",description:"An id/name for this filter, used to set the URL parameters"},{path:["layers","filter","options"],required:!0,hints:{},type:"array",description:`The options for a filter
If there are multiple options these will be a list of radio buttons
If there is only one option this will be a checkbox
Filtering is done based on the given osmTags that are compared to the objects in that layer.
An example which searches by name:
\`\`\`
{
      "id": "shop-name",
      "options": [
        {
          "fields": [
            {
              "name": "search",
              "type": "string"
            }
          ],
          "osmTags": "name~i~.*{search}.*",
          "question": {
            "en": "Only show shops with name {search}",
          }
        }
      ]
    }
    \`\`\``},{path:["layers","filter","options","osmTags"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","filter","options","osmTags","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","filter","options","osmTags","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","filter","options","fields","name"],required:!0,hints:{},type:"string",description:'If name is `search`, use  "_first_comment~.*{search}.*" as osmTags'},{path:["layers","filter","#"],required:!1,hints:{},type:"string",description:'Used for comments or to disable a check\n"ignore-possible-duplicate": disables a check in `DetectDuplicateFilters` which complains that a filter can be replaced by a filter from the `filters`-library-layer'},{path:["layers","deletion"],required:!1,hints:{types:"Use an advanced delete configuration ; boolean",group:"editing",iftrue:"Allow deletion",iffalse:"Do not allow deletion",ifunset:"Do not allow deletion"},type:[{type:"object",properties:{neededChangesets:{description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.

type: nat
question: How many changesets must a contributor have before being allowed to delete a point?`,type:"number"},extraDeleteReasons:{description:`*
By default, three reasons to delete a point are shown:

- The point does not exist anymore
- The point was a testing point
- THe point could not be found

However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:

- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...

These reasons can be stated here and will be shown in the list of options the user can choose from`,type:"array",items:{type:"object",properties:{explanation:{description:`The text that will be shown to the user as option for why this point does not exist anymore.
Note that the most common reasons (test point, does not exist anymore, cannot be found) are already offered by default

question: For what extra reason might this feature be removed in real-life?`},changesetMessage:{description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english

question: What should be added to the changeset as delete reason?`,type:"string"}},required:["changesetMessage","explanation"]}},nonDeleteMappings:{description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).

By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`,type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`The tags that will be given to the object.
This must remove tags so that the 'source/osmTags' won't match anymore

question: What tags should be applied to the object?`},then:{description:`The human explanation for the options

question: What text should be shown to the contributor for this reason?`}},required:["if","then"]}},softDeletionTags:{description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!

Example (note that "amenity=" erases the 'amenity'-key alltogether):

\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`

or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):

\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\`

question: If a hard delete is not possible, what tags should be applied to mark this feature as deleted?
type: tag`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},omitDefaultDeleteReasons:{description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping

question: Should the default delete reasons be hidden?
iftrue: Hide the default delete reasons
iffalse: Show the default delete reasons
ifunset: Show the default delete reasons (default behaviour)`,type:"boolean"}},additionalProperties:!1},{type:"boolean"}],description:`This block defines under what circumstances the delete dialog is shown for objects of this layer.
If set, a dialog is shown to the user to (soft) delete the point.
The dialog is built to be user friendly and to prevent mistakes.
If deletion is not possible, the dialog will hide itself and show the reason of non-deletability instead.
To configure, the following values are possible:
- false: never ever show the delete button
- true: show the default delete button
- undefined: use the mapcomplete default to show deletion or not. Currently, this is the same as 'false' but this will change in the future
- or: a hash with options (see below)
### The delete dialog
#### Hard deletion if enough experience
A feature can only be deleted from OpenStreetMap by mapcomplete if:
- It is a node
- No ways or relations use the node
- The logged-in user has enough experience OR the user is the only one to have edited the point previously
- The logged-in user has no unread messages (or has a ton of experience)
- The user did not select one of the 'non-delete-options' (see below)
In all other cases, a 'soft deletion' is used.
#### Soft deletion
A 'soft deletion' is when the point isn't deleted fromOSM but retagged so that it'll won't how up in the mapcomplete theme anymore.
This makes it look like it was deleted, without doing damage. A fixme will be added to the point.
Note that a soft deletion is _only_ possible if these tags are provided by the theme creator, as they'll be different for every theme
##### No-delete options
In some cases, the contributor might want to delete something for the wrong reason (e.g. someone who wants to have a path removed "because the path is on their private property").
However, the path exists in reality and should thus be on OSM - otherwise the next contributor will pass by and notice "hey, there is a path missing here! Let me redraw it in OSM!)
The correct approach is to retag the feature in such a way that it is semantically correct *and* that it doesn't show up on the theme anymore.
A no-delete option is offered as 'reason to delete it', but secretly retags.`},{path:["layers","deletion","neededChangesets"],required:!1,hints:{typehint:"nat",question:"How many changesets must a contributor have before being allowed to delete a point?"},type:"number",description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.`},{path:["layers","deletion","extraDeleteReasons"],required:!1,hints:{},type:"array",description:`*
By default, three reasons to delete a point are shown:
- The point does not exist anymore
- The point was a testing point
- THe point could not be found
However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:
- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...
These reasons can be stated here and will be shown in the list of options the user can choose from`},{path:["layers","deletion","extraDeleteReasons","explanation"],required:!0,hints:{question:"For what extra reason might this feature be removed in real-life?"},description:`The text that will be shown to the user as option for why this point does not exist anymore.
Note that the most common reasons (test point, does not exist anymore, cannot be found) are already offered by default`},{path:["layers","deletion","extraDeleteReasons","changesetMessage"],required:!0,hints:{question:"What should be added to the changeset as delete reason?"},type:"string",description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english`},{path:["layers","deletion","nonDeleteMappings"],required:!1,hints:{},type:"array",description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).
By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`},{path:["layers","deletion","nonDeleteMappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be applied to the object?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The tags that will be given to the object.
This must remove tags so that the 'source/osmTags' won't match anymore`},{path:["layers","deletion","nonDeleteMappings","then"],required:!0,hints:{question:"What text should be shown to the contributor for this reason?"},description:"The human explanation for the options"},{path:["layers","deletion","softDeletionTags"],required:!1,hints:{typehint:"tag",question:"If a hard delete is not possible, what tags should be applied to mark this feature as deleted?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!
Example (note that "amenity=" erases the 'amenity'-key alltogether):
\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`
or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):
\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\``},{path:["layers","deletion","softDeletionTags","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","deletion","softDeletionTags","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","deletion","omitDefaultDeleteReasons"],required:!1,hints:{question:"Should the default delete reasons be hidden?",iftrue:"Hide the default delete reasons",iffalse:"Show the default delete reasons",ifunset:"Show the default delete reasons (default behaviour)"},type:"boolean",description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping`},{path:["layers","allowMove"],required:!1,hints:{types:"use an advanced move configuration ; boolean",group:"editing",question:"Is deleting a point allowed?",iftrue:"Allow contributors to move a point (for accuracy or a relocation)",iffalse:"Don't allow contributors to move points",ifunset:"Don't allow contributors to move points (default)"},type:[{type:"object",properties:{enableImproveAccuracy:{description:`question: Should moving this type of point to improve the accuracy be allowed?
iftrue: This point can be moved to improve the accuracy
ifunset: (default) This point can be moved to improve the accuracy
iffalse: This point cannot be moved to improve the accuracy`,type:"boolean"},enableRelocation:{description:"question: Should moving this type of point due to a relocation be allowed?\n\nThis will erase the attributes `addr:street`, `addr:housenumber`, `addr:city` and `addr:postcode`\n\niftrue: This type of point can be moved due to a relocation (and will remove address information when this is done)\nifunset: (default) This type of point can be moved due to a relocation (and will remove address information when this is done)\niffalse: This type of point cannot be moved due to a relocation",type:"boolean"}},additionalProperties:!1},{type:"boolean"}],description:`Indicates if a point can be moved and why.
A feature can be moved by MapComplete if:
- It is a point
- The point is _not_ part of a way or a a relation.`},{path:["layers","allowMove","enableImproveAccuracy"],required:!1,hints:{question:"Should moving this type of point to improve the accuracy be allowed?",iftrue:"This point can be moved to improve the accuracy",iffalse:"This point cannot be moved to improve the accuracy",ifunset:"(default) This point can be moved to improve the accuracy"},type:"boolean",description:""},{path:["layers","allowMove","enableRelocation"],required:!1,hints:{question:"Should moving this type of point due to a relocation be allowed?",iftrue:"This type of point can be moved due to a relocation (and will remove address information when this is done)",iffalse:"This type of point cannot be moved due to a relocation",ifunset:"(default) This type of point can be moved due to a relocation (and will remove address information when this is done)"},type:"boolean",description:"This will erase the attributes `addr:street`, `addr:housenumber`, `addr:city` and `addr:postcode`"},{path:["layers","allowSplit"],required:!1,hints:{group:"editing",question:"Should the contributor be able to split ways using this layer?",iftrue:"enable the 'split-roads'-component",iffalse:"don't enable the split-roads componenet",ifunset:"don't enable the split-roads component"},type:"boolean",description:`If set, a 'split this way' button is shown on objects rendered as LineStrings, e.g. highways.
If the way is part of a relation, MapComplete will attempt to update this relation as well`},{path:["layers","units","quantity"],required:!1,hints:{},type:"string",description:"What is quantified? E.g. 'speed', 'length' (including width, diameter, ...), 'electric tension', 'electric current', 'duration'"},{path:["layers","units","appliesToKey"],required:!1,hints:{},type:"array",description:"Every key from this list will be normalized.\nTo render the value properly (with a human readable denomination), use `{canonical(<key>)}`"},{path:["layers","units","eraseInvalidValues"],required:!1,hints:{},type:"boolean",description:`If set, invalid values will be erased in the MC application (but not in OSM of course!)
Be careful with setting this`},{path:["layers","units","applicableUnits"],required:!0,hints:{},type:"array",description:`The possible denominations for this unit.
For length, denominations could be "meter", "kilometer", "miles", "foot"`},{path:["layers","units","applicableUnits","useIfNoUnitGiven"],required:!1,hints:{},type:[{type:"array",items:{type:"string"}},{type:"boolean"}],description:`If this evaluates to true and the value to interpret has _no_ unit given, assumes that this unit is meant.
Alternatively, a list of country codes can be given where this acts as the default interpretation
E.g., a denomination using "meter" would probably set this flag to "true";
a denomination for "mp/h" will use the condition "_country=gb" to indicate that it is the default in the UK.
If none of the units indicate that they are the default, the first denomination will be used instead`},{path:["layers","units","applicableUnits","canonicalDenomination"],required:!0,hints:{},type:"string",description:`The canonical value for this denomination which will be added to the value in OSM.
e.g. "m" for meters
If the user inputs '42', the canonical value will be added and it'll become '42m'.
Important: often, _no_ canonical values are expected, e.g. in the case of 'maxspeed' where 'km/h' is the default.
In this case, an empty string should be used`},{path:["layers","units","applicableUnits","canonicalDenominationSingular"],required:!1,hints:{},type:"string",description:"The canonical denomination in the case that the unit is precisely '1'.\nUsed for display purposes only.\nE.g.: for duration of something in minutes: `2 minutes` but `1 minute`; the `minute` goes here"},{path:["layers","units","applicableUnits","alternativeDenomination"],required:!1,hints:{},type:"array",description:"A list of alternative values which can occur in the OSM database - used for parsing.\nE.g.: while 'm' is canonical, `meter`, `mtrs`, ... can occur as well"},{path:["layers","units","applicableUnits","human"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "meter",
    "fr": "metre"
}`},{path:["layers","units","applicableUnits","humanSingular"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "minute",
    "nl": "minuut"
}`},{path:["layers","units","applicableUnits","prefix"],required:!1,hints:{},type:"boolean",description:`If set, then the canonical value will be prefixed instead, e.g. for '€'
Note that if all values use 'prefix', the dropdown might move to before the text field`},{path:["layers","units","applicableUnits","addSpace"],required:!1,hints:{},type:"boolean",description:"If set, add a space between the quantity and the denomination.\nE.g.: `50 mph` instad of `50mph`"},{path:["layers","units","defaultInput"],required:!1,hints:{},type:"string",description:`In some cases, the default denomination is not the most user friendly to input.
E.g., when measuring kerb heights, it is illogical to ask contributors to input an amount in meters.
When a default input method should be used, this can be specified by setting the canonical denomination here, e.g.
\`defaultInput: "cm"\`. This must be a denomination which appears in the applicableUnits`},{path:["layers","syncSelection"],required:!1,hints:{group:"advanced",question:"Should enabling/disabling the layer be saved (locally or in the cloud)?",suggestions:[{if:"value=no",then:"Don't save, always revert to the default"},{if:"value=local",then:"Save selection in local storage"},{if:"value=theme-only",then:"Save the state in the OSM-usersettings, but apply on this theme only (default)"},{if:"value=global",then:"Save in OSM-usersettings and toggle on _all_ themes using this layer"}]},type:"string",description:"If set, synchronizes whether or not this layer is enabled."},{path:["layers","#"],required:!1,hints:{group:"hidden"},type:"string",description:`Used for comments and/or to disable some checks
no-question-hint-check: disables a check in MiscTagRenderingChecks which complains about 'div', 'span' or 'class=subtle'-HTML elements in the tagRendering`},{path:["layers","fullNodeDatabase"],required:!1,hints:{group:"hidden"},type:"boolean",description:"_Set automatically by MapComplete, please ignore_"},{path:["layers","override","id"],required:!1,hints:{typehint:"id",group:"Basic",question:"What is the identifier of this layer?"},type:"string",description:`This should be a simple, lowercase, human readable string that is used to identify the layer.
 A good ID is:
 - a noun
 - written in singular
 - describes the object
 - in english
 - only has lowercase letters, numbers or underscores. Do not use a space or a dash`},{path:["layers","override","name"],required:!1,hints:{group:"Basic",question:"What is the name of this layer?",ifunset:"This will hide the layer in the layer control, making it not filterable and not toggleable"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Used in the layer control panel to toggle a layer on and of."},{path:["layers","override","description"],required:!1,hints:{group:"Basic",question:"How would you describe the features that are shown on this layer?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A description for the features shown in this layer.
This often resembles the introduction of the wiki.osm.org-page for this feature.`},{path:["layers","override","source"],required:!1,hints:{types:"Load data with specific tags from OpenStreetMap ; Load data from an external geojson source ;",typesdefault:"0",group:"Basic",question:"Where should the data be fetched from?",title:"Data Source"},type:[{type:"object",properties:{osmTags:{$ref:"#/definitions/TagConfigJson",description:`question: Which tags must be present on the feature to show it in this layer?
Every source must set which tags have to be present in order to load the given layer.`},maxCacheAge:{description:`question: How long (in seconds) is the data allowed to remain cached until it must be refreshed?
The maximum amount of seconds that a tile is allowed to linger in the cache

type: nat
default: 30 days
group: expert`,type:"number"}},required:["osmTags"]},{type:"object",properties:{geoJson:{description:`The actual source of the data to load, if loaded via geojson.

# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source

# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer

Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}

question: What is the URL of the geojson?
type: url`,type:"string"},geoJsonZoomLevel:{description:`To load a tiled geojson layer, set the zoomlevel of the tiles

question: If using a tiled geojson, what is the zoomlevel of the tiles?
ifunset: This is not a tiled geojson`,type:"number"},isOsmCache:{description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache.
This also indicates that making changes on this data is possible

question: Is this geojson a cache of OpenStreetMap data?
ifunset: This is not an OpenStreetMap cache
iftrue: this is based on OpenStreetMap and can thus be edited
group: expert`,type:"boolean"},mercatorCrs:{description:`Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag \`mercatorCrs: true\`  in the source for this

question: Does this geojson use  EPSG:900913 instead of WGS84 as projection?
iftrue: This geojson uses EPSG:900913 instead of WGS84
ifunset: This geojson uses WGS84 just like most geojson (default)`,type:"boolean"},idKey:{description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'

ifunset: An id with key \`id\` will be assigned automatically if no attribute \`id\` is set
inline: This geojson uses <b>{value}</b> as attribute to set the id
question: What is the name of the attribute containing the ID of the object?`,type:"string"}},required:["geoJson"]},{enum:["special","special:library"],type:"string"}],description:`This determines where the data for the layer is fetched: from OSM or from an external geojson dataset.
If no 'geojson' is defined, data will be fetched from overpass and the OSM-API.
Every source _must_ define which tags _must_ be present in order to be picked up.
Note: a source must always be defined. 'special' is only allowed if this is a builtin-layer`},{path:["layers","override","source","osmTags"],required:!0,hints:{typehint:"tag",question:"Which tags must be present on the feature to show it in this layer?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"Every source must set which tags have to be present in order to load the given layer."},{path:["layers","override","source","maxCacheAge"],required:!1,hints:{typehint:"nat",group:"expert",default:"30 days",question:"How long (in seconds) is the data allowed to remain cached until it must be refreshed?"},type:"number",description:"The maximum amount of seconds that a tile is allowed to linger in the cache"},{path:["layers","override","source","geoJson"],required:!0,hints:{typehint:"url",question:"What is the URL of the geojson?"},type:"string",description:`The actual source of the data to load, if loaded via geojson.
# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source
# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer
Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}`},{path:["layers","override","source","geoJsonZoomLevel"],required:!1,hints:{question:"If using a tiled geojson, what is the zoomlevel of the tiles?",ifunset:"This is not a tiled geojson"},type:"number",description:"To load a tiled geojson layer, set the zoomlevel of the tiles"},{path:["layers","override","source","isOsmCache"],required:!1,hints:{group:"expert",question:"Is this geojson a cache of OpenStreetMap data?",iftrue:"this is based on OpenStreetMap and can thus be edited",ifunset:"This is not an OpenStreetMap cache"},type:"boolean",description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache.
This also indicates that making changes on this data is possible`},{path:["layers","override","source","mercatorCrs"],required:!1,hints:{question:"Does this geojson use  EPSG:900913 instead of WGS84 as projection?",iftrue:"This geojson uses EPSG:900913 instead of WGS84",ifunset:"This geojson uses WGS84 just like most geojson (default)"},type:"boolean",description:"Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag `mercatorCrs: true`  in the source for this"},{path:["layers","override","source","idKey"],required:!1,hints:{question:"What is the name of the attribute containing the ID of the object?",ifunset:"An id with key `id` will be assigned automatically if no attribute `id` is set",inline:"This geojson uses <b>{value}</b> as attribute to set the id"},type:"string",description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'`},{path:["layers","override","calculatedTags"],required:!1,hints:{group:"expert",question:"What extra attributes should be calculated with javascript?"},type:"array",description:`A list of extra tags to calculate, specified as "keyToAssignTo=javascript-expression".
There are a few extra functions available. Refer to <a>Docs/CalculatedTags.md</a> for more information
The functions will be run in order, e.g.
[
 "_max_overlap_m2=Math.max(...feat.overlapsWith("someOtherLayer").map(o => o.overlap))
 "_max_overlap_ratio=Number(feat._max_overlap_m2)/feat.area
]
The specified tags are evaluated lazily. E.g. if a calculated tag is only used in the popup (e.g. the number of nearby features),
the expensive calculation will only be performed then for that feature. This avoids clogging up the contributors PC when all features are loaded.
If a tag has to be evaluated strictly, use ':=' instead:
[
"_some_key:=some_javascript_expression"
]
See the full documentation on [https://github.com/pietervdvn/MapComplete/blob/master/Docs/CalculatedTags.md]`},{path:["layers","override","isShown"],required:!1,hints:{group:"advanced",question:"What other tags should features match for being shown?",ifunset:"all features which match the 'source'-specification are shown."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, only features matching this extra tag will be shown.
This is useful to hide certain features from view based on a calculated tag or if the features are provided by a different layer.`},{path:["layers","override","isShown","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","isShown","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","minzoom"],required:!1,hints:{typehint:"nat",group:"Basic",default:"0",question:"At what zoom level should features of the layer be shown?",ifunset:"Always load this layer, even if the entire world is in view."},type:"number",description:`The minimum needed zoomlevel required to start loading and displaying the data.
This can be used to only show common features (e.g. a bicycle parking) only when the map is zoomed in very much (17).
This prevents cluttering the map with thousands of parkings if one is looking to an entire city.`},{path:["layers","override","shownByDefault"],required:!1,hints:{group:"advanced",default:"true",question:"Should this layer be enabled when opening the map for the first time?",iftrue:"the layer is enabled when opening the map",iffalse:"the layer is hidden until the contributor enables it. (If the filter-popup is disabled, this might never get enabled nor loaded)"},type:"boolean",description:`Indicates if this layer is shown by default;
can be used to hide a layer from start, or to load the layer but only to show it when appropriate (e.g. for advanced users)`},{path:["layers","override","minzoomVisible"],required:!1,hints:{group:"expert",default:"100 (thus: always visible"},type:"number",description:"The zoom level at which point the data is hidden again"},{path:["layers","override","title"],required:!1,hints:{typehint:"translation",types:"use a fixed translation ; Use a dynamic tagRendering ; hidden",typesdefault:"1",group:"title",question:"Edit the popup title",inline:"{translated{value}}"},type:[{$ref:"#/definitions/Record<string,string>"},{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"The title shown in a popup for elements of this layer."},{path:["layers","override","title","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","title","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","title","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","title","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","title","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","title","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","title","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","title","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","title","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","title","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","title","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","title","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","title","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","title","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","title","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","title","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","popupInFloatover"],required:!1,hints:{group:"advanced",default:"sidebar",question:"Should the information for this layer be shown in the sidebar or in a splash screen?",iftrue:"show the infobox in the splashscreen floating over the entire UI",iffalse:"show the infobox in a sidebar on the right"},type:"boolean",description:"If set, open the selectedElementView in a floatOver instead of on the right."},{path:["layers","override","titleIcons"],required:!1,hints:{typehint:"icon[]",group:"infobox"},type:[{type:"array",items:{anyOf:[{allOf:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"object",properties:{id:{type:"string"}}}]},{type:"string"}]}},{type:"array",items:[{type:"string",enum:["defaults"]}],minItems:1,maxItems:1}],description:`Small icons shown next to the title.
If not specified, the OsmLink and wikipedia links will be used by default.
Use an empty array to hide them.
Note that "defaults" will insert all the default titleIcons (which are added automatically)
Use \`auto:<tagrenderingId>\` to automatically create an icon based on a tagRendering which has icons`},{path:["layers","override","titleIcons"],required:!1,hints:{},type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","titleIcons","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","titleIcons","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","titleIcons","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","titleIcons","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","titleIcons","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","titleIcons","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","titleIcons","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","titleIcons","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","titleIcons","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","titleIcons","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","titleIcons","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","titleIcons","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","titleIcons","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","titleIcons","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","titleIcons","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","titleIcons","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering"],required:!1,hints:{group:"pointrendering"},type:"array",description:`Creates points to render on the map.
This can render points for point-objects, lineobjects or areaobjects; use 'location' to indicate where it should be rendered`},{path:["layers","override","pointRendering"],required:!1,hints:{},type:"object",description:`The PointRenderingConfig gives all details onto how to render a single point of a feature.
This can be used if:
- The feature is a point
- To render something at the centroid of an area, or at the start, end or projected centroid of a way`},{path:["layers","override","pointRendering","location"],required:!0,hints:{question:"At what location should this icon be shown?",suggestions:[{if:"value=point",then:"Show an icon for point (node) objects"},{if:"value=centroid",then:"Show an icon for line or polygon (way) objects at their centroid location"},{if:"value=start",then:"Show an icon for line (way) objects at the start"},{if:"value=end",then:"Show an icon for line (way) object at the end"},{if:"value=projected_centerpoint",then:"Show an icon for line (way) object near the centroid location, but moved onto the line"}],multianswer:"true"},type:"array",description:""},{path:["layers","override","pointRendering","marker"],required:!1,hints:{},type:"array",description:"The marker for an element.\nNote that this also defines the icon for this layer (rendered with the overpass-tags) <i>and</i> the icon in the presets.\nThe result of the icon is rendered as follows:\n- The first icon is rendered on the map\n- The second entry is overlayed on top of it\n- ...\nAs a result, on could use a generic icon (`pin`, `circle`, `square`) with a color, then overlay it with a specific icon."},{path:["layers","override","pointRendering","marker","icon"],required:!0,hints:{typehint:"icon",question:"What icon should be used?",suggestions:[{if:"value=pin",then:"pin",icon:"pin"},{if:"value=square",then:"square",icon:"square"},{if:"value=circle",then:"circle",icon:"circle"},{if:"value=checkmark",then:"checkmark",icon:"checkmark"},{if:"value=clock",then:"clock",icon:"clock"},{if:"value=close",then:"close",icon:"close"},{if:"value=crosshair",then:"crosshair",icon:"crosshair"},{if:"value=help",then:"help",icon:"help"},{if:"value=home",then:"home",icon:"home"},{if:"value=invalid",then:"invalid",icon:"invalid"},{if:"value=location",then:"location",icon:"location"},{if:"value=location_empty",then:"location_empty",icon:"location_empty"},{if:"value=location_locked",then:"location_locked",icon:"location_locked"},{if:"value=note",then:"note",icon:"note"},{if:"value=resolved",then:"resolved",icon:"resolved"},{if:"value=ring",then:"ring",icon:"ring"},{if:"value=scissors",then:"scissors",icon:"scissors"},{if:"value=teardrop",then:"teardrop",icon:"teardrop"},{if:"value=teardrop_with_hole_green",then:"teardrop_with_hole_green",icon:"teardrop_with_hole_green"},{if:"value=triangle",then:"triangle",icon:"triangle"},{if:"value=brick_wall_square",then:"brick_wall_square",icon:"brick_wall_square"},{if:"value=brick_wall_round",then:"brick_wall_round",icon:"brick_wall_round"},{if:"value=gps_arrow",then:"gps_arrow",icon:"gps_arrow"},{if:"value=checkmark",then:"checkmark",icon:"checkmark"},{if:"value=help",then:"help",icon:"help"},{if:"value=close",then:"close",icon:"close"},{if:"value=invalid",then:"invalid",icon:"invalid"},{if:"value=heart",then:"heart",icon:"heart"},{if:"value=heart_outline",then:"heart_outline",icon:"heart_outline"},{if:"value=confirm",then:"confirm",icon:"confirm"},{if:"value=direction",then:"direction",icon:"direction"},{if:"value=not_found",then:"not_found",icon:"not_found"},{if:"value=mastodon",then:"mastodon",icon:"mastodon"},{if:"value=party",then:"party",icon:"party"},{if:"value=addSmall",then:"addSmall",icon:"addSmall"}]},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"object",properties:{builtin:{type:"string"},override:{}},required:["builtin","override"]},{type:"string"}],description:""},{path:["layers","override","pointRendering","marker","icon","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","pointRendering","marker","icon","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","marker","icon","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","marker","icon","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","marker","color"],required:!1,hints:{typehint:"color",question:"What colour should the icon be?"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"object",properties:{builtin:{type:"string"},override:{}},required:["builtin","override"]},{type:"string"}],description:"This will only work for the default icons such as `pin`,`circle`,..."},{path:["layers","override","pointRendering","marker","color","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","pointRendering","marker","color","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","marker","color","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","marker","color","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","iconBadges"],required:!1,hints:{group:"hidden"},type:"array",description:"A list of extra badges to show next to the icon as small badge\nThey will be added as a 25% height icon at the bottom right of the icon, with all the badges in a flex layout.\nNote: strings are interpreted as icons, so layering and substituting is supported. You can use `circle:white;./my_icon.svg` to add a background circle"},{path:["layers","override","pointRendering","iconBadges","if"],required:!0,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","iconBadges","then"],required:!0,hints:{typehint:"icon"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:"Badge to show"},{path:["layers","override","pointRendering","iconBadges","then","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","pointRendering","iconBadges","then","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","iconBadges","then","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","iconBadges","then","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","iconSize"],required:!1,hints:{question:"What size should the marker be on the map?",ifunset:"Use the default size (<b>40,40</b> px)"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:'A string containing "<width>,<height>" in pixels'},{path:["layers","override","pointRendering","iconSize","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","iconSize","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","iconSize","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","iconSize","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","iconSize","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","iconSize","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","iconSize","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","iconSize","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","iconSize","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","iconSize","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","iconSize","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","iconSize","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","iconSize","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","iconSize","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","iconSize","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","iconSize","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","iconSize","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","iconSize","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","iconSize","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","iconSize","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","anchor"],required:!1,hints:{question:"What is the anchorpoint of the icon?",ifunset:"Use MapComplete-default (<b>center</b>)",suggestions:[{if:"value=center",then:"Place the <b>center</b> of the icon on the geographical location"},{if:"value=top",then:"Place the <b>top</b> of the icon on the geographical location"},{if:"value=bottom",then:"Place the <b>bottom</b> of the icon on the geographical location"},{if:"value=left",then:"Place the <b>left</b> of the icon on the geographical location"},{if:"value=right",then:"Place the <b>right</b> of the icon on the geographical location"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This matches the geographical point with a location on the icon."},{path:["layers","override","pointRendering","anchor","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","anchor","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","anchor","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","anchor","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","anchor","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","anchor","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","anchor","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","anchor","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","anchor","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","anchor","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","anchor","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","anchor","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","anchor","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","anchor","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","anchor","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","anchor","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","anchor","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","anchor","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","anchor","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","anchor","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","rotation"],required:!1,hints:{question:"What rotation should be applied on the icon?",ifunset:"Do not rotate"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This is mostly useful for items that face a specific direction, such as surveillance cameras\nThis is interpreted as css property for 'rotate', thus has to end with 'deg', e.g. `90deg`, `{direction}deg`, `calc(90deg - {camera:direction}deg)``"},{path:["layers","override","pointRendering","rotation","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","rotation","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","rotation","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","rotation","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","rotation","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","rotation","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotation","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotation","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","rotation","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotation","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotation","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","rotation","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","rotation","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","rotation","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","rotation","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","rotation","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","rotation","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","rotation","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","rotation","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","rotation","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","label"],required:!1,hints:{types:"Dynamic value based on the attributes ; string",question:"What label should be shown beneath the marker?",ifunset:"Do not show a label beneath the marker",inline:"Always show label <b>{value}</b> beneath the marker"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:'For example: `&LT;div style="background: white">{name}&LT;/div>`\nIf the icon is undefined, then the label is shown in the center of the feature.'},{path:["layers","override","pointRendering","label","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","label","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","label","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","label","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","label","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","label","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","label","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","label","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","label","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","label","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","label","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","label","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","label","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","label","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","label","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","label","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","label","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","label","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","label","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","label","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","labelCss"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"What CSS should be applied to the label?",ifunset:"Do not apply extra CSS-labels to the label",inline:"Apply CSS-style <b>{value}</b> to the label"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"You can set the css-properties here, e.g. `background: red; font-size: 12px; `"},{path:["layers","override","pointRendering","labelCss","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","labelCss","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","labelCss","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","labelCss","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","labelCss","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","labelCss","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCss","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCss","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","labelCss","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCss","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCss","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","labelCss","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","labelCss","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","labelCss","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","labelCss","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","labelCss","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","labelCss","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","labelCss","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","labelCss","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","labelCss","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","labelCssClasses"],required:!1,hints:{types:"Dynamic value ; string",question:"Which CSS-classes should be applied to the label?",ifunset:"Do not apply extra CSS-classes to the label",inline:"Apply CSS-classes <b>{value}</b> to the label",suggestions:[{if:"value=bg-white rounded px-2",then:"Draw on a white background"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"The classes should be separated by a space (` `)\nYou can use most Tailwind-css classes, see https://tailwindcss.com/ for more information\nFor example: `center bg-gray-500 mx-2 my-1 rounded-full`"},{path:["layers","override","pointRendering","labelCssClasses","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","labelCssClasses","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","labelCssClasses","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","labelCssClasses","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","labelCssClasses","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","labelCssClasses","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCssClasses","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCssClasses","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","labelCssClasses","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCssClasses","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCssClasses","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","labelCssClasses","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","labelCssClasses","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","labelCssClasses","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","labelCssClasses","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","labelCssClasses","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","labelCssClasses","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","labelCssClasses","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","labelCssClasses","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","labelCssClasses","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","css"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"What CSS should be applied to the entire marker?",ifunset:"Do not apply extra CSS element to the entire marker",inline:"Apply CSS-style <b>{value}</b> to the _entire marker_"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"You can set the css-properties here, e.g. `background: red; font-size: 12px; `\nThis will be applied to the _container_ containing both the marker and the label"},{path:["layers","override","pointRendering","css","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","css","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","css","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","css","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","css","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","css","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","css","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","css","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","css","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","css","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","css","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","css","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","css","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","css","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","css","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","css","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","css","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","css","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","css","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","css","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","cssClasses"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"Which CSS-classes should be applied to the entire marker?",ifunset:"Do not apply extra CSS-classes to the label",inline:"Apply CSS-classes <b>{value}</b> to the entire container"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This will be applied to the _container_ containing both the marker and the label\nThe classes should be separated by a space (` `)\nYou can use most Tailwind-css classes, see https://tailwindcss.com/ for more information\nFor example: `center bg-gray-500 mx-2 my-1 rounded-full`"},{path:["layers","override","pointRendering","cssClasses","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","cssClasses","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","cssClasses","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","cssClasses","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","cssClasses","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","cssClasses","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","cssClasses","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","cssClasses","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","cssClasses","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","cssClasses","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","cssClasses","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","cssClasses","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","cssClasses","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","cssClasses","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","cssClasses","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","cssClasses","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","cssClasses","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","cssClasses","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","cssClasses","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","cssClasses","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","pitchAlignment"],required:!1,hints:{group:"expert",question:"If the map is pitched, should the icon stay parallel to the screen or to the groundplane?",suggestions:[{if:"value=canvas",then:"The icon will stay upward and not be transformed as if it sticks to the screen"},{if:"value=map",then:"The icon will be transformed as if it were painted onto the ground. (Automatically sets rotationAlignment)"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{enum:["canvas","map"],type:"string"}],description:""},{path:["layers","override","pointRendering","pitchAlignment","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","pitchAlignment","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","pitchAlignment","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","pitchAlignment","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","pitchAlignment","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","pitchAlignment","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","pitchAlignment","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","pitchAlignment","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","pitchAlignment","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","pitchAlignment","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","pitchAlignment","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","pitchAlignment","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","pitchAlignment","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","pitchAlignment","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","pitchAlignment","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","pitchAlignment","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","pitchAlignment","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","pitchAlignment","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","pitchAlignment","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","pitchAlignment","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","rotationAlignment"],required:!1,hints:{group:"expert",question:"Should the icon be rotated if the map is rotated?",ifunset:"Do not rotate or tilt icons. Always keep the icons straight",suggestions:[{if:"value=canvas",then:"Never rotate the icon"},{if:"value=map",then:"If the map is rotated, rotate the icon as well. This gives the impression of an icon that floats perpendicular above the ground."}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{enum:["canvas","map"],type:"string"}],description:""},{path:["layers","override","pointRendering","rotationAlignment","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","rotationAlignment","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","rotationAlignment","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","rotationAlignment","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","rotationAlignment","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","rotationAlignment","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotationAlignment","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotationAlignment","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","rotationAlignment","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotationAlignment","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotationAlignment","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","rotationAlignment","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","rotationAlignment","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","rotationAlignment","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","rotationAlignment","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","rotationAlignment","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","rotationAlignment","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","rotationAlignment","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","rotationAlignment","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","rotationAlignment","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","lineRendering"],required:!1,hints:{group:"linerendering"},type:"array",description:"Creates lines and areas to render on the map"},{path:["layers","override","lineRendering"],required:!1,hints:{},type:"object",description:`The LineRenderingConfig gives all details onto how to render a single line of a feature.
This can be used if:
- The feature is a line
- The feature is an area`},{path:["layers","override","lineRendering","color"],required:!1,hints:{typehint:"color",types:"dynamic value ; string",question:"What color should lines be drawn in?",inline:"The line colour always is <b>{value}</b>",title:"Line Colour"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:`For an area, this will be the colour of the outside line.
If the value starts with "--", the style of the body element will be queried for the corresponding variable instead`},{path:["layers","override","lineRendering","color","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","lineRendering","color","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","lineRendering","color","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","lineRendering","color","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","lineRendering","width"],required:!1,hints:{typehint:"pnat",types:"dynamic value ; string",question:"How wide should the line be?",ifunset:"Use the default-linewidth of 7 pixels",inline:"The line width is <b>{value} pixels</b>",title:"Line width"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:["string","number"]}],description:"The stroke-width for way-elements"},{path:["layers","override","lineRendering","width","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","lineRendering","width","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","lineRendering","width","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","lineRendering","width","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","lineRendering","dashArray"],required:!1,hints:{question:"Should a dasharray be used to render the lines?",ifunset:"Ways are rendered with a full line"},type:"string",description:"The dasharray defines 'pixels of line, pixels of gap, pixels of line, pixels of gap, ...'. For example, `5 6` will be 5 pixels of line followed by a 6 pixel gap.\nCannot be a dynamic property due to a mapbox limitation"},{path:["layers","override","lineRendering","lineCap"],required:!1,hints:{types:"dynamic value ; string",question:"What form should the line-ending have?",ifunset:"Use the default value (round ending)",suggestions:[{if:"value=round",then:"Round endings"},{if:"value=square",then:"square endings"},{if:"value=butt",then:"no ending (square ending at the end, without padding)"}],title:"Line Cap"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:""},{path:["layers","override","lineRendering","lineCap","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","lineRendering","lineCap","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","lineRendering","lineCap","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","lineRendering","lineCap","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","lineRendering","fillColor"],required:!1,hints:{typehint:"color",types:"dynamic value ; string",question:"What colour should be used as fill colour for polygons?",ifunset:"The polygon fill colour will be a more transparent version of the stroke colour",inline:"The fill colour is <b>{value}</b>",suggestions:[{if:"value=#00000000",then:"Use a transparent fill (only render the outline)"}]},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:""},{path:["layers","override","lineRendering","fillColor","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","lineRendering","fillColor","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","lineRendering","fillColor","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","lineRendering","fillColor","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","lineRendering","offset"],required:!1,hints:{typehint:"int",types:"dynamic value ; number",question:"Should the lines be moved (offsetted) with a number of pixels against the geographical lines?",ifunset:"don't offset lines on the map",inline:"Pixel offset by <b>{value}</b> pixels"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"number"}],description:`The number of pixels this line should be moved.
Use a positive number to move to the right in the drawing direction or a negative to move to the left (left/right as defined by the drawing direction of the line).
IMPORTANT: MapComplete will already normalize 'key:both:property' and 'key:both' into the corresponding 'key:left' and 'key:right' tagging (same for 'sidewalk=left/right/both' which is rewritten to 'sidewalk:left' and 'sidewalk:right')
This simplifies programming. Refer to the CalculatedTags.md-documentation for more details`},{path:["layers","override","lineRendering","offset","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","lineRendering","offset","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","lineRendering","offset","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","lineRendering","offset","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","passAllFeatures"],required:!1,hints:{group:"expert",question:"should this layer pass features to the next layers?",iftrue:"Make the features from this layer also available to the other layer; might result in this object being rendered by multiple layers",iffalse:"normal behaviour: don't pass features allong"},type:"boolean",description:`If set, this layer will pass all the features it receives onto the next layer.
This is ideal for decoration, e.g. directions on cameras`},{path:["layers","override","doNotDownload"],required:!1,hints:{group:"expert",default:"false",question:"Should this layer be downloaded or is the data provided by a different layer (which has 'passAllFeatures'-set)?",iftrue:"Do not attempt to query the data for this layer from overpass/the OSM API",iffalse:"download the data as usual"},type:"boolean",description:"If set, this layer will not query overpass; but it'll still match the tags above which are by chance returned by other layers.\nWorks well together with 'passAllFeatures', to add decoration\nThe opposite of `forceLoad`"},{path:["layers","override","forceLoad"],required:!1,hints:{group:"expert",default:"false",question:"Should this layer be forcibly loaded?",iffalse:"only download data for this layer when needed (default)"},type:"boolean",description:`Advanced option - might be set by the theme compiler
If true, this data will _always_ be loaded, even if the theme is disabled by a filter or hidden.
The opposite of \`doNotDownload\`
ifftrue: always download this layer, even if it is disabled`},{path:["layers","override","presets"],required:!1,hints:{group:"presets"},type:"array",description:`Presets for this layer.
A preset shows up when clicking the map on a without data (or when right-clicking/long-pressing);
it will prompt the user to add a new point.
The most important aspect are the tags, which define which tags the new point will have;
The title is shown in the dialog, along with the first sentence of the description.
Upon confirmation, the full description is shown beneath the buttons - perfect to add pictures and examples.
Note: the icon of the preset is determined automatically based on the tags and the icon above. Don't worry about that!
NB: if no presets are defined, the popup to add new points doesn't show up at all`},{path:["layers","override","presets","title"],required:!0,hints:{question:"What is the word to describe this object?",inline:"Add {translated(value)::font-bold} here"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The title - shown on the 'add-new'-button.\nThis should include the article of the noun, e.g. 'a hydrant', 'a bicycle pump'.\nThis text will be inserted into `Add {category} here`, becoming `Add a hydrant here`.\nDo _not_ indicate 'new': 'add a new shop here' is incorrect, as the shop might have existed forever, it could just be unmapped!"},{path:["layers","override","presets","tags"],required:!0,hints:{typehint:"simple_tag",typehelper:"uploadableOnly",question:"What tag should be added to the new object?"},type:"array",description:`A single tag (encoded as <code>key=value</code>) out of all the tags to add onto the newly created point.
Note that the icon in the UI will be chosen automatically based on the tags provided here.`},{path:["layers","override","presets","description"],required:!1,hints:{question:"How would you describe this feature?",ifunset:"No extra description is given. This can be used to further explain the preset"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`An extra explanation of what the feature is, if it is not immediately clear from the title alone.
The _first sentence_ of the description is shown on the button of the \`add\` menu.
The full description is shown in the confirmation dialog.
(The first sentence is until the first '.'-character in the description)`},{path:["layers","override","presets","exampleImages"],required:!1,hints:{typehint:"image",question:"What is the URL of an image showing such a feature?"},type:"array",description:"The URL of an example image which shows a real-life example of what such a feature might look like."},{path:["layers","override","presets","snapToLayer"],required:!1,hints:{question:"Should the created point be snapped to a line layer?",suggestions:[{if:"value=address",then:"address - Addresses"},{if:"value=advertising",then:"advertising - We will complete data from advertising features with reference, operator and lit"},{if:"value=ambulancestation",then:"ambulancestation - An ambulance station is an area for storage of ambulance vehicles, medical equipment, personal protective equipment, and other medical supplies."},{if:"value=animal_shelter",then:"animal_shelter - An animal shelter is a facility where animals in trouble are brought and facility's staff (volunteers or not) feeds them and cares of them, rehabilitating and healing them if necessary. This definition includes kennels for abandoned dogs, catteries for abandoned cats, shelters for other abandoned pets and wildlife recovery centres. "},{if:"value=artwork",then:"artwork - An open map of statues, busts, graffitis and other artwork all over the world"},{if:"value=atm",then:"atm - ATMs to withdraw money"},{if:"value=bank",then:"bank - A financial institution to deposit money"},{if:"value=barrier",then:"barrier - Obstacles while cycling, such as bollards and cycle barriers"},{if:"value=bench",then:"bench - A bench is a wooden, metal, stone, … surface where a human can sit. This layers visualises them and asks a few questions about them."},{if:"value=bench_at_pt",then:"bench_at_pt - A layer showing all public-transport-stops which do have a bench"},{if:"value=bicycle_library",then:"bicycle_library - A facility where bicycles can be lent for longer period of times"},{if:"value=bicycle_rental",then:"bicycle_rental - Bicycle rental stations"},{if:"value=bicycle_tube_vending_machine",then:"bicycle_tube_vending_machine - A layer showing vending machines for bicycle tubes (either purpose-built bicycle tube vending machines or classical vending machines with bicycle tubes and optionally additional bicycle related objects such as lights, gloves, locks, …)"},{if:"value=bike_cafe",then:"bike_cafe - A bike café is a café geared towards cyclists, for example with services such as a pump, with lots of bicycle-related decoration, …"},{if:"value=bike_cleaning",then:"bike_cleaning - A layer showing facilities where one can clean their bike"},{if:"value=bike_parking",then:"bike_parking - A layer showing where you can park your bike"},{if:"value=bike_repair_station",then:"bike_repair_station - A layer showing bicycle pumps and bicycle repair tool stands"},{if:"value=bike_shop",then:"bike_shop - A shop specifically selling bicycles or related items"},{if:"value=bike_themed_object",then:"bike_themed_object - A layer with bike-themed objects but who don't match any other layer"},{if:"value=binocular",then:"binocular - Binoculars"},{if:"value=birdhide",then:"birdhide - A birdhide"},{if:"value=cafe_pub",then:"cafe_pub - A layer showing cafés and pubs where one can gather around a drink. The layer asks for some relevant questions"},{if:"value=car_rental",then:"car_rental - Places where you can rent a car"},{if:"value=charging_station",then:"charging_station - A charging station"},{if:"value=climbing",then:"climbing - A dummy layer which contains tagrenderings, shared among the climbing layers"},{if:"value=climbing_area",then:"climbing_area - An area where climbing is possible, e.g. a crag, site, boulder, … Contains aggregation of routes"},{if:"value=climbing_club",then:"climbing_club - A climbing club or organisation"},{if:"value=climbing_gym",then:"climbing_gym - A climbing gym"},{if:"value=climbing_opportunity",then:"climbing_opportunity - Fallback layer with items on which climbing _might_ be possible. It is loaded when zoomed in a lot, to prevent duplicate items to be added"},{if:"value=climbing_route",then:"climbing_route - A single climbing route and its properties. Some properties are derived from the containing features"},{if:"value=clock",then:"clock - Layer with public clocks"},{if:"value=conflation",then:"conflation - If the import-button moves OSM points, the imported way points or conflates, a preview is shown. This layer defines how this preview is rendered. This layer cannot be included in a theme."},{if:"value=crab_address",then:"crab_address - Address data for Flanders by the governement, suited for import into OpenStreetMap. Datadump from 2021-10-26. This layer contains only visualisation logic. Import buttons should be added via an override. Note that HNRLABEL contains the original value, whereas _HNRLABEL contains a slightly cleaned version"},{if:"value=crossings",then:"crossings - Crossings for pedestrians and cyclists"},{if:"value=current_view",then:`current_view - A meta-layer which contains one single feature, namely the bounding box of the current map view. This can be used to trigger special actions. If a popup is defined for this layer, this popup will be accessible via an extra button on screen.

The icon on the button is the default icon of the layer, but can be customized by detecting 'button=yes'.`},{if:"value=cycleways_and_roads",then:"cycleways_and_roads - All infrastructure that someone can cycle over, accompanied with questions about this infrastructure"},{if:"value=defibrillator",then:"defibrillator - A layer showing defibrillators which can be used in case of emergency. This contains public defibrillators, but also defibrillators which might need staff to fetch the actual device"},{if:"value=dentist",then:"dentist - This layer shows dentist offices"},{if:"value=direction",then:"direction - This layer visualizes directions"},{if:"value=doctors",then:"doctors - This layer shows doctor offices"},{if:"value=dogpark",then:"dogpark - A layer showing dogparks, which are areas where dog are allowed to run without a leash"},{if:"value=drinking_water",then:"drinking_water - A layer showing drinking water fountains"},{if:"value=elevator",then:"elevator - This layer show elevators and asks for operational status and elevator dimensions. Useful for wheelchair accessibility information"},{if:"value=elongated_coin",then:"elongated_coin - Layer showing penny presses."},{if:"value=entrance",then:"entrance - A layer showing entrances and offering capabilities to survey some advanced data which is important for e.g. wheelchair users (but also bicycle users, people who want to deliver, …)"},{if:"value=etymology",then:"etymology - All objects which have an etymology known"},{if:"value=extinguisher",then:"extinguisher - Map layer to show fire extinguishers."},{if:"value=filters",then:"filters - This layer acts as library for common filters"},{if:"value=fire_station",then:"fire_station - Map layer to show fire stations."},{if:"value=fitness_centre",then:"fitness_centre - Layer showing fitness centres"},{if:"value=fitness_station",then:"fitness_station - Find a fitness station near you, and add missing ones."},{if:"value=fixme",then:"fixme - OSM objects that likely need to be fixed, based on a FIXME tag."},{if:"value=food",then:"food - A layer showing restaurants and fast-food amenities (with a special rendering for friteries)"},{if:"value=ghost_bike",then:"ghost_bike - A layer showing memorials for cyclists, killed in road accidents"},{if:"value=governments",then:"governments - This layer show governmental buildings. It was setup as commissioned layer for the client of OSOC '22"},{if:"value=gps_location",then:"gps_location - Meta layer showing the current location of the user. Add this to your theme and override the icon to change the appearance of the current location. The object will always have `id=gps` and will have _all_ the properties included in the [`Coordinates`-object](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates) (except latitude and longitude) returned by the browser, such as `speed`, `altitude`, `heading`, ...."},{if:"value=gps_location_history",then:"gps_location_history - Meta layer which contains the previous locations of the user as single points. This is mainly for technical reasons, e.g. to keep match the distance to the modified object"},{if:"value=gps_track",then:"gps_track - Meta layer showing the previous locations of the user as single line with controls, e.g. to erase, upload or download this track. Add this to your theme and override the maprendering to change the appearance of the travelled track."},{if:"value=guidepost",then:"guidepost - Guideposts (also known as fingerposts or finger posts) are often found along official hiking/cycling/riding/skiing routes to indicate the directions to different destinations"},{if:"value=hackerspace",then:"hackerspace - Hackerspace"},{if:"value=home_location",then:"home_location - Meta layer showing the home location of the user. The home location can be set in the [profile settings](https://www.openstreetmap.org/profile/edit) of OpenStreetMap."},{if:"value=hospital",then:"hospital - A layer showing hospital grounds"},{if:"value=hotel",then:"hotel - Layer showing all hotels"},{if:"value=hydrant",then:"hydrant - Map layer to show fire hydrants."},{if:"value=ice_cream",then:"ice_cream - A place where ice cream is sold over the counter"},{if:"value=icons",then:"icons - A layer acting as library for icon-tagrenderings, especially to show as badge next to a POI"},{if:"value=id_presets",then:"id_presets - Layer containing various presets and questions generated by ID. These are meant to be reused in other layers by importing the tagRenderings with `id_preset.<tagrendering>"},{if:"value=import_candidate",then:"import_candidate - Layer used as template in the importHelper"},{if:"value=indoors",then:"indoors - Basic indoor mapping: shows room outlines"},{if:"value=information_board",then:"information_board - A layer showing touristical, road side information boards (e.g. giving information about the landscape, a building, a feature, a map, …)"},{if:"value=kerbs",then:"kerbs - A layer showing kerbs."},{if:"value=kindergarten_childcare",then:"kindergarten_childcare - Shows kindergartens and preschools. Both are grouped in one layer, as they are regularly confused with each other"},{if:"value=last_click",then:"last_click - This layer defines how to render the 'last click'-location. By default, it will show a marker with the possibility to add a new point (if there are some presets) and/or to add a new note (if the 'note' layer attribute is set). If none are possible, this layer won't show up"},{if:"value=map",then:"map - A map, meant for tourists which is permanently installed in the public space"},{if:"value=maproulette",then:"maproulette - Layer showing all tasks in MapRoulette"},{if:"value=maproulette_challenge",then:"maproulette_challenge - Layer showing tasks of a single MapRoulette challenge. This layer is intended to be reused and extended in themes; refer to [the documentation](https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Integrating_Maproulette.md) on how to do this."},{if:"value=maxspeed",then:"maxspeed - Shows the allowed speed for every road"},{if:"value=memorial",then:"memorial - Layer showing memorial plaques, based upon a unofficial theme. Can be expanded to have multiple types of memorials later on"},{if:"value=named_streets",then:"named_streets - Hidden layer with all streets which have a name. Useful to detect addresses"},{if:"value=nature_reserve",then:"nature_reserve - A nature reserve is an area where nature can take its course"},{if:"value=note",then:"note - This layer shows notes on OpenStreetMap. Having this layer in your theme will trigger the 'add new note' functionality in the 'addNewPoint'-popup (or if your theme has no presets, it'll enable adding notes)"},{if:"value=observation_tower",then:"observation_tower - Towers with a panoramic view"},{if:"value=osm_community_index",then:"osm_community_index - A layer showing the OpenStreetMap Communities"},{if:"value=parcel_lockers",then:"parcel_lockers - Layer showing parcel lockers for collecting and sending parcels."},{if:"value=parking",then:"parking - A layer showing car parkings"},{if:"value=parking_spaces",then:"parking_spaces - Layer showing individual parking spaces."},{if:"value=parking_ticket_machine",then:"parking_ticket_machine - Layer with parking ticket machines to pay for parking."},{if:"value=pedestrian_path",then:"pedestrian_path - Pedestrian footpaths, especially used for indoor navigation and snapping entrances to this layer"},{if:"value=pharmacy",then:"pharmacy - A layer showing pharmacies, which (probably) dispense prescription drugs"},{if:"value=physiotherapist",then:"physiotherapist - This layer shows physiotherapists"},{if:"value=picnic_table",then:"picnic_table - The layer showing picnic tables"},{if:"value=play_forest",then:"play_forest - Een speelbos is een vrij toegankelijke zone in een bos"},{if:"value=playground",then:"playground - Playgrounds"},{if:"value=postboxes",then:"postboxes - The layer showing postboxes."},{if:"value=postoffices",then:"postoffices - A layer showing post offices."},{if:"value=public_bookcase",then:"public_bookcase - A streetside cabinet with books, accessible to anyone"},{if:"value=questions",then:"questions - Special library layer which does not need a '.questions'-prefix before being imported"},{if:"value=railway_platforms",then:"railway_platforms - Find every platform in the station, and the train routes that use them."},{if:"value=rainbow_crossings",then:"rainbow_crossings - A layer showing pedestrian crossings with rainbow paintings"},{if:"value=range",then:"range - Meta-layer, simply showing a bbox in red"},{if:"value=reception_desk",then:"reception_desk - A layer showing where the reception desks are and which asks some accessibility information"},{if:"value=recycling",then:"recycling - A layer with recycling containers and centres"},{if:"value=route_marker",then:"route_marker - Route markers are small markers often found along official hiking/cycling/riding/skiing routes to indicate the direction of the route."},{if:"value=school",then:"school - Schools giving primary and secondary education and post-secondary, non-tertiary education. Note that this level of education does not imply an age of the pupiles"},{if:"value=selected_element",then:"selected_element - Highlights the currently selected element. Override this layer to have different colors"},{if:"value=shelter",then:"shelter - Layer showing shelter structures"},{if:"value=shops",then:"shops - A shop"},{if:"value=shower",then:"shower - A layer showing (public) showers"},{if:"value=slow_roads",then:"slow_roads - All carfree roads"},{if:"value=speed_camera",then:"speed_camera - Layer showing speed cameras"},{if:"value=speed_display",then:"speed_display - Layer showing speed displays that alert drivers of their speed."},{if:"value=split_point",then:"split_point - Layer rendering the little scissors for the minimap in the 'splitRoadWizard'"},{if:"value=split_road",then:"split_road - Layer rendering the way to split in the 'splitRoadWizard'. This one is used instead of the variable rendering by the themes themselves, as they might not always be very visible"},{if:"value=sport_pitch",then:"sport_pitch - A sport pitch"},{if:"value=sports_centre",then:"sports_centre - Indoor and outdoor sports centres can be found on this layer"},{if:"value=stairs",then:"stairs - Layer showing stairs and escalators"},{if:"value=street_lamps",then:"street_lamps - A layer showing street lights"},{if:"value=surveillance_camera",then:"surveillance_camera - This layer shows surveillance cameras and allows a contributor to update information and add new cameras"},{if:"value=tertiary_education",then:"tertiary_education - Layer with all tertiary education institutes (ISCED:2011 levels 6,7 and 8)"},{if:"value=ticket_machine",then:"ticket_machine - Find ticket machines for public transport tickets"},{if:"value=ticket_validator",then:"ticket_validator - Find ticket validators to validate public transport tickets"},{if:"value=toilet",then:"toilet - A layer showing (public) toilets"},{if:"value=toilet_at_amenity",then:"toilet_at_amenity - A layer showing (public) toilets located at different places."},{if:"value=trail",then:"trail - Waymarked trails"},{if:"value=transit_routes",then:"transit_routes - Layer showing bus lines"},{if:"value=transit_stops",then:"transit_stops - Layer showing different types of transit stops."},{if:"value=tree_node",then:"tree_node - A layer showing trees"},{if:"value=unit",then:"unit - Library layer with all common units.  Units can _only_ be imported from this file."},{if:"value=usersettings",then:"usersettings - A special layer which is not meant to be shown on a map, but which is used to set user settings"},{if:"value=vending_machine",then:"vending_machine - Layer showing vending machines"},{if:"value=veterinary",then:"veterinary - A layer showing veterinarians"},{if:"value=viewpoint",then:"viewpoint - A nice viewpoint or nice view. Ideal to add an image if no other category fits"},{if:"value=village_green",then:"village_green - A layer showing village-green (which are communal green areas, but not quite parks)"},{if:"value=visitor_information_centre",then:"visitor_information_centre - A visitor center offers information about a specific attraction or place of interest where it is located."},{if:"value=walls_and_buildings",then:"walls_and_buildings - Special builtin layer providing all walls and buildings. This layer is useful in presets for objects which can be placed against walls (e.g. AEDs, postboxes, entrances, addresses, surveillance cameras, …). This layer is invisible by default and not toggleable by the user."},{if:"value=waste_basket",then:"waste_basket - This is a public waste basket, thrash can, where you can throw away your thrash."},{if:"value=waste_disposal",then:"waste_disposal - Waste Disposal Bin, medium to large bin for disposal of (household) waste"},{if:"value=windturbine",then:"windturbine - Modern windmills generating electricity"}]},type:"array",description:"If specified, these layers will be shown in the precise location picker  and the new point will be snapped towards it.\nFor example, this can be used to snap against `walls_and_buildings` (e.g. to attach a defibrillator, an entrance, an artwork, ... to the wall)\nor to snap an obstacle (such as a bollard) to the `cycleways_and_roads`."},{path:["layers","override","presets","maxSnapDistance"],required:!1,hints:{question:"What is the maximum distance in the location-input that a point can be moved to be snapped to a way?",ifunset:"Do not snap to a layer",inline:"a point is snapped if the location input is at most <b>{value}m</b> away from an object"},type:"number",description:`If specified, a new point will only be snapped if it is within this range.
If further away, it'll be placed in the center of the location input
Distance in meter`},{path:["layers","override","tagRenderings"],required:!1,hints:{typehint:"tagrendering[]",group:"tagrenderings",question:"Edit this way this attributed is displayed or queried"},type:[{description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`,type:"object",properties:{id:{type:"string"},mappings:{description:`Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes

question: What are common options?`,type:"array",items:{$ref:"#/definitions/MappingConfigJson"}},multiAnswer:{description:`If true, use checkboxes instead of radio buttons when asking the question

question: Should a contributor be allowed to select multiple mappings?

iftrue: allow to select multiple mappings
iffalse: only allow to select a single mapping
ifunset: only allow to select a single mapping`,type:"boolean"},freeform:{description:"Allow freeform text input from the user",type:"object",properties:{key:{description:`question: What is the name of the attribute that should be written to?
This is the OpenStreetMap-key that that value will be written to
ifunset: do not offer a freeform textfield as answer option`,type:"string"},type:{description:`question: What is the input type?
The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values
ifunset: use an unconstrained <b>string</b> as input (default)
suggestions: return validators.AllValidators.filter(type => !type.isMeta).map((type) => ({if: "value="+type.name, then: "<b>"+type.name+"</b> "+type.explanation.split("\\n")[0]}))`,type:"string"},placeholder:{description:`question: What placeholder text should be shown in the input-element if there is no input?
A (translated) text that is shown (as gray text) within the textfield
type: translation
group: expert`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},helperArgs:{description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'
group: expert`,type:"array",items:{}},addExtraTags:{description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'
group: expert`,type:"array",items:{type:"string"}},inline:{description:`question: Show the freeform as box within the question?
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
ifunset: show the freeform input field full-width
iftrue: show the freeform input field as a small field within the question
group: expert`,type:"boolean"},default:{description:`question: What value should be entered in the text field if no value is set?
This can help people to quickly enter the most common option
ifunset: do not prefill the textfield
group: expert`,type:"string"},invalidValues:{description:`question: What values of the freeform key should be interpreted as 'unknown'?
For example, if a feature has \`shop=yes\`, the question 'what type of shop is this?' should still asked
ifunset: The question will be considered answered if any value is set for the key
group: expert`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]}}},question:{description:`question: What question should be shown to the contributor?

A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well.

ifunset: This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},questionHint:{description:`question: Should some extra information be shown to the contributor, alongside the question?
This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like
ifunset: No extra hint is given`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},editButtonAriaLabel:{description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},labels:{description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer",type:"array",items:{type:"string"}},render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},required:["id"],additionalProperties:!1},{type:"object",properties:{id:{type:"string"},builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<QuestionableTagRenderingConfigJson>"}},required:["builtin","override"]},{allOf:[{$ref:"#/definitions/default<(string|QuestionableTagRenderingConfigJson|{builtin:string;override:Partial<QuestionableTagRenderingConfigJson>;})[]>"},{type:"object",properties:{id:{type:"string"}},required:["id"]}]},{type:"string"}],description:`A tag rendering is a block that either shows the known value or asks a question.
Refer to the class \`TagRenderingConfigJson\` to see the possibilities.
Note that we can also use a string here - where the string refers to a tag rendering defined in \`assets/questions/questions.json\`,
where a few very general questions are defined e.g. website, phone number, ...
Furthermore, _all_ the questions of another layer can be reused with \`otherlayer.*\`
If you need only a single of the tagRenderings, use \`otherlayer.tagrenderingId\`
If one or more questions have a 'group' or 'label' set, select all the entries with the corresponding group or label with \`otherlayer.*group\`
Remark: if a tagRendering is 'lent' from another layer, the 'source'-tags are copied and added as condition.
If they are not wanted, remove them with an override
A special value is 'questions', which indicates the location of the questions box. If not specified, it'll be appended to the bottom of the featureInfobox.
At last, one can define a group of renderings where parts of all strings will be replaced by multiple other strings.
This is mainly create questions for a 'left' and a 'right' side of the road.
These will be grouped and questions will be asked together`},{path:["layers","override","tagRenderings","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","override","tagRenderings","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","override","tagRenderings","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","override","tagRenderings","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","override","tagRenderings","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","override","tagRenderings","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","override","tagRenderings","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","override","tagRenderings","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","override","tagRenderings","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","override","tagRenderings","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","override","tagRenderings","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","override","tagRenderings","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","override","tagRenderings","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","override","tagRenderings","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","override","tagRenderings","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","tagRenderings","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","tagRenderings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","tagRenderings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","tagRenderings","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","tagRenderings","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","tagRenderings","override","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","override","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","override","tagRenderings","override","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","override","tagRenderings","override","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","override","tagRenderings","override","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","override","tagRenderings","override","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","override","tagRenderings","override","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","override","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","override","tagRenderings","override","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","override","tagRenderings","override","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","override","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","override","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","override","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","override","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","override","tagRenderings","override","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","override","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","override","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","override","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","override","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","override","tagRenderings","override","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","override","tagRenderings","override","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","override","tagRenderings","override","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","override","tagRenderings","override","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","override","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","override","tagRenderings","override","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","override","tagRenderings","override","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","tagRenderings","override","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","tagRenderings","override","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","tagRenderings","override","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","tagRenderings","override","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","override","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","override","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","tagRenderings","override","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","tagRenderings"],required:!1,hints:{},type:"object",description:`Rewrites and multiplies the given renderings of type T.
This can be used for introducing many similar questions automatically,
which also makes translations easier.
(Note that the key does _not_ need to be wrapped in {}.
However, we recommend to use them if the key is used in a translation, as missing keys will be picked up and warned for by the translation scripts)
For example:
\`\`\`
{
    rewrite: {
        sourceString: ["key", "a|b|c"],
        into: [
            ["X", 0]
            ["Y", 1],
            ["Z", 2]
        ],
        renderings: [{
            "key":"a|b|c"
        }]
    }
}
\`\`\`
will result in _three_ copies (as the values to rewrite into have three values, namely:
[
  {
  # The first pair: key --> X, a|b|c --> 0
      "X": 0
  },
  {
      "Y": 1
  },
  {
      "Z": 2
  }
]`},{path:["layers","override","tagRenderings","renderings","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","renderings","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","override","tagRenderings","renderings","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","override","tagRenderings","renderings","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","override","tagRenderings","renderings","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","override","tagRenderings","renderings","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","override","tagRenderings","renderings","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","override","tagRenderings","renderings","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","renderings","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","renderings","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","renderings","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","override","tagRenderings","renderings","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","renderings","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","renderings","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","renderings","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","renderings","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","override","tagRenderings","renderings","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","override","tagRenderings","renderings","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","override","tagRenderings","renderings","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","override","tagRenderings","renderings","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","renderings","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","override","tagRenderings","renderings","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","override","tagRenderings","renderings","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","tagRenderings","renderings","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","tagRenderings","renderings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","tagRenderings","renderings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","tagRenderings","renderings","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","renderings","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","renderings","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","tagRenderings","renderings","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","tagRenderings","renderings","override","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","renderings","override","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","override","tagRenderings","renderings","override","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","override","tagRenderings","renderings","override","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","override","tagRenderings","renderings","override","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","override","tagRenderings","renderings","override","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","override","tagRenderings","renderings","override","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","override","tagRenderings","renderings","override","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","renderings","override","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","renderings","override","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","renderings","override","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","override","tagRenderings","renderings","override","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","renderings","override","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","renderings","override","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","renderings","override","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","renderings","override","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","override","tagRenderings","renderings","override","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","override","tagRenderings","renderings","override","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","override","tagRenderings","renderings","override","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","override","tagRenderings","renderings","override","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","renderings","override","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","override","tagRenderings","renderings","override","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","override","tagRenderings","renderings","override","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","tagRenderings","renderings","override","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","tagRenderings","renderings","override","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","tagRenderings","renderings","override","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","tagRenderings","renderings","override","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","renderings","override","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","renderings","override","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","tagRenderings","renderings","override","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","tagRenderings","renderings","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","renderings","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","override","tagRenderings","renderings","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","override","tagRenderings","renderings","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","override","tagRenderings","renderings","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","override","tagRenderings","renderings","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","override","tagRenderings","renderings","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","override","tagRenderings","renderings","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","renderings","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","renderings","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","renderings","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","override","tagRenderings","renderings","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","renderings","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","renderings","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","renderings","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","renderings","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","override","tagRenderings","renderings","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","override","tagRenderings","renderings","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","override","tagRenderings","renderings","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","override","tagRenderings","renderings","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","renderings","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","override","tagRenderings","renderings","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","override","tagRenderings","renderings","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","tagRenderings","renderings","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","tagRenderings","renderings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","tagRenderings","renderings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","tagRenderings","renderings","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","renderings","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","renderings","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","tagRenderings","renderings","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","tagRenderings","renderings","override","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","renderings","override","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","override","tagRenderings","renderings","override","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","override","tagRenderings","renderings","override","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","override","tagRenderings","renderings","override","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","override","tagRenderings","renderings","override","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["layers","override","tagRenderings","renderings","override","mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","override","tagRenderings","renderings","override","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","renderings","override","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","renderings","override","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","renderings","override","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","override","tagRenderings","renderings","override","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","renderings","override","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","renderings","override","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","renderings","override","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","renderings","override","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","override","tagRenderings","renderings","override","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","override","tagRenderings","renderings","override","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","override","tagRenderings","renderings","override","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","override","tagRenderings","renderings","override","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","renderings","override","editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["layers","override","tagRenderings","renderings","override","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","override","tagRenderings","renderings","override","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","tagRenderings","renderings","override","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","tagRenderings","renderings","override","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","tagRenderings","renderings","override","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","tagRenderings","renderings","override","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","renderings","override","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","renderings","override","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","tagRenderings","renderings","override","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","filter"],required:!1,hints:{group:"filters"},type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/default_1"},{type:"string"}]}},{type:"object",properties:{sameAs:{type:"string"}},required:["sameAs"]}],description:"All the extra questions for filtering.\nIf a string is given, mapComplete will search in 'filters.json' for the appropriate filter or will try to parse it as `layername.filterid` and us that one"},{path:["layers","override","filter","id"],required:!0,hints:{},type:"string",description:"An id/name for this filter, used to set the URL parameters"},{path:["layers","override","filter","options"],required:!0,hints:{},type:"array",description:`The options for a filter
If there are multiple options these will be a list of radio buttons
If there is only one option this will be a checkbox
Filtering is done based on the given osmTags that are compared to the objects in that layer.
An example which searches by name:
\`\`\`
{
      "id": "shop-name",
      "options": [
        {
          "fields": [
            {
              "name": "search",
              "type": "string"
            }
          ],
          "osmTags": "name~i~.*{search}.*",
          "question": {
            "en": "Only show shops with name {search}",
          }
        }
      ]
    }
    \`\`\``},{path:["layers","override","filter","options","osmTags"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","filter","options","osmTags","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","filter","options","osmTags","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","filter","options","fields","name"],required:!0,hints:{},type:"string",description:'If name is `search`, use  "_first_comment~.*{search}.*" as osmTags'},{path:["layers","override","filter","#"],required:!1,hints:{},type:"string",description:'Used for comments or to disable a check\n"ignore-possible-duplicate": disables a check in `DetectDuplicateFilters` which complains that a filter can be replaced by a filter from the `filters`-library-layer'},{path:["layers","override","deletion"],required:!1,hints:{types:"Use an advanced delete configuration ; boolean",group:"editing",iftrue:"Allow deletion",iffalse:"Do not allow deletion",ifunset:"Do not allow deletion"},type:[{type:"object",properties:{neededChangesets:{description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.

type: nat
question: How many changesets must a contributor have before being allowed to delete a point?`,type:"number"},extraDeleteReasons:{description:`*
By default, three reasons to delete a point are shown:

- The point does not exist anymore
- The point was a testing point
- THe point could not be found

However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:

- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...

These reasons can be stated here and will be shown in the list of options the user can choose from`,type:"array",items:{type:"object",properties:{explanation:{description:`The text that will be shown to the user as option for why this point does not exist anymore.
Note that the most common reasons (test point, does not exist anymore, cannot be found) are already offered by default

question: For what extra reason might this feature be removed in real-life?`},changesetMessage:{description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english

question: What should be added to the changeset as delete reason?`,type:"string"}},required:["changesetMessage","explanation"]}},nonDeleteMappings:{description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).

By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`,type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`The tags that will be given to the object.
This must remove tags so that the 'source/osmTags' won't match anymore

question: What tags should be applied to the object?`},then:{description:`The human explanation for the options

question: What text should be shown to the contributor for this reason?`}},required:["if","then"]}},softDeletionTags:{description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!

Example (note that "amenity=" erases the 'amenity'-key alltogether):

\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`

or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):

\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\`

question: If a hard delete is not possible, what tags should be applied to mark this feature as deleted?
type: tag`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},omitDefaultDeleteReasons:{description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping

question: Should the default delete reasons be hidden?
iftrue: Hide the default delete reasons
iffalse: Show the default delete reasons
ifunset: Show the default delete reasons (default behaviour)`,type:"boolean"}},additionalProperties:!1},{type:"boolean"}],description:`This block defines under what circumstances the delete dialog is shown for objects of this layer.
If set, a dialog is shown to the user to (soft) delete the point.
The dialog is built to be user friendly and to prevent mistakes.
If deletion is not possible, the dialog will hide itself and show the reason of non-deletability instead.
To configure, the following values are possible:
- false: never ever show the delete button
- true: show the default delete button
- undefined: use the mapcomplete default to show deletion or not. Currently, this is the same as 'false' but this will change in the future
- or: a hash with options (see below)
### The delete dialog
#### Hard deletion if enough experience
A feature can only be deleted from OpenStreetMap by mapcomplete if:
- It is a node
- No ways or relations use the node
- The logged-in user has enough experience OR the user is the only one to have edited the point previously
- The logged-in user has no unread messages (or has a ton of experience)
- The user did not select one of the 'non-delete-options' (see below)
In all other cases, a 'soft deletion' is used.
#### Soft deletion
A 'soft deletion' is when the point isn't deleted fromOSM but retagged so that it'll won't how up in the mapcomplete theme anymore.
This makes it look like it was deleted, without doing damage. A fixme will be added to the point.
Note that a soft deletion is _only_ possible if these tags are provided by the theme creator, as they'll be different for every theme
##### No-delete options
In some cases, the contributor might want to delete something for the wrong reason (e.g. someone who wants to have a path removed "because the path is on their private property").
However, the path exists in reality and should thus be on OSM - otherwise the next contributor will pass by and notice "hey, there is a path missing here! Let me redraw it in OSM!)
The correct approach is to retag the feature in such a way that it is semantically correct *and* that it doesn't show up on the theme anymore.
A no-delete option is offered as 'reason to delete it', but secretly retags.`},{path:["layers","override","deletion","neededChangesets"],required:!1,hints:{typehint:"nat",question:"How many changesets must a contributor have before being allowed to delete a point?"},type:"number",description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.`},{path:["layers","override","deletion","extraDeleteReasons"],required:!1,hints:{},type:"array",description:`*
By default, three reasons to delete a point are shown:
- The point does not exist anymore
- The point was a testing point
- THe point could not be found
However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:
- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...
These reasons can be stated here and will be shown in the list of options the user can choose from`},{path:["layers","override","deletion","extraDeleteReasons","explanation"],required:!0,hints:{question:"For what extra reason might this feature be removed in real-life?"},description:`The text that will be shown to the user as option for why this point does not exist anymore.
Note that the most common reasons (test point, does not exist anymore, cannot be found) are already offered by default`},{path:["layers","override","deletion","extraDeleteReasons","changesetMessage"],required:!0,hints:{question:"What should be added to the changeset as delete reason?"},type:"string",description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english`},{path:["layers","override","deletion","nonDeleteMappings"],required:!1,hints:{},type:"array",description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).
By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`},{path:["layers","override","deletion","nonDeleteMappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be applied to the object?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The tags that will be given to the object.
This must remove tags so that the 'source/osmTags' won't match anymore`},{path:["layers","override","deletion","nonDeleteMappings","then"],required:!0,hints:{question:"What text should be shown to the contributor for this reason?"},description:"The human explanation for the options"},{path:["layers","override","deletion","softDeletionTags"],required:!1,hints:{typehint:"tag",question:"If a hard delete is not possible, what tags should be applied to mark this feature as deleted?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!
Example (note that "amenity=" erases the 'amenity'-key alltogether):
\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`
or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):
\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\``},{path:["layers","override","deletion","softDeletionTags","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","deletion","softDeletionTags","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","deletion","omitDefaultDeleteReasons"],required:!1,hints:{question:"Should the default delete reasons be hidden?",iftrue:"Hide the default delete reasons",iffalse:"Show the default delete reasons",ifunset:"Show the default delete reasons (default behaviour)"},type:"boolean",description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping`},{path:["layers","override","allowMove"],required:!1,hints:{types:"use an advanced move configuration ; boolean",group:"editing",question:"Is deleting a point allowed?",iftrue:"Allow contributors to move a point (for accuracy or a relocation)",iffalse:"Don't allow contributors to move points",ifunset:"Don't allow contributors to move points (default)"},type:[{type:"object",properties:{enableImproveAccuracy:{description:`question: Should moving this type of point to improve the accuracy be allowed?
iftrue: This point can be moved to improve the accuracy
ifunset: (default) This point can be moved to improve the accuracy
iffalse: This point cannot be moved to improve the accuracy`,type:"boolean"},enableRelocation:{description:"question: Should moving this type of point due to a relocation be allowed?\n\nThis will erase the attributes `addr:street`, `addr:housenumber`, `addr:city` and `addr:postcode`\n\niftrue: This type of point can be moved due to a relocation (and will remove address information when this is done)\nifunset: (default) This type of point can be moved due to a relocation (and will remove address information when this is done)\niffalse: This type of point cannot be moved due to a relocation",type:"boolean"}},additionalProperties:!1},{type:"boolean"}],description:`Indicates if a point can be moved and why.
A feature can be moved by MapComplete if:
- It is a point
- The point is _not_ part of a way or a a relation.`},{path:["layers","override","allowMove","enableImproveAccuracy"],required:!1,hints:{question:"Should moving this type of point to improve the accuracy be allowed?",iftrue:"This point can be moved to improve the accuracy",iffalse:"This point cannot be moved to improve the accuracy",ifunset:"(default) This point can be moved to improve the accuracy"},type:"boolean",description:""},{path:["layers","override","allowMove","enableRelocation"],required:!1,hints:{question:"Should moving this type of point due to a relocation be allowed?",iftrue:"This type of point can be moved due to a relocation (and will remove address information when this is done)",iffalse:"This type of point cannot be moved due to a relocation",ifunset:"(default) This type of point can be moved due to a relocation (and will remove address information when this is done)"},type:"boolean",description:"This will erase the attributes `addr:street`, `addr:housenumber`, `addr:city` and `addr:postcode`"},{path:["layers","override","allowSplit"],required:!1,hints:{group:"editing",question:"Should the contributor be able to split ways using this layer?",iftrue:"enable the 'split-roads'-component",iffalse:"don't enable the split-roads componenet",ifunset:"don't enable the split-roads component"},type:"boolean",description:`If set, a 'split this way' button is shown on objects rendered as LineStrings, e.g. highways.
If the way is part of a relation, MapComplete will attempt to update this relation as well`},{path:["layers","override","units","quantity"],required:!1,hints:{},type:"string",description:"What is quantified? E.g. 'speed', 'length' (including width, diameter, ...), 'electric tension', 'electric current', 'duration'"},{path:["layers","override","units","appliesToKey"],required:!1,hints:{},type:"array",description:"Every key from this list will be normalized.\nTo render the value properly (with a human readable denomination), use `{canonical(<key>)}`"},{path:["layers","override","units","eraseInvalidValues"],required:!1,hints:{},type:"boolean",description:`If set, invalid values will be erased in the MC application (but not in OSM of course!)
Be careful with setting this`},{path:["layers","override","units","applicableUnits"],required:!0,hints:{},type:"array",description:`The possible denominations for this unit.
For length, denominations could be "meter", "kilometer", "miles", "foot"`},{path:["layers","override","units","applicableUnits","useIfNoUnitGiven"],required:!1,hints:{},type:[{type:"array",items:{type:"string"}},{type:"boolean"}],description:`If this evaluates to true and the value to interpret has _no_ unit given, assumes that this unit is meant.
Alternatively, a list of country codes can be given where this acts as the default interpretation
E.g., a denomination using "meter" would probably set this flag to "true";
a denomination for "mp/h" will use the condition "_country=gb" to indicate that it is the default in the UK.
If none of the units indicate that they are the default, the first denomination will be used instead`},{path:["layers","override","units","applicableUnits","canonicalDenomination"],required:!0,hints:{},type:"string",description:`The canonical value for this denomination which will be added to the value in OSM.
e.g. "m" for meters
If the user inputs '42', the canonical value will be added and it'll become '42m'.
Important: often, _no_ canonical values are expected, e.g. in the case of 'maxspeed' where 'km/h' is the default.
In this case, an empty string should be used`},{path:["layers","override","units","applicableUnits","canonicalDenominationSingular"],required:!1,hints:{},type:"string",description:"The canonical denomination in the case that the unit is precisely '1'.\nUsed for display purposes only.\nE.g.: for duration of something in minutes: `2 minutes` but `1 minute`; the `minute` goes here"},{path:["layers","override","units","applicableUnits","alternativeDenomination"],required:!1,hints:{},type:"array",description:"A list of alternative values which can occur in the OSM database - used for parsing.\nE.g.: while 'm' is canonical, `meter`, `mtrs`, ... can occur as well"},{path:["layers","override","units","applicableUnits","human"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "meter",
    "fr": "metre"
}`},{path:["layers","override","units","applicableUnits","humanSingular"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "minute",
    "nl": "minuut"
}`},{path:["layers","override","units","applicableUnits","prefix"],required:!1,hints:{},type:"boolean",description:`If set, then the canonical value will be prefixed instead, e.g. for '€'
Note that if all values use 'prefix', the dropdown might move to before the text field`},{path:["layers","override","units","applicableUnits","addSpace"],required:!1,hints:{},type:"boolean",description:"If set, add a space between the quantity and the denomination.\nE.g.: `50 mph` instad of `50mph`"},{path:["layers","override","units","defaultInput"],required:!1,hints:{},type:"string",description:`In some cases, the default denomination is not the most user friendly to input.
E.g., when measuring kerb heights, it is illogical to ask contributors to input an amount in meters.
When a default input method should be used, this can be specified by setting the canonical denomination here, e.g.
\`defaultInput: "cm"\`. This must be a denomination which appears in the applicableUnits`},{path:["layers","override","syncSelection"],required:!1,hints:{group:"advanced",question:"Should enabling/disabling the layer be saved (locally or in the cloud)?",suggestions:[{if:"value=no",then:"Don't save, always revert to the default"},{if:"value=local",then:"Save selection in local storage"},{if:"value=theme-only",then:"Save the state in the OSM-usersettings, but apply on this theme only (default)"},{if:"value=global",then:"Save in OSM-usersettings and toggle on _all_ themes using this layer"}]},type:"string",description:"If set, synchronizes whether or not this layer is enabled."},{path:["layers","override","#"],required:!1,hints:{group:"hidden"},type:"string",description:`Used for comments and/or to disable some checks
no-question-hint-check: disables a check in MiscTagRenderingChecks which complains about 'div', 'span' or 'class=subtle'-HTML elements in the tagRendering`},{path:["layers","override","fullNodeDatabase"],required:!1,hints:{group:"hidden"},type:"boolean",description:"_Set automatically by MapComplete, please ignore_"},{path:["layers","hideTagRenderingsWithLabels"],required:!1,hints:{},type:"array",description:`TagRenderings with any of these labels will be removed from the layer.
Note that the 'id' and 'group' are considered labels too`},{path:["overrideAll"],required:!1,hints:{},type:"object",description:`An override applied on all layers of the theme.
E.g.: if there are two layers defined:
\`\`\`
"layers":[
 {"title": ..., "tagRenderings": [...], "osmSource":{"tags": ...}},
 {"title", ..., "tagRenderings", [...], "osmSource":{"tags" ...}}
]
\`\`\`
and overrideAll is specified:
\`\`\`
"overrideAll": {
    "osmSource":{"geoJsonSource":"xyz"}
}
then the result will be that all the layers will have these properties applied and result in:
"layers":[
 {"title": ..., "tagRenderings": [...], "osmSource":{"tags": ..., "geoJsonSource":"xyz"}},
 {"title", ..., "tagRenderings", [...], "osmSource":{"tags" ..., "geoJsonSource":"xyz"}}
]
\`\`\`
If the overrideAll contains a list where the keys starts with a plus, the values will be appended (instead of discarding the old list), for example
"overrideAll": {
  "+tagRenderings": [ { ... some tagrendering ... }]
}
In the above scenario, \`sometagrendering\` will be added at the beginning of the tagrenderings of every layer`},{path:["tileLayerSources"],required:!1,hints:{},type:"array",description:"Define some (overlay) slippy map tilesources"},{path:["tileLayerSources","name"],required:!0,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The name of the imagery source"},{path:["customCss"],required:!1,hints:{group:"advanced"},type:"string",description:"The URL of a custom CSS stylesheet to modify the layout"},{path:["lockLocation"],required:!1,hints:{},type:[{type:"array",items:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2}],minItems:2,maxItems:2},{type:"array",items:{type:"array",items:{type:"number"}}}],description:`If set to true, the basemap will not scroll outside of the area visible on initial zoom.
If set to [[lon, lat], [lon, lat]], the map will not scroll outside of those bounds.
Off by default, which will enable panning to the entire world`},{path:["enableUserBadge"],required:!1,hints:{group:"feature_switches",question:"Should a user be able to login with OpenStreetMap?",iftrue:"Enable the possiblity to login with OpenStreetMap",iffalse:"Do not enable to login with OpenStreetMap, have a read-only view of MapComplete.",ifunset:"Enable the possiblity to login with OpenStreetMap (default)"},type:"boolean",description:`If not logged in, will not show the login buttons and hide all the editable elements.
As such, MapComplete will become read-only and a purely visualisation tool.`},{path:["enableShareScreen"],required:!1,hints:{group:"feature_switches",question:"Should the tab with options to share the current screen be enabled?",iftrue:"Enable the share screen",iffalse:"Do not enable the share screen",ifunset:"Enable the sharescreen (default)"},type:"boolean",description:"On can get the iFrame embed code here"},{path:["enableMoreQuests"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to switch to different themes?",iftrue:"enable to go back to the index page showing all themes",iffalse:"do not enable to go back to the index page showing all themes; hide the 'more themes' buttons",ifunset:"mapcomplete default: enable to go back to the index page showing all themes"},type:"boolean",description:"Typically enabled in iframes and/or on commisioned themes"},{path:["enableLayers"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to enable/disable layers and to filter the layers?",iftrue:"enable the filters/layers pane",iffalse:"do not enable to filter or to disable layers; hide the 'filter' tab from the overview and the button at the bottom-left",ifunset:"mapcomplete default: enable to filter or to enable/disable layers"},type:"boolean",description:"The corresponding URL-parameter is 'fs-filters' instead of 'fs-layers'"},{path:["enableSearch"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to search for locations?",iftrue:"Allow to search",iffalse:"Do not allow to search; hide the search-bar",ifunset:"MapComplete default: allow to search"},type:"boolean",description:""},{path:["enableAddNewPoints"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to add new points?",iftrue:"Allow to create new points",iffalse:"Do not allow to create new points, even if the layers in this theme support creating new points",ifunset:"MapComplete default: allow to create new points"},type:"boolean",description:`Adding new points is only possible if the loaded layers have presets set.
Some layers do not have presets. If the theme only has layers without presets, then adding new points will not be possible.`},{path:["enableGeolocation"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to use their GPS to geolocate themselfes on the map?",iftrue:"Allow to use the GPS",iffalse:"Do not allow to use the GPS, hide the geolocation-buttons",ifunset:"MapComplete default: allow to use the GPS"},type:"boolean",description:""},{path:["enableBackgroundLayerSelection"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to switch the background layer?",iftrue:"Allow to switch the background layer",iffalse:"Do not allow to switch the background layer",ifunset:"MapComplete default: Allow to switch the background layer"},type:"boolean",description:`Enable switching the backgroundlayer.
If false, the quickswitch-buttons are removed (bottom left) and the dropdown in the layer selection is removed as well`},{path:["enableShowAllQuestions"],required:!1,hints:{group:"feature_switches",question:"Should the questions about a feature be presented one by one or all at once?",iftrue:"Show all unanswered questions at the same time",iffalse:"Show unanswered questions one by one",ifunset:"MapComplete default: Use the preference of the user to show questions at the same time or one by one"},type:"boolean",description:""},{path:["enableDownload"],required:!1,hints:{group:"feature_switches",question:"Should the 'download as CSV'- and 'download as Geojson'-buttons be enabled?",iftrue:"Enable the option to download the map as CSV and GeoJson",iffalse:"Enable the option to download the map as CSV and GeoJson",ifunset:"MapComplete default: Enable the option to download the map as CSV and GeoJson"},type:"boolean",description:""},{path:["enablePdfDownload"],required:!1,hints:{group:"feature_switches",question:"Should the 'download as PDF'-button be enabled?",iftrue:"Enable the option to download the map as PDF",iffalse:"Enable the option to download the map as PDF",ifunset:"MapComplete default: Enable the option to download the map as PDF"},type:"boolean",description:""},{path:["enableNoteImports"],required:!1,hints:{group:"advanced",question:"Should the 'notes' from OpenStreetMap be loaded and parsed for import helper notes?",iftrue:"Load notes and show import notes",iffalse:"Do not load import notes",ifunset:"MapComplete default: do not load import notes for sideloaded themes but do load them for official themes"},type:"boolean",description:`If true, notes will be loaded and parsed. If a note is an import (as created by the import_helper.html-tool from mapcomplete),
these notes will be shown if a relevant layer is present.`},{path:["overpassUrl"],required:!1,hints:{group:"advanced",question:"What overpass-api instance should be used for this layout?",ifunset:"Use the default, builtin collection of overpass instances"},type:"array",description:""},{path:["overpassTimeout"],required:!1,hints:{typehint:"pnat",group:"advanced",question:"After how much seconds should the overpass-query stop?",ifunset:"use the default amount of 30 seconds as timeout"},type:"number",description:`If a query takes too long, the overpass-server will abort.
Once can set the amount of time before overpass gives up here.`},{path:["widenFactor"],required:!1,hints:{},type:"number",description:`When a query is run, the data within bounds of the visible map is loaded.
However, users tend to pan and zoom a lot. It is pretty annoying if every single pan means a reloading of the data.
For this, the bounds are widened in order to make a small pan still within bounds of the loaded data.
IF widenfactor is 1, this feature is disabled. A recommended value is between 1 and 3`},{path:["overpassMaxZoom"],required:!1,hints:{},type:"number",description:`At low zoom levels, overpass is used to query features.
At high zoom level, the OSM api is used to fetch one or more BBOX aligning with a slippy tile.
The overpassMaxZoom controls the flipoverpoint: if the zoom is this or lower, overpass is used.`},{path:["osmApiTileSize"],required:!1,hints:{default:"overpassMaxZoom + 1"},type:"number",description:`When the OSM-api is used to fetch features, it does so in a tiled fashion.
These tiles are using a ceratin zoom level, that can be controlled here`},{path:["enableNodeDatabase"],required:!1,hints:{group:"hidden"},type:"boolean",description:`Enables tracking of all nodes when data is loaded.
This is useful for the 'ImportWay' and 'ConflateWay'-buttons who need this database.
Note: this flag will be automatically set and can thus be ignored.`}],qn=[{path:[],required:!1,hints:{},type:"object",description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`},{path:["mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","alsoShowIf"],required:!1,hints:{},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Also show this 'then'-option if the feature matches these tags.
Ideal for outdated tags.`},{path:["mappings","alsoShowIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","alsoShowIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"},{if:"value=slope",then:"<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["editButtonAriaLabel"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.
In some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).
If the user presses _tab_ again, they'll select the button and have the link read aloud a second time.`},{path:["labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`}];var N={},pt={},We={},rt={exports:{}};/*! https://mths.be/he v1.2.0 by @mathias | MIT license */rt.exports;(function(e,t){(function(n){var i=t,o=e&&e.exports==i&&e,s=typeof b=="object"&&b;(s.global===s||s.window===s)&&(n=s);var a=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,u=/[\x01-\x7F]/g,l=/[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,r=/<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g,p={"­":"shy","‌":"zwnj","‍":"zwj","‎":"lrm","⁣":"ic","⁢":"it","⁡":"af","‏":"rlm","​":"ZeroWidthSpace","⁠":"NoBreak","̑":"DownBreve","⃛":"tdot","⃜":"DotDot","	":"Tab","\n":"NewLine"," ":"puncsp"," ":"MediumSpace"," ":"thinsp"," ":"hairsp"," ":"emsp13"," ":"ensp"," ":"emsp14"," ":"emsp"," ":"numsp"," ":"nbsp","  ":"ThickSpace","‾":"oline",_:"lowbar","‐":"dash","–":"ndash","—":"mdash","―":"horbar",",":"comma",";":"semi","⁏":"bsemi",":":"colon","⩴":"Colone","!":"excl","¡":"iexcl","?":"quest","¿":"iquest",".":"period","‥":"nldr","…":"mldr","·":"middot","'":"apos","‘":"lsquo","’":"rsquo","‚":"sbquo","‹":"lsaquo","›":"rsaquo",'"':"quot","“":"ldquo","”":"rdquo","„":"bdquo","«":"laquo","»":"raquo","(":"lpar",")":"rpar","[":"lsqb","]":"rsqb","{":"lcub","}":"rcub","⌈":"lceil","⌉":"rceil","⌊":"lfloor","⌋":"rfloor","⦅":"lopar","⦆":"ropar","⦋":"lbrke","⦌":"rbrke","⦍":"lbrkslu","⦎":"rbrksld","⦏":"lbrksld","⦐":"rbrkslu","⦑":"langd","⦒":"rangd","⦓":"lparlt","⦔":"rpargt","⦕":"gtlPar","⦖":"ltrPar","⟦":"lobrk","⟧":"robrk","⟨":"lang","⟩":"rang","⟪":"Lang","⟫":"Rang","⟬":"loang","⟭":"roang","❲":"lbbrk","❳":"rbbrk","‖":"Vert","§":"sect","¶":"para","@":"commat","*":"ast","/":"sol",undefined:null,"&":"amp","#":"num","%":"percnt","‰":"permil","‱":"pertenk","†":"dagger","‡":"Dagger","•":"bull","⁃":"hybull","′":"prime","″":"Prime","‴":"tprime","⁗":"qprime","‵":"bprime","⁁":"caret","`":"grave","´":"acute","˜":"tilde","^":"Hat","¯":"macr","˘":"breve","˙":"dot","¨":"die","˚":"ring","˝":"dblac","¸":"cedil","˛":"ogon","ˆ":"circ","ˇ":"caron","°":"deg","©":"copy","®":"reg","℗":"copysr","℘":"wp","℞":"rx","℧":"mho","℩":"iiota","←":"larr","↚":"nlarr","→":"rarr","↛":"nrarr","↑":"uarr","↓":"darr","↔":"harr","↮":"nharr","↕":"varr","↖":"nwarr","↗":"nearr","↘":"searr","↙":"swarr","↝":"rarrw","↝̸":"nrarrw","↞":"Larr","↟":"Uarr","↠":"Rarr","↡":"Darr","↢":"larrtl","↣":"rarrtl","↤":"mapstoleft","↥":"mapstoup","↦":"map","↧":"mapstodown","↩":"larrhk","↪":"rarrhk","↫":"larrlp","↬":"rarrlp","↭":"harrw","↰":"lsh","↱":"rsh","↲":"ldsh","↳":"rdsh","↵":"crarr","↶":"cularr","↷":"curarr","↺":"olarr","↻":"orarr","↼":"lharu","↽":"lhard","↾":"uharr","↿":"uharl","⇀":"rharu","⇁":"rhard","⇂":"dharr","⇃":"dharl","⇄":"rlarr","⇅":"udarr","⇆":"lrarr","⇇":"llarr","⇈":"uuarr","⇉":"rrarr","⇊":"ddarr","⇋":"lrhar","⇌":"rlhar","⇐":"lArr","⇍":"nlArr","⇑":"uArr","⇒":"rArr","⇏":"nrArr","⇓":"dArr","⇔":"iff","⇎":"nhArr","⇕":"vArr","⇖":"nwArr","⇗":"neArr","⇘":"seArr","⇙":"swArr","⇚":"lAarr","⇛":"rAarr","⇝":"zigrarr","⇤":"larrb","⇥":"rarrb","⇵":"duarr","⇽":"loarr","⇾":"roarr","⇿":"hoarr","∀":"forall","∁":"comp","∂":"part","∂̸":"npart","∃":"exist","∄":"nexist","∅":"empty","∇":"Del","∈":"in","∉":"notin","∋":"ni","∌":"notni","϶":"bepsi","∏":"prod","∐":"coprod","∑":"sum","+":"plus","±":"pm","÷":"div","×":"times","<":"lt","≮":"nlt","<⃒":"nvlt","=":"equals","≠":"ne","=⃥":"bne","⩵":"Equal",">":"gt","≯":"ngt",">⃒":"nvgt","¬":"not","|":"vert","¦":"brvbar","−":"minus","∓":"mp","∔":"plusdo","⁄":"frasl","∖":"setmn","∗":"lowast","∘":"compfn","√":"Sqrt","∝":"prop","∞":"infin","∟":"angrt","∠":"ang","∠⃒":"nang","∡":"angmsd","∢":"angsph","∣":"mid","∤":"nmid","∥":"par","∦":"npar","∧":"and","∨":"or","∩":"cap","∩︀":"caps","∪":"cup","∪︀":"cups","∫":"int","∬":"Int","∭":"tint","⨌":"qint","∮":"oint","∯":"Conint","∰":"Cconint","∱":"cwint","∲":"cwconint","∳":"awconint","∴":"there4","∵":"becaus","∶":"ratio","∷":"Colon","∸":"minusd","∺":"mDDot","∻":"homtht","∼":"sim","≁":"nsim","∼⃒":"nvsim","∽":"bsim","∽̱":"race","∾":"ac","∾̳":"acE","∿":"acd","≀":"wr","≂":"esim","≂̸":"nesim","≃":"sime","≄":"nsime","≅":"cong","≇":"ncong","≆":"simne","≈":"ap","≉":"nap","≊":"ape","≋":"apid","≋̸":"napid","≌":"bcong","≍":"CupCap","≭":"NotCupCap","≍⃒":"nvap","≎":"bump","≎̸":"nbump","≏":"bumpe","≏̸":"nbumpe","≐":"doteq","≐̸":"nedot","≑":"eDot","≒":"efDot","≓":"erDot","≔":"colone","≕":"ecolon","≖":"ecir","≗":"cire","≙":"wedgeq","≚":"veeeq","≜":"trie","≟":"equest","≡":"equiv","≢":"nequiv","≡⃥":"bnequiv","≤":"le","≰":"nle","≤⃒":"nvle","≥":"ge","≱":"nge","≥⃒":"nvge","≦":"lE","≦̸":"nlE","≧":"gE","≧̸":"ngE","≨︀":"lvnE","≨":"lnE","≩":"gnE","≩︀":"gvnE","≪":"ll","≪̸":"nLtv","≪⃒":"nLt","≫":"gg","≫̸":"nGtv","≫⃒":"nGt","≬":"twixt","≲":"lsim","≴":"nlsim","≳":"gsim","≵":"ngsim","≶":"lg","≸":"ntlg","≷":"gl","≹":"ntgl","≺":"pr","⊀":"npr","≻":"sc","⊁":"nsc","≼":"prcue","⋠":"nprcue","≽":"sccue","⋡":"nsccue","≾":"prsim","≿":"scsim","≿̸":"NotSucceedsTilde","⊂":"sub","⊄":"nsub","⊂⃒":"vnsub","⊃":"sup","⊅":"nsup","⊃⃒":"vnsup","⊆":"sube","⊈":"nsube","⊇":"supe","⊉":"nsupe","⊊︀":"vsubne","⊊":"subne","⊋︀":"vsupne","⊋":"supne","⊍":"cupdot","⊎":"uplus","⊏":"sqsub","⊏̸":"NotSquareSubset","⊐":"sqsup","⊐̸":"NotSquareSuperset","⊑":"sqsube","⋢":"nsqsube","⊒":"sqsupe","⋣":"nsqsupe","⊓":"sqcap","⊓︀":"sqcaps","⊔":"sqcup","⊔︀":"sqcups","⊕":"oplus","⊖":"ominus","⊗":"otimes","⊘":"osol","⊙":"odot","⊚":"ocir","⊛":"oast","⊝":"odash","⊞":"plusb","⊟":"minusb","⊠":"timesb","⊡":"sdotb","⊢":"vdash","⊬":"nvdash","⊣":"dashv","⊤":"top","⊥":"bot","⊧":"models","⊨":"vDash","⊭":"nvDash","⊩":"Vdash","⊮":"nVdash","⊪":"Vvdash","⊫":"VDash","⊯":"nVDash","⊰":"prurel","⊲":"vltri","⋪":"nltri","⊳":"vrtri","⋫":"nrtri","⊴":"ltrie","⋬":"nltrie","⊴⃒":"nvltrie","⊵":"rtrie","⋭":"nrtrie","⊵⃒":"nvrtrie","⊶":"origof","⊷":"imof","⊸":"mumap","⊹":"hercon","⊺":"intcal","⊻":"veebar","⊽":"barvee","⊾":"angrtvb","⊿":"lrtri","⋀":"Wedge","⋁":"Vee","⋂":"xcap","⋃":"xcup","⋄":"diam","⋅":"sdot","⋆":"Star","⋇":"divonx","⋈":"bowtie","⋉":"ltimes","⋊":"rtimes","⋋":"lthree","⋌":"rthree","⋍":"bsime","⋎":"cuvee","⋏":"cuwed","⋐":"Sub","⋑":"Sup","⋒":"Cap","⋓":"Cup","⋔":"fork","⋕":"epar","⋖":"ltdot","⋗":"gtdot","⋘":"Ll","⋘̸":"nLl","⋙":"Gg","⋙̸":"nGg","⋚︀":"lesg","⋚":"leg","⋛":"gel","⋛︀":"gesl","⋞":"cuepr","⋟":"cuesc","⋦":"lnsim","⋧":"gnsim","⋨":"prnsim","⋩":"scnsim","⋮":"vellip","⋯":"ctdot","⋰":"utdot","⋱":"dtdot","⋲":"disin","⋳":"isinsv","⋴":"isins","⋵":"isindot","⋵̸":"notindot","⋶":"notinvc","⋷":"notinvb","⋹":"isinE","⋹̸":"notinE","⋺":"nisd","⋻":"xnis","⋼":"nis","⋽":"notnivc","⋾":"notnivb","⌅":"barwed","⌆":"Barwed","⌌":"drcrop","⌍":"dlcrop","⌎":"urcrop","⌏":"ulcrop","⌐":"bnot","⌒":"profline","⌓":"profsurf","⌕":"telrec","⌖":"target","⌜":"ulcorn","⌝":"urcorn","⌞":"dlcorn","⌟":"drcorn","⌢":"frown","⌣":"smile","⌭":"cylcty","⌮":"profalar","⌶":"topbot","⌽":"ovbar","⌿":"solbar","⍼":"angzarr","⎰":"lmoust","⎱":"rmoust","⎴":"tbrk","⎵":"bbrk","⎶":"bbrktbrk","⏜":"OverParenthesis","⏝":"UnderParenthesis","⏞":"OverBrace","⏟":"UnderBrace","⏢":"trpezium","⏧":"elinters","␣":"blank","─":"boxh","│":"boxv","┌":"boxdr","┐":"boxdl","└":"boxur","┘":"boxul","├":"boxvr","┤":"boxvl","┬":"boxhd","┴":"boxhu","┼":"boxvh","═":"boxH","║":"boxV","╒":"boxdR","╓":"boxDr","╔":"boxDR","╕":"boxdL","╖":"boxDl","╗":"boxDL","╘":"boxuR","╙":"boxUr","╚":"boxUR","╛":"boxuL","╜":"boxUl","╝":"boxUL","╞":"boxvR","╟":"boxVr","╠":"boxVR","╡":"boxvL","╢":"boxVl","╣":"boxVL","╤":"boxHd","╥":"boxhD","╦":"boxHD","╧":"boxHu","╨":"boxhU","╩":"boxHU","╪":"boxvH","╫":"boxVh","╬":"boxVH","▀":"uhblk","▄":"lhblk","█":"block","░":"blk14","▒":"blk12","▓":"blk34","□":"squ","▪":"squf","▫":"EmptyVerySmallSquare","▭":"rect","▮":"marker","▱":"fltns","△":"xutri","▴":"utrif","▵":"utri","▸":"rtrif","▹":"rtri","▽":"xdtri","▾":"dtrif","▿":"dtri","◂":"ltrif","◃":"ltri","◊":"loz","○":"cir","◬":"tridot","◯":"xcirc","◸":"ultri","◹":"urtri","◺":"lltri","◻":"EmptySmallSquare","◼":"FilledSmallSquare","★":"starf","☆":"star","☎":"phone","♀":"female","♂":"male","♠":"spades","♣":"clubs","♥":"hearts","♦":"diams","♪":"sung","✓":"check","✗":"cross","✠":"malt","✶":"sext","❘":"VerticalSeparator","⟈":"bsolhsub","⟉":"suphsol","⟵":"xlarr","⟶":"xrarr","⟷":"xharr","⟸":"xlArr","⟹":"xrArr","⟺":"xhArr","⟼":"xmap","⟿":"dzigrarr","⤂":"nvlArr","⤃":"nvrArr","⤄":"nvHarr","⤅":"Map","⤌":"lbarr","⤍":"rbarr","⤎":"lBarr","⤏":"rBarr","⤐":"RBarr","⤑":"DDotrahd","⤒":"UpArrowBar","⤓":"DownArrowBar","⤖":"Rarrtl","⤙":"latail","⤚":"ratail","⤛":"lAtail","⤜":"rAtail","⤝":"larrfs","⤞":"rarrfs","⤟":"larrbfs","⤠":"rarrbfs","⤣":"nwarhk","⤤":"nearhk","⤥":"searhk","⤦":"swarhk","⤧":"nwnear","⤨":"toea","⤩":"tosa","⤪":"swnwar","⤳":"rarrc","⤳̸":"nrarrc","⤵":"cudarrr","⤶":"ldca","⤷":"rdca","⤸":"cudarrl","⤹":"larrpl","⤼":"curarrm","⤽":"cularrp","⥅":"rarrpl","⥈":"harrcir","⥉":"Uarrocir","⥊":"lurdshar","⥋":"ldrushar","⥎":"LeftRightVector","⥏":"RightUpDownVector","⥐":"DownLeftRightVector","⥑":"LeftUpDownVector","⥒":"LeftVectorBar","⥓":"RightVectorBar","⥔":"RightUpVectorBar","⥕":"RightDownVectorBar","⥖":"DownLeftVectorBar","⥗":"DownRightVectorBar","⥘":"LeftUpVectorBar","⥙":"LeftDownVectorBar","⥚":"LeftTeeVector","⥛":"RightTeeVector","⥜":"RightUpTeeVector","⥝":"RightDownTeeVector","⥞":"DownLeftTeeVector","⥟":"DownRightTeeVector","⥠":"LeftUpTeeVector","⥡":"LeftDownTeeVector","⥢":"lHar","⥣":"uHar","⥤":"rHar","⥥":"dHar","⥦":"luruhar","⥧":"ldrdhar","⥨":"ruluhar","⥩":"rdldhar","⥪":"lharul","⥫":"llhard","⥬":"rharul","⥭":"lrhard","⥮":"udhar","⥯":"duhar","⥰":"RoundImplies","⥱":"erarr","⥲":"simrarr","⥳":"larrsim","⥴":"rarrsim","⥵":"rarrap","⥶":"ltlarr","⥸":"gtrarr","⥹":"subrarr","⥻":"suplarr","⥼":"lfisht","⥽":"rfisht","⥾":"ufisht","⥿":"dfisht","⦚":"vzigzag","⦜":"vangrt","⦝":"angrtvbd","⦤":"ange","⦥":"range","⦦":"dwangle","⦧":"uwangle","⦨":"angmsdaa","⦩":"angmsdab","⦪":"angmsdac","⦫":"angmsdad","⦬":"angmsdae","⦭":"angmsdaf","⦮":"angmsdag","⦯":"angmsdah","⦰":"bemptyv","⦱":"demptyv","⦲":"cemptyv","⦳":"raemptyv","⦴":"laemptyv","⦵":"ohbar","⦶":"omid","⦷":"opar","⦹":"operp","⦻":"olcross","⦼":"odsold","⦾":"olcir","⦿":"ofcir","⧀":"olt","⧁":"ogt","⧂":"cirscir","⧃":"cirE","⧄":"solb","⧅":"bsolb","⧉":"boxbox","⧍":"trisb","⧎":"rtriltri","⧏":"LeftTriangleBar","⧏̸":"NotLeftTriangleBar","⧐":"RightTriangleBar","⧐̸":"NotRightTriangleBar","⧜":"iinfin","⧝":"infintie","⧞":"nvinfin","⧣":"eparsl","⧤":"smeparsl","⧥":"eqvparsl","⧫":"lozf","⧴":"RuleDelayed","⧶":"dsol","⨀":"xodot","⨁":"xoplus","⨂":"xotime","⨄":"xuplus","⨆":"xsqcup","⨍":"fpartint","⨐":"cirfnint","⨑":"awint","⨒":"rppolint","⨓":"scpolint","⨔":"npolint","⨕":"pointint","⨖":"quatint","⨗":"intlarhk","⨢":"pluscir","⨣":"plusacir","⨤":"simplus","⨥":"plusdu","⨦":"plussim","⨧":"plustwo","⨩":"mcomma","⨪":"minusdu","⨭":"loplus","⨮":"roplus","⨯":"Cross","⨰":"timesd","⨱":"timesbar","⨳":"smashp","⨴":"lotimes","⨵":"rotimes","⨶":"otimesas","⨷":"Otimes","⨸":"odiv","⨹":"triplus","⨺":"triminus","⨻":"tritime","⨼":"iprod","⨿":"amalg","⩀":"capdot","⩂":"ncup","⩃":"ncap","⩄":"capand","⩅":"cupor","⩆":"cupcap","⩇":"capcup","⩈":"cupbrcap","⩉":"capbrcup","⩊":"cupcup","⩋":"capcap","⩌":"ccups","⩍":"ccaps","⩐":"ccupssm","⩓":"And","⩔":"Or","⩕":"andand","⩖":"oror","⩗":"orslope","⩘":"andslope","⩚":"andv","⩛":"orv","⩜":"andd","⩝":"ord","⩟":"wedbar","⩦":"sdote","⩪":"simdot","⩭":"congdot","⩭̸":"ncongdot","⩮":"easter","⩯":"apacir","⩰":"apE","⩰̸":"napE","⩱":"eplus","⩲":"pluse","⩳":"Esim","⩷":"eDDot","⩸":"equivDD","⩹":"ltcir","⩺":"gtcir","⩻":"ltquest","⩼":"gtquest","⩽":"les","⩽̸":"nles","⩾":"ges","⩾̸":"nges","⩿":"lesdot","⪀":"gesdot","⪁":"lesdoto","⪂":"gesdoto","⪃":"lesdotor","⪄":"gesdotol","⪅":"lap","⪆":"gap","⪇":"lne","⪈":"gne","⪉":"lnap","⪊":"gnap","⪋":"lEg","⪌":"gEl","⪍":"lsime","⪎":"gsime","⪏":"lsimg","⪐":"gsiml","⪑":"lgE","⪒":"glE","⪓":"lesges","⪔":"gesles","⪕":"els","⪖":"egs","⪗":"elsdot","⪘":"egsdot","⪙":"el","⪚":"eg","⪝":"siml","⪞":"simg","⪟":"simlE","⪠":"simgE","⪡":"LessLess","⪡̸":"NotNestedLessLess","⪢":"GreaterGreater","⪢̸":"NotNestedGreaterGreater","⪤":"glj","⪥":"gla","⪦":"ltcc","⪧":"gtcc","⪨":"lescc","⪩":"gescc","⪪":"smt","⪫":"lat","⪬":"smte","⪬︀":"smtes","⪭":"late","⪭︀":"lates","⪮":"bumpE","⪯":"pre","⪯̸":"npre","⪰":"sce","⪰̸":"nsce","⪳":"prE","⪴":"scE","⪵":"prnE","⪶":"scnE","⪷":"prap","⪸":"scap","⪹":"prnap","⪺":"scnap","⪻":"Pr","⪼":"Sc","⪽":"subdot","⪾":"supdot","⪿":"subplus","⫀":"supplus","⫁":"submult","⫂":"supmult","⫃":"subedot","⫄":"supedot","⫅":"subE","⫅̸":"nsubE","⫆":"supE","⫆̸":"nsupE","⫇":"subsim","⫈":"supsim","⫋︀":"vsubnE","⫋":"subnE","⫌︀":"vsupnE","⫌":"supnE","⫏":"csub","⫐":"csup","⫑":"csube","⫒":"csupe","⫓":"subsup","⫔":"supsub","⫕":"subsub","⫖":"supsup","⫗":"suphsub","⫘":"supdsub","⫙":"forkv","⫚":"topfork","⫛":"mlcp","⫤":"Dashv","⫦":"Vdashl","⫧":"Barv","⫨":"vBar","⫩":"vBarv","⫫":"Vbar","⫬":"Not","⫭":"bNot","⫮":"rnmid","⫯":"cirmid","⫰":"midcir","⫱":"topcir","⫲":"nhpar","⫳":"parsim","⫽":"parsl","⫽⃥":"nparsl","♭":"flat","♮":"natur","♯":"sharp","¤":"curren","¢":"cent",$:"dollar","£":"pound","¥":"yen","€":"euro","¹":"sup1","½":"half","⅓":"frac13","¼":"frac14","⅕":"frac15","⅙":"frac16","⅛":"frac18","²":"sup2","⅔":"frac23","⅖":"frac25","³":"sup3","¾":"frac34","⅗":"frac35","⅜":"frac38","⅘":"frac45","⅚":"frac56","⅝":"frac58","⅞":"frac78","𝒶":"ascr","𝕒":"aopf","𝔞":"afr","𝔸":"Aopf","𝔄":"Afr","𝒜":"Ascr",ª:"ordf",á:"aacute",Á:"Aacute",à:"agrave",À:"Agrave",ă:"abreve",Ă:"Abreve",â:"acirc",Â:"Acirc",å:"aring",Å:"angst",ä:"auml",Ä:"Auml",ã:"atilde",Ã:"Atilde",ą:"aogon",Ą:"Aogon",ā:"amacr",Ā:"Amacr",æ:"aelig",Æ:"AElig","𝒷":"bscr","𝕓":"bopf","𝔟":"bfr","𝔹":"Bopf",ℬ:"Bscr","𝔅":"Bfr","𝔠":"cfr","𝒸":"cscr","𝕔":"copf",ℭ:"Cfr","𝒞":"Cscr",ℂ:"Copf",ć:"cacute",Ć:"Cacute",ĉ:"ccirc",Ĉ:"Ccirc",č:"ccaron",Č:"Ccaron",ċ:"cdot",Ċ:"Cdot",ç:"ccedil",Ç:"Ccedil","℅":"incare","𝔡":"dfr","ⅆ":"dd","𝕕":"dopf","𝒹":"dscr","𝒟":"Dscr","𝔇":"Dfr","ⅅ":"DD","𝔻":"Dopf",ď:"dcaron",Ď:"Dcaron",đ:"dstrok",Đ:"Dstrok",ð:"eth",Ð:"ETH","ⅇ":"ee",ℯ:"escr","𝔢":"efr","𝕖":"eopf",ℰ:"Escr","𝔈":"Efr","𝔼":"Eopf",é:"eacute",É:"Eacute",è:"egrave",È:"Egrave",ê:"ecirc",Ê:"Ecirc",ě:"ecaron",Ě:"Ecaron",ë:"euml",Ë:"Euml",ė:"edot",Ė:"Edot",ę:"eogon",Ę:"Eogon",ē:"emacr",Ē:"Emacr","𝔣":"ffr","𝕗":"fopf","𝒻":"fscr","𝔉":"Ffr","𝔽":"Fopf",ℱ:"Fscr",ﬀ:"fflig",ﬃ:"ffilig",ﬄ:"ffllig",ﬁ:"filig",fj:"fjlig",ﬂ:"fllig",ƒ:"fnof",ℊ:"gscr","𝕘":"gopf","𝔤":"gfr","𝒢":"Gscr","𝔾":"Gopf","𝔊":"Gfr",ǵ:"gacute",ğ:"gbreve",Ğ:"Gbreve",ĝ:"gcirc",Ĝ:"Gcirc",ġ:"gdot",Ġ:"Gdot",Ģ:"Gcedil","𝔥":"hfr",ℎ:"planckh","𝒽":"hscr","𝕙":"hopf",ℋ:"Hscr",ℌ:"Hfr",ℍ:"Hopf",ĥ:"hcirc",Ĥ:"Hcirc",ℏ:"hbar",ħ:"hstrok",Ħ:"Hstrok","𝕚":"iopf","𝔦":"ifr","𝒾":"iscr","ⅈ":"ii","𝕀":"Iopf",ℐ:"Iscr",ℑ:"Im",í:"iacute",Í:"Iacute",ì:"igrave",Ì:"Igrave",î:"icirc",Î:"Icirc",ï:"iuml",Ï:"Iuml",ĩ:"itilde",Ĩ:"Itilde",İ:"Idot",į:"iogon",Į:"Iogon",ī:"imacr",Ī:"Imacr",ĳ:"ijlig",Ĳ:"IJlig",ı:"imath","𝒿":"jscr","𝕛":"jopf","𝔧":"jfr","𝒥":"Jscr","𝔍":"Jfr","𝕁":"Jopf",ĵ:"jcirc",Ĵ:"Jcirc","ȷ":"jmath","𝕜":"kopf","𝓀":"kscr","𝔨":"kfr","𝒦":"Kscr","𝕂":"Kopf","𝔎":"Kfr",ķ:"kcedil",Ķ:"Kcedil","𝔩":"lfr","𝓁":"lscr",ℓ:"ell","𝕝":"lopf",ℒ:"Lscr","𝔏":"Lfr","𝕃":"Lopf",ĺ:"lacute",Ĺ:"Lacute",ľ:"lcaron",Ľ:"Lcaron",ļ:"lcedil",Ļ:"Lcedil",ł:"lstrok",Ł:"Lstrok",ŀ:"lmidot",Ŀ:"Lmidot","𝔪":"mfr","𝕞":"mopf","𝓂":"mscr","𝔐":"Mfr","𝕄":"Mopf",ℳ:"Mscr","𝔫":"nfr","𝕟":"nopf","𝓃":"nscr",ℕ:"Nopf","𝒩":"Nscr","𝔑":"Nfr",ń:"nacute",Ń:"Nacute",ň:"ncaron",Ň:"Ncaron",ñ:"ntilde",Ñ:"Ntilde",ņ:"ncedil",Ņ:"Ncedil","№":"numero",ŋ:"eng",Ŋ:"ENG","𝕠":"oopf","𝔬":"ofr",ℴ:"oscr","𝒪":"Oscr","𝔒":"Ofr","𝕆":"Oopf",º:"ordm",ó:"oacute",Ó:"Oacute",ò:"ograve",Ò:"Ograve",ô:"ocirc",Ô:"Ocirc",ö:"ouml",Ö:"Ouml",ő:"odblac",Ő:"Odblac",õ:"otilde",Õ:"Otilde",ø:"oslash",Ø:"Oslash",ō:"omacr",Ō:"Omacr",œ:"oelig",Œ:"OElig","𝔭":"pfr","𝓅":"pscr","𝕡":"popf",ℙ:"Popf","𝔓":"Pfr","𝒫":"Pscr","𝕢":"qopf","𝔮":"qfr","𝓆":"qscr","𝒬":"Qscr","𝔔":"Qfr",ℚ:"Qopf",ĸ:"kgreen","𝔯":"rfr","𝕣":"ropf","𝓇":"rscr",ℛ:"Rscr",ℜ:"Re",ℝ:"Ropf",ŕ:"racute",Ŕ:"Racute",ř:"rcaron",Ř:"Rcaron",ŗ:"rcedil",Ŗ:"Rcedil","𝕤":"sopf","𝓈":"sscr","𝔰":"sfr","𝕊":"Sopf","𝔖":"Sfr","𝒮":"Sscr","Ⓢ":"oS",ś:"sacute",Ś:"Sacute",ŝ:"scirc",Ŝ:"Scirc",š:"scaron",Š:"Scaron",ş:"scedil",Ş:"Scedil",ß:"szlig","𝔱":"tfr","𝓉":"tscr","𝕥":"topf","𝒯":"Tscr","𝔗":"Tfr","𝕋":"Topf",ť:"tcaron",Ť:"Tcaron",ţ:"tcedil",Ţ:"Tcedil","™":"trade",ŧ:"tstrok",Ŧ:"Tstrok","𝓊":"uscr","𝕦":"uopf","𝔲":"ufr","𝕌":"Uopf","𝔘":"Ufr","𝒰":"Uscr",ú:"uacute",Ú:"Uacute",ù:"ugrave",Ù:"Ugrave",ŭ:"ubreve",Ŭ:"Ubreve",û:"ucirc",Û:"Ucirc",ů:"uring",Ů:"Uring",ü:"uuml",Ü:"Uuml",ű:"udblac",Ű:"Udblac",ũ:"utilde",Ũ:"Utilde",ų:"uogon",Ų:"Uogon",ū:"umacr",Ū:"Umacr","𝔳":"vfr","𝕧":"vopf","𝓋":"vscr","𝔙":"Vfr","𝕍":"Vopf","𝒱":"Vscr","𝕨":"wopf","𝓌":"wscr","𝔴":"wfr","𝒲":"Wscr","𝕎":"Wopf","𝔚":"Wfr",ŵ:"wcirc",Ŵ:"Wcirc","𝔵":"xfr","𝓍":"xscr","𝕩":"xopf","𝕏":"Xopf","𝔛":"Xfr","𝒳":"Xscr","𝔶":"yfr","𝓎":"yscr","𝕪":"yopf","𝒴":"Yscr","𝔜":"Yfr","𝕐":"Yopf",ý:"yacute",Ý:"Yacute",ŷ:"ycirc",Ŷ:"Ycirc",ÿ:"yuml",Ÿ:"Yuml","𝓏":"zscr","𝔷":"zfr","𝕫":"zopf",ℨ:"Zfr",ℤ:"Zopf","𝒵":"Zscr",ź:"zacute",Ź:"Zacute",ž:"zcaron",Ž:"Zcaron",ż:"zdot",Ż:"Zdot",Ƶ:"imped",þ:"thorn",Þ:"THORN",ŉ:"napos",α:"alpha",Α:"Alpha",β:"beta",Β:"Beta",γ:"gamma",Γ:"Gamma",δ:"delta",Δ:"Delta",ε:"epsi","ϵ":"epsiv",Ε:"Epsilon",ϝ:"gammad",Ϝ:"Gammad",ζ:"zeta",Ζ:"Zeta",η:"eta",Η:"Eta",θ:"theta",ϑ:"thetav",Θ:"Theta",ι:"iota",Ι:"Iota",κ:"kappa",ϰ:"kappav",Κ:"Kappa",λ:"lambda",Λ:"Lambda",μ:"mu",µ:"micro",Μ:"Mu",ν:"nu",Ν:"Nu",ξ:"xi",Ξ:"Xi",ο:"omicron",Ο:"Omicron",π:"pi",ϖ:"piv",Π:"Pi",ρ:"rho",ϱ:"rhov",Ρ:"Rho",σ:"sigma",Σ:"Sigma",ς:"sigmaf",τ:"tau",Τ:"Tau",υ:"upsi",Υ:"Upsilon",ϒ:"Upsi",φ:"phi",ϕ:"phiv",Φ:"Phi",χ:"chi",Χ:"Chi",ψ:"psi",Ψ:"Psi",ω:"omega",Ω:"ohm",а:"acy",А:"Acy",б:"bcy",Б:"Bcy",в:"vcy",В:"Vcy",г:"gcy",Г:"Gcy",ѓ:"gjcy",Ѓ:"GJcy",д:"dcy",Д:"Dcy",ђ:"djcy",Ђ:"DJcy",е:"iecy",Е:"IEcy",ё:"iocy",Ё:"IOcy",є:"jukcy",Є:"Jukcy",ж:"zhcy",Ж:"ZHcy",з:"zcy",З:"Zcy",ѕ:"dscy",Ѕ:"DScy",и:"icy",И:"Icy",і:"iukcy",І:"Iukcy",ї:"yicy",Ї:"YIcy",й:"jcy",Й:"Jcy",ј:"jsercy",Ј:"Jsercy",к:"kcy",К:"Kcy",ќ:"kjcy",Ќ:"KJcy",л:"lcy",Л:"Lcy",љ:"ljcy",Љ:"LJcy",м:"mcy",М:"Mcy",н:"ncy",Н:"Ncy",њ:"njcy",Њ:"NJcy",о:"ocy",О:"Ocy",п:"pcy",П:"Pcy",р:"rcy",Р:"Rcy",с:"scy",С:"Scy",т:"tcy",Т:"Tcy",ћ:"tshcy",Ћ:"TSHcy",у:"ucy",У:"Ucy",ў:"ubrcy",Ў:"Ubrcy",ф:"fcy",Ф:"Fcy",х:"khcy",Х:"KHcy",ц:"tscy",Ц:"TScy",ч:"chcy",Ч:"CHcy",џ:"dzcy",Џ:"DZcy",ш:"shcy",Ш:"SHcy",щ:"shchcy",Щ:"SHCHcy",ъ:"hardcy",Ъ:"HARDcy",ы:"ycy",Ы:"Ycy",ь:"softcy",Ь:"SOFTcy",э:"ecy",Э:"Ecy",ю:"yucy",Ю:"YUcy",я:"yacy",Я:"YAcy",ℵ:"aleph",ℶ:"beth",ℷ:"gimel",ℸ:"daleth"},d=/["&'<>`]/g,f={'"':"&quot;","&":"&amp;","'":"&#x27;","<":"&lt;",">":"&gt;","`":"&#x60;"},h=/&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/,c=/[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,g=/&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g,x={aacute:"á",Aacute:"Á",abreve:"ă",Abreve:"Ă",ac:"∾",acd:"∿",acE:"∾̳",acirc:"â",Acirc:"Â",acute:"´",acy:"а",Acy:"А",aelig:"æ",AElig:"Æ",af:"⁡",afr:"𝔞",Afr:"𝔄",agrave:"à",Agrave:"À",alefsym:"ℵ",aleph:"ℵ",alpha:"α",Alpha:"Α",amacr:"ā",Amacr:"Ā",amalg:"⨿",amp:"&",AMP:"&",and:"∧",And:"⩓",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",aogon:"ą",Aogon:"Ą",aopf:"𝕒",Aopf:"𝔸",ap:"≈",apacir:"⩯",ape:"≊",apE:"⩰",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",aring:"å",Aring:"Å",ascr:"𝒶",Ascr:"𝒜",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",bcy:"б",Bcy:"Б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",beta:"β",Beta:"Β",beth:"ℶ",between:"≬",bfr:"𝔟",Bfr:"𝔅",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bnot:"⌐",bNot:"⫭",bopf:"𝕓",Bopf:"𝔹",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxhD:"╥",boxHd:"╤",boxHD:"╦",boxhu:"┴",boxhU:"╨",boxHu:"╧",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpe:"≏",bumpE:"⪮",bumpeq:"≏",Bumpeq:"≎",cacute:"ć",Cacute:"Ć",cap:"∩",Cap:"⋒",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",ccaron:"č",Ccaron:"Č",ccedil:"ç",Ccedil:"Ç",ccirc:"ĉ",Ccirc:"Ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",cdot:"ċ",Cdot:"Ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",chcy:"ч",CHcy:"Ч",check:"✓",checkmark:"✓",chi:"χ",Chi:"Χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cire:"≗",cirE:"⧃",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",colone:"≔",Colone:"⩴",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",cscr:"𝒸",Cscr:"𝒞",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cup:"∪",Cup:"⋓",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",dArr:"⇓",Darr:"↡",dash:"‐",dashv:"⊣",Dashv:"⫤",dbkarow:"⤏",dblac:"˝",dcaron:"ď",Dcaron:"Ď",dcy:"д",Dcy:"Д",dd:"ⅆ",DD:"ⅅ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",delta:"δ",Delta:"Δ",demptyv:"⦱",dfisht:"⥿",dfr:"𝔡",Dfr:"𝔇",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",djcy:"ђ",DJcy:"Ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",dopf:"𝕕",Dopf:"𝔻",dot:"˙",Dot:"¨",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",downarrow:"↓",Downarrow:"⇓",DownArrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",dscr:"𝒹",Dscr:"𝒟",dscy:"ѕ",DScy:"Ѕ",dsol:"⧶",dstrok:"đ",Dstrok:"Đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",dzcy:"џ",DZcy:"Џ",dzigrarr:"⟿",eacute:"é",Eacute:"É",easter:"⩮",ecaron:"ě",Ecaron:"Ě",ecir:"≖",ecirc:"ê",Ecirc:"Ê",ecolon:"≕",ecy:"э",Ecy:"Э",eDDot:"⩷",edot:"ė",eDot:"≑",Edot:"Ė",ee:"ⅇ",efDot:"≒",efr:"𝔢",Efr:"𝔈",eg:"⪚",egrave:"è",Egrave:"È",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",emacr:"ē",Emacr:"Ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",eng:"ŋ",ENG:"Ŋ",ensp:" ",eogon:"ę",Eogon:"Ę",eopf:"𝕖",Eopf:"𝔼",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",epsilon:"ε",Epsilon:"Ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",esim:"≂",Esim:"⩳",eta:"η",Eta:"Η",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",fcy:"ф",Fcy:"Ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",ffr:"𝔣",Ffr:"𝔉",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",fopf:"𝕗",Fopf:"𝔽",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",gamma:"γ",Gamma:"Γ",gammad:"ϝ",Gammad:"Ϝ",gap:"⪆",gbreve:"ğ",Gbreve:"Ğ",Gcedil:"Ģ",gcirc:"ĝ",Gcirc:"Ĝ",gcy:"г",Gcy:"Г",gdot:"ġ",Gdot:"Ġ",ge:"≥",gE:"≧",gel:"⋛",gEl:"⪌",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",gfr:"𝔤",Gfr:"𝔊",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",gjcy:"ѓ",GJcy:"Ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",gopf:"𝕘",Gopf:"𝔾",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",gscr:"ℊ",Gscr:"𝒢",gsim:"≳",gsime:"⪎",gsiml:"⪐",gt:">",Gt:"≫",GT:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",hardcy:"ъ",HARDcy:"Ъ",harr:"↔",hArr:"⇔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",hcirc:"ĥ",Hcirc:"Ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",hstrok:"ħ",Hstrok:"Ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",iacute:"í",Iacute:"Í",ic:"⁣",icirc:"î",Icirc:"Î",icy:"и",Icy:"И",Idot:"İ",iecy:"е",IEcy:"Е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",igrave:"ì",Igrave:"Ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",ijlig:"ĳ",IJlig:"Ĳ",Im:"ℑ",imacr:"ī",Imacr:"Ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",int:"∫",Int:"∬",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",iocy:"ё",IOcy:"Ё",iogon:"į",Iogon:"Į",iopf:"𝕚",Iopf:"𝕀",iota:"ι",Iota:"Ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",itilde:"ĩ",Itilde:"Ĩ",iukcy:"і",Iukcy:"І",iuml:"ï",Iuml:"Ï",jcirc:"ĵ",Jcirc:"Ĵ",jcy:"й",Jcy:"Й",jfr:"𝔧",Jfr:"𝔍",jmath:"ȷ",jopf:"𝕛",Jopf:"𝕁",jscr:"𝒿",Jscr:"𝒥",jsercy:"ј",Jsercy:"Ј",jukcy:"є",Jukcy:"Є",kappa:"κ",Kappa:"Κ",kappav:"ϰ",kcedil:"ķ",Kcedil:"Ķ",kcy:"к",Kcy:"К",kfr:"𝔨",Kfr:"𝔎",kgreen:"ĸ",khcy:"х",KHcy:"Х",kjcy:"ќ",KJcy:"Ќ",kopf:"𝕜",Kopf:"𝕂",kscr:"𝓀",Kscr:"𝒦",lAarr:"⇚",lacute:"ĺ",Lacute:"Ĺ",laemptyv:"⦴",lagran:"ℒ",lambda:"λ",Lambda:"Λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larr:"←",lArr:"⇐",Larr:"↞",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",latail:"⤙",lAtail:"⤛",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",lcaron:"ľ",Lcaron:"Ľ",lcedil:"ļ",Lcedil:"Ļ",lceil:"⌈",lcub:"{",lcy:"л",Lcy:"Л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",leftarrow:"←",Leftarrow:"⇐",LeftArrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",Leftrightarrow:"⇔",LeftRightArrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",leg:"⋚",lEg:"⪋",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",lfr:"𝔩",Lfr:"𝔏",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",ljcy:"љ",LJcy:"Љ",ll:"≪",Ll:"⋘",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",lmidot:"ŀ",Lmidot:"Ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",Longleftarrow:"⟸",LongLeftArrow:"⟵",longleftrightarrow:"⟷",Longleftrightarrow:"⟺",LongLeftRightArrow:"⟷",longmapsto:"⟼",longrightarrow:"⟶",Longrightarrow:"⟹",LongRightArrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",lopf:"𝕝",Lopf:"𝕃",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",lstrok:"ł",Lstrok:"Ł",lt:"<",Lt:"≪",LT:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",map:"↦",Map:"⤅",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",mcy:"м",Mcy:"М",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",mfr:"𝔪",Mfr:"𝔐",mho:"℧",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",mopf:"𝕞",Mopf:"𝕄",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",mu:"μ",Mu:"Μ",multimap:"⊸",mumap:"⊸",nabla:"∇",nacute:"ń",Nacute:"Ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",ncaron:"ň",Ncaron:"Ň",ncedil:"ņ",Ncedil:"Ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",ncy:"н",Ncy:"Н",ndash:"–",ne:"≠",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:`
`,nexist:"∄",nexists:"∄",nfr:"𝔫",Nfr:"𝔑",nge:"≱",ngE:"≧̸",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",ngt:"≯",nGt:"≫⃒",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",njcy:"њ",NJcy:"Њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nle:"≰",nlE:"≦̸",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nlt:"≮",nLt:"≪⃒",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",not:"¬",Not:"⫬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrarr:"↛",nrArr:"⇏",nrarrc:"⤳̸",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",nscr:"𝓃",Nscr:"𝒩",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsube:"⊈",nsubE:"⫅̸",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupe:"⊉",nsupE:"⫆̸",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",ntilde:"ñ",Ntilde:"Ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",nu:"ν",Nu:"Ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",oacute:"ó",Oacute:"Ó",oast:"⊛",ocir:"⊚",ocirc:"ô",Ocirc:"Ô",ocy:"о",Ocy:"О",odash:"⊝",odblac:"ő",Odblac:"Ő",odiv:"⨸",odot:"⊙",odsold:"⦼",oelig:"œ",OElig:"Œ",ofcir:"⦿",ofr:"𝔬",Ofr:"𝔒",ogon:"˛",ograve:"ò",Ograve:"Ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",omacr:"ō",Omacr:"Ō",omega:"ω",Omega:"Ω",omicron:"ο",Omicron:"Ο",omid:"⦶",ominus:"⊖",oopf:"𝕠",Oopf:"𝕆",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",or:"∨",Or:"⩔",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",oscr:"ℴ",Oscr:"𝒪",oslash:"ø",Oslash:"Ø",osol:"⊘",otilde:"õ",Otilde:"Õ",otimes:"⊗",Otimes:"⨷",otimesas:"⨶",ouml:"ö",Ouml:"Ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",pcy:"п",Pcy:"П",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",pfr:"𝔭",Pfr:"𝔓",phi:"φ",Phi:"Φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",pi:"π",Pi:"Π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",pr:"≺",Pr:"⪻",prap:"⪷",prcue:"≼",pre:"⪯",prE:"⪳",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",pscr:"𝓅",Pscr:"𝒫",psi:"ψ",Psi:"Ψ",puncsp:" ",qfr:"𝔮",Qfr:"𝔔",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",qscr:"𝓆",Qscr:"𝒬",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",racute:"ŕ",Racute:"Ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarr:"→",rArr:"⇒",Rarr:"↠",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",rarrtl:"↣",Rarrtl:"⤖",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",rcaron:"ř",Rcaron:"Ř",rcedil:"ŗ",Rcedil:"Ŗ",rceil:"⌉",rcub:"}",rcy:"р",Rcy:"Р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",rho:"ρ",Rho:"Ρ",rhov:"ϱ",RightAngleBracket:"⟩",rightarrow:"→",Rightarrow:"⇒",RightArrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",sacute:"ś",Sacute:"Ś",sbquo:"‚",sc:"≻",Sc:"⪼",scap:"⪸",scaron:"š",Scaron:"Š",sccue:"≽",sce:"⪰",scE:"⪴",scedil:"ş",Scedil:"Ş",scirc:"ŝ",Scirc:"Ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",scy:"с",Scy:"С",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",sfr:"𝔰",Sfr:"𝔖",sfrown:"⌢",sharp:"♯",shchcy:"щ",SHCHcy:"Щ",shcy:"ш",SHcy:"Ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",sigma:"σ",Sigma:"Σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",softcy:"ь",SOFTcy:"Ь",sol:"/",solb:"⧄",solbar:"⌿",sopf:"𝕤",Sopf:"𝕊",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",sscr:"𝓈",Sscr:"𝒮",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",star:"☆",Star:"⋆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",sube:"⊆",subE:"⫅",subedot:"⫃",submult:"⫁",subne:"⊊",subnE:"⫋",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup:"⊃",Sup:"⋑",sup1:"¹",sup2:"²",sup3:"³",supdot:"⪾",supdsub:"⫘",supe:"⊇",supE:"⫆",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supne:"⊋",supnE:"⫌",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"	",target:"⌖",tau:"τ",Tau:"Τ",tbrk:"⎴",tcaron:"ť",Tcaron:"Ť",tcedil:"ţ",Tcedil:"Ţ",tcy:"т",Tcy:"Т",tdot:"⃛",telrec:"⌕",tfr:"𝔱",Tfr:"𝔗",there4:"∴",therefore:"∴",Therefore:"∴",theta:"θ",Theta:"Θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",thorn:"þ",THORN:"Þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",topf:"𝕥",Topf:"𝕋",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",tscr:"𝓉",Tscr:"𝒯",tscy:"ц",TScy:"Ц",tshcy:"ћ",TSHcy:"Ћ",tstrok:"ŧ",Tstrok:"Ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",uacute:"ú",Uacute:"Ú",uarr:"↑",uArr:"⇑",Uarr:"↟",Uarrocir:"⥉",ubrcy:"ў",Ubrcy:"Ў",ubreve:"ŭ",Ubreve:"Ŭ",ucirc:"û",Ucirc:"Û",ucy:"у",Ucy:"У",udarr:"⇅",udblac:"ű",Udblac:"Ű",udhar:"⥮",ufisht:"⥾",ufr:"𝔲",Ufr:"𝔘",ugrave:"ù",Ugrave:"Ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",umacr:"ū",Umacr:"Ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",uogon:"ų",Uogon:"Ų",uopf:"𝕦",Uopf:"𝕌",uparrow:"↑",Uparrow:"⇑",UpArrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",updownarrow:"↕",Updownarrow:"⇕",UpDownArrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",upsilon:"υ",Upsilon:"Υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",uring:"ů",Uring:"Ů",urtri:"◹",uscr:"𝓊",Uscr:"𝒰",utdot:"⋰",utilde:"ũ",Utilde:"Ũ",utri:"▵",utrif:"▴",uuarr:"⇈",uuml:"ü",Uuml:"Ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",vcy:"в",Vcy:"В",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",vee:"∨",Vee:"⋁",veebar:"⊻",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",vfr:"𝔳",Vfr:"𝔙",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",vopf:"𝕧",Vopf:"𝕍",vprop:"∝",vrtri:"⊳",vscr:"𝓋",Vscr:"𝒱",vsubne:"⊊︀",vsubnE:"⫋︀",vsupne:"⊋︀",vsupnE:"⫌︀",Vvdash:"⊪",vzigzag:"⦚",wcirc:"ŵ",Wcirc:"Ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",wfr:"𝔴",Wfr:"𝔚",wopf:"𝕨",Wopf:"𝕎",wp:"℘",wr:"≀",wreath:"≀",wscr:"𝓌",Wscr:"𝒲",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",xfr:"𝔵",Xfr:"𝔛",xharr:"⟷",xhArr:"⟺",xi:"ξ",Xi:"Ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",xopf:"𝕩",Xopf:"𝕏",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",xscr:"𝓍",Xscr:"𝒳",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",yacute:"ý",Yacute:"Ý",yacy:"я",YAcy:"Я",ycirc:"ŷ",Ycirc:"Ŷ",ycy:"ы",Ycy:"Ы",yen:"¥",yfr:"𝔶",Yfr:"𝔜",yicy:"ї",YIcy:"Ї",yopf:"𝕪",Yopf:"𝕐",yscr:"𝓎",Yscr:"𝒴",yucy:"ю",YUcy:"Ю",yuml:"ÿ",Yuml:"Ÿ",zacute:"ź",Zacute:"Ź",zcaron:"ž",Zcaron:"Ž",zcy:"з",Zcy:"З",zdot:"ż",Zdot:"Ż",zeetrf:"ℨ",ZeroWidthSpace:"​",zeta:"ζ",Zeta:"Ζ",zfr:"𝔷",Zfr:"ℨ",zhcy:"ж",ZHcy:"Ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",zscr:"𝓏",Zscr:"𝒵",zwj:"‍",zwnj:"‌"},q={aacute:"á",Aacute:"Á",acirc:"â",Acirc:"Â",acute:"´",aelig:"æ",AElig:"Æ",agrave:"à",Agrave:"À",amp:"&",AMP:"&",aring:"å",Aring:"Å",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",brvbar:"¦",ccedil:"ç",Ccedil:"Ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",Eacute:"É",ecirc:"ê",Ecirc:"Ê",egrave:"è",Egrave:"È",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",iacute:"í",Iacute:"Í",icirc:"î",Icirc:"Î",iexcl:"¡",igrave:"ì",Igrave:"Ì",iquest:"¿",iuml:"ï",Iuml:"Ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",Ntilde:"Ñ",oacute:"ó",Oacute:"Ó",ocirc:"ô",Ocirc:"Ô",ograve:"ò",Ograve:"Ò",ordf:"ª",ordm:"º",oslash:"ø",Oslash:"Ø",otilde:"õ",Otilde:"Õ",ouml:"ö",Ouml:"Ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",THORN:"Þ",times:"×",uacute:"ú",Uacute:"Ú",ucirc:"û",Ucirc:"Û",ugrave:"ù",Ugrave:"Ù",uml:"¨",uuml:"ü",Uuml:"Ü",yacute:"ý",Yacute:"Ý",yen:"¥",yuml:"ÿ"},m={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"},v=[1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65e3,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111],w=String.fromCharCode,y={},_=y.hasOwnProperty,D=function(T,k){return _.call(T,k)},R=function(T,k){for(var j=-1,F=T.length;++j<F;)if(T[j]==k)return!0;return!1},Y=function(T,k){if(!T)return k;var j={},F;for(F in k)j[F]=D(T,F)?T[F]:k[F];return j},we=function(T,k){var j="";return T>=55296&&T<=57343||T>1114111?(k&&I("character reference outside the permissible Unicode range"),"�"):D(m,T)?(k&&I("disallowed character reference"),m[T]):(k&&R(v,T)&&I("disallowed character reference"),T>65535&&(T-=65536,j+=w(T>>>10&1023|55296),T=56320|T&1023),j+=w(T),j)},U=function(T){return"&#x"+T.toString(16).toUpperCase()+";"},K=function(T){return"&#"+T+";"},I=function(T){throw Error("Parse error: "+T)},W=function(T,k){k=Y(k,W.options);var j=k.strict;j&&c.test(T)&&I("forbidden code point");var F=k.encodeEverything,X=k.useNamedReferences,te=k.allowUnsafeSymbols,Te=k.decimal?K:U,J=function(E){return Te(E.charCodeAt(0))};return F?(T=T.replace(u,function(E){return X&&D(p,E)?"&"+p[E]+";":J(E)}),X&&(T=T.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;").replace(/&#x66;&#x6A;/g,"&fjlig;")),X&&(T=T.replace(r,function(E){return"&"+p[E]+";"}))):X?(te||(T=T.replace(d,function(E){return"&"+p[E]+";"})),T=T.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;"),T=T.replace(r,function(E){return"&"+p[E]+";"})):te||(T=T.replace(d,J)),T.replace(a,function(E){var Ye=E.charCodeAt(0),Dt=E.charCodeAt(1),sn=(Ye-55296)*1024+Dt-56320+65536;return Te(sn)}).replace(l,J)};W.options={allowUnsafeSymbols:!1,encodeEverything:!1,strict:!1,useNamedReferences:!1,decimal:!1};var ee=function(T,k){k=Y(k,ee.options);var j=k.strict;return j&&h.test(T)&&I("malformed character reference"),T.replace(g,function(F,X,te,Te,J,E,Ye,Dt,sn){var Ke,et,an,rn,tt,nt;return X?(tt=X,x[tt]):te?(tt=te,nt=Te,nt&&k.isAttributeValue?(j&&nt=="="&&I("`&` did not start a character reference"),F):(j&&I("named character reference was not terminated by a semicolon"),q[tt]+(nt||""))):J?(an=J,et=E,j&&!et&&I("character reference was not terminated by a semicolon"),Ke=parseInt(an,10),we(Ke,j)):Ye?(rn=Ye,et=Dt,j&&!et&&I("character reference was not terminated by a semicolon"),Ke=parseInt(rn,16),we(Ke,j)):(j&&I("named character reference was not terminated by a semicolon"),F)})};ee.options={isAttributeValue:!1,strict:!1};var Q=function(T){return T.replace(d,function(k){return f[k]})},ve={version:"1.2.0",encode:W,decode:ee,escape:Q,unescape:ee};if(i&&!i.nodeType)if(o)o.exports=ve;else for(var oe in ve)D(ve,oe)&&(i[oe]=ve[oe]);else n.he=ve})(b)})(rt,rt.exports);var Ht=rt.exports;Object.defineProperty(We,"__esModule",{value:!0});var un=Ht,Gi=function(){function e(t,n){t===void 0&&(t=null),this.parentNode=t,this.childNodes=[],Object.defineProperty(this,"range",{enumerable:!1,writable:!0,configurable:!0,value:n??[-1,-1]})}return e.prototype.remove=function(){var t=this;if(this.parentNode){var n=this.parentNode.childNodes;this.parentNode.childNodes=n.filter(function(i){return t!==i}),this.parentNode=null}return this},Object.defineProperty(e.prototype,"innerText",{get:function(){return this.rawText},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"textContent",{get:function(){return(0,un.decode)(this.rawText)},set:function(t){this.rawText=(0,un.encode)(t)},enumerable:!1,configurable:!0}),e}();We.default=Gi;var Ce={};Object.defineProperty(Ce,"__esModule",{value:!0});var Et;(function(e){e[e.ELEMENT_NODE=1]="ELEMENT_NODE",e[e.TEXT_NODE=3]="TEXT_NODE",e[e.COMMENT_NODE=8]="COMMENT_NODE"})(Et||(Et={}));Ce.default=Et;var Qi=b&&b.__extends||function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,o){i.__proto__=o}||function(i,o){for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&(i[s]=o[s])},e(t,n)};return function(t,n){if(typeof n!="function"&&n!==null)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");e(t,n);function i(){this.constructor=t}t.prototype=n===null?Object.create(n):(i.prototype=n.prototype,new i)}}(),xn=b&&b.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(pt,"__esModule",{value:!0});var Xi=xn(We),Zi=xn(Ce),Yi=function(e){Qi(t,e);function t(n,i,o){var s=e.call(this,i,o)||this;return s.rawText=n,s.nodeType=Zi.default.COMMENT_NODE,s}return t.prototype.clone=function(){return new t(this.rawText,null)},Object.defineProperty(t.prototype,"text",{get:function(){return this.rawText},enumerable:!1,configurable:!0}),t.prototype.toString=function(){return"<!--".concat(this.rawText,"-->")},t}(Xi.default);pt.default=Yi;var de={},_n={},An={},z={},De={},ct={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.Doctype=e.CDATA=e.Tag=e.Style=e.Script=e.Comment=e.Directive=e.Text=e.Root=e.isTag=e.ElementType=void 0;var t;(function(i){i.Root="root",i.Text="text",i.Directive="directive",i.Comment="comment",i.Script="script",i.Style="style",i.Tag="tag",i.CDATA="cdata",i.Doctype="doctype"})(t=e.ElementType||(e.ElementType={}));function n(i){return i.type===t.Tag||i.type===t.Script||i.type===t.Style}e.isTag=n,e.Root=t.Root,e.Text=t.Text,e.Directive=t.Directive,e.Comment=t.Comment,e.Script=t.Script,e.Style=t.Style,e.Tag=t.Tag,e.CDATA=t.CDATA,e.Doctype=t.Doctype})(ct);var A={},be=b&&b.__extends||function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,o){i.__proto__=o}||function(i,o){for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&(i[s]=o[s])},e(t,n)};return function(t,n){if(typeof n!="function"&&n!==null)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");e(t,n);function i(){this.constructor=t}t.prototype=n===null?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ue=b&&b.__assign||function(){return Ue=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},Ue.apply(this,arguments)};Object.defineProperty(A,"__esModule",{value:!0});A.cloneNode=A.hasChildren=A.isDocument=A.isDirective=A.isComment=A.isText=A.isCDATA=A.isTag=A.Element=A.Document=A.CDATA=A.NodeWithChildren=A.ProcessingInstruction=A.Comment=A.Text=A.DataNode=A.Node=void 0;var P=ct,Pt=function(){function e(){this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}return Object.defineProperty(e.prototype,"parentNode",{get:function(){return this.parent},set:function(t){this.parent=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){return this.prev},set:function(t){this.prev=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){return this.next},set:function(t){this.next=t},enumerable:!1,configurable:!0}),e.prototype.cloneNode=function(t){return t===void 0&&(t=!1),Ut(this,t)},e}();A.Node=Pt;var gt=function(e){be(t,e);function t(n){var i=e.call(this)||this;return i.data=n,i}return Object.defineProperty(t.prototype,"nodeValue",{get:function(){return this.data},set:function(n){this.data=n},enumerable:!1,configurable:!0}),t}(Pt);A.DataNode=gt;var Cn=function(e){be(t,e);function t(){var n=e!==null&&e.apply(this,arguments)||this;return n.type=P.ElementType.Text,n}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 3},enumerable:!1,configurable:!0}),t}(gt);A.Text=Cn;var Dn=function(e){be(t,e);function t(){var n=e!==null&&e.apply(this,arguments)||this;return n.type=P.ElementType.Comment,n}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 8},enumerable:!1,configurable:!0}),t}(gt);A.Comment=Dn;var kn=function(e){be(t,e);function t(n,i){var o=e.call(this,i)||this;return o.name=n,o.type=P.ElementType.Directive,o}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),t}(gt);A.ProcessingInstruction=kn;var ft=function(e){be(t,e);function t(n){var i=e.call(this)||this;return i.children=n,i}return Object.defineProperty(t.prototype,"firstChild",{get:function(){var n;return(n=this.children[0])!==null&&n!==void 0?n:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastChild",{get:function(){return this.children.length>0?this.children[this.children.length-1]:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"childNodes",{get:function(){return this.children},set:function(n){this.children=n},enumerable:!1,configurable:!0}),t}(Pt);A.NodeWithChildren=ft;var Rn=function(e){be(t,e);function t(){var n=e!==null&&e.apply(this,arguments)||this;return n.type=P.ElementType.CDATA,n}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 4},enumerable:!1,configurable:!0}),t}(ft);A.CDATA=Rn;var Sn=function(e){be(t,e);function t(){var n=e!==null&&e.apply(this,arguments)||this;return n.type=P.ElementType.Root,n}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 9},enumerable:!1,configurable:!0}),t}(ft);A.Document=Sn;var jn=function(e){be(t,e);function t(n,i,o,s){o===void 0&&(o=[]),s===void 0&&(s=n==="script"?P.ElementType.Script:n==="style"?P.ElementType.Style:P.ElementType.Tag);var a=e.call(this,o)||this;return a.name=n,a.attribs=i,a.type=s,a}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tagName",{get:function(){return this.name},set:function(n){this.name=n},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){var n=this;return Object.keys(this.attribs).map(function(i){var o,s;return{name:i,value:n.attribs[i],namespace:(o=n["x-attribsNamespace"])===null||o===void 0?void 0:o[i],prefix:(s=n["x-attribsPrefix"])===null||s===void 0?void 0:s[i]}})},enumerable:!1,configurable:!0}),t}(ft);A.Element=jn;function $n(e){return(0,P.isTag)(e)}A.isTag=$n;function In(e){return e.type===P.ElementType.CDATA}A.isCDATA=In;function En(e){return e.type===P.ElementType.Text}A.isText=En;function Jn(e){return e.type===P.ElementType.Comment}A.isComment=Jn;function Mn(e){return e.type===P.ElementType.Directive}A.isDirective=Mn;function Nn(e){return e.type===P.ElementType.Root}A.isDocument=Nn;function Ki(e){return Object.prototype.hasOwnProperty.call(e,"children")}A.hasChildren=Ki;function Ut(e,t){t===void 0&&(t=!1);var n;if(En(e))n=new Cn(e.data);else if(Jn(e))n=new Dn(e.data);else if($n(e)){var i=t?kt(e.children):[],o=new jn(e.name,Ue({},e.attribs),i);i.forEach(function(l){return l.parent=o}),e.namespace!=null&&(o.namespace=e.namespace),e["x-attribsNamespace"]&&(o["x-attribsNamespace"]=Ue({},e["x-attribsNamespace"])),e["x-attribsPrefix"]&&(o["x-attribsPrefix"]=Ue({},e["x-attribsPrefix"])),n=o}else if(In(e)){var i=t?kt(e.children):[],s=new Rn(i);i.forEach(function(r){return r.parent=s}),n=s}else if(Nn(e)){var i=t?kt(e.children):[],a=new Sn(i);i.forEach(function(r){return r.parent=a}),e["x-mode"]&&(a["x-mode"]=e["x-mode"]),n=a}else if(Mn(e)){var u=new kn(e.name,e.data);e["x-name"]!=null&&(u["x-name"]=e["x-name"],u["x-publicId"]=e["x-publicId"],u["x-systemId"]=e["x-systemId"]),n=u}else throw new Error("Not implemented yet: ".concat(e.type));return n.startIndex=e.startIndex,n.endIndex=e.endIndex,e.sourceCodeLocation!=null&&(n.sourceCodeLocation=e.sourceCodeLocation),n}A.cloneNode=Ut;function kt(e){for(var t=e.map(function(i){return Ut(i,!0)}),n=1;n<t.length;n++)t[n].prev=t[n-1],t[n-1].next=t[n];return t}(function(e){var t=b&&b.__createBinding||(Object.create?function(u,l,r,p){p===void 0&&(p=r);var d=Object.getOwnPropertyDescriptor(l,r);(!d||("get"in d?!l.__esModule:d.writable||d.configurable))&&(d={enumerable:!0,get:function(){return l[r]}}),Object.defineProperty(u,p,d)}:function(u,l,r,p){p===void 0&&(p=r),u[p]=l[r]}),n=b&&b.__exportStar||function(u,l){for(var r in u)r!=="default"&&!Object.prototype.hasOwnProperty.call(l,r)&&t(l,u,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.DomHandler=void 0;var i=ct,o=A;n(A,e);var s={withStartIndices:!1,withEndIndices:!1,xmlMode:!1},a=function(){function u(l,r,p){this.dom=[],this.root=new o.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,typeof r=="function"&&(p=r,r=s),typeof l=="object"&&(r=l,l=void 0),this.callback=l??null,this.options=r??s,this.elementCB=p??null}return u.prototype.onparserinit=function(l){this.parser=l},u.prototype.onreset=function(){this.dom=[],this.root=new o.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null},u.prototype.onend=function(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))},u.prototype.onerror=function(l){this.handleCallback(l)},u.prototype.onclosetag=function(){this.lastNode=null;var l=this.tagStack.pop();this.options.withEndIndices&&(l.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(l)},u.prototype.onopentag=function(l,r){var p=this.options.xmlMode?i.ElementType.Tag:void 0,d=new o.Element(l,r,void 0,p);this.addNode(d),this.tagStack.push(d)},u.prototype.ontext=function(l){var r=this.lastNode;if(r&&r.type===i.ElementType.Text)r.data+=l,this.options.withEndIndices&&(r.endIndex=this.parser.endIndex);else{var p=new o.Text(l);this.addNode(p),this.lastNode=p}},u.prototype.oncomment=function(l){if(this.lastNode&&this.lastNode.type===i.ElementType.Comment){this.lastNode.data+=l;return}var r=new o.Comment(l);this.addNode(r),this.lastNode=r},u.prototype.oncommentend=function(){this.lastNode=null},u.prototype.oncdatastart=function(){var l=new o.Text(""),r=new o.CDATA([l]);this.addNode(r),l.parent=r,this.lastNode=l},u.prototype.oncdataend=function(){this.lastNode=null},u.prototype.onprocessinginstruction=function(l,r){var p=new o.ProcessingInstruction(l,r);this.addNode(p)},u.prototype.handleCallback=function(l){if(typeof this.callback=="function")this.callback(l,this.dom);else if(l)throw l},u.prototype.addNode=function(l){var r=this.tagStack[this.tagStack.length-1],p=r.children[r.children.length-1];this.options.withStartIndices&&(l.startIndex=this.parser.startIndex),this.options.withEndIndices&&(l.endIndex=this.parser.endIndex),r.children.push(l),p&&(l.prev=p,p.next=l),l.parent=r,this.lastNode=null},u}();e.DomHandler=a,e.default=a})(De);var Ge={},Wn={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.Doctype=e.CDATA=e.Tag=e.Style=e.Script=e.Comment=e.Directive=e.Text=e.Root=e.isTag=e.ElementType=void 0;var t;(function(i){i.Root="root",i.Text="text",i.Directive="directive",i.Comment="comment",i.Script="script",i.Style="style",i.Tag="tag",i.CDATA="cdata",i.Doctype="doctype"})(t=e.ElementType||(e.ElementType={}));function n(i){return i.type===t.Tag||i.type===t.Script||i.type===t.Style}e.isTag=n,e.Root=t.Root,e.Text=t.Text,e.Directive=t.Directive,e.Comment=t.Comment,e.Script=t.Script,e.Style=t.Style,e.Tag=t.Tag,e.CDATA=t.CDATA,e.Doctype=t.Doctype})(Wn);var Bn={},Jt={},Vt={};Object.defineProperty(Vt,"__esModule",{value:!0});Vt.default=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map(function(e){return e.charCodeAt(0)}));var zt={};Object.defineProperty(zt,"__esModule",{value:!0});zt.default=new Uint16Array("Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map(function(e){return e.charCodeAt(0)}));var Mt={};(function(e){var t;Object.defineProperty(e,"__esModule",{value:!0}),e.replaceCodePoint=e.fromCodePoint=void 0;var n=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]);e.fromCodePoint=(t=String.fromCodePoint)!==null&&t!==void 0?t:function(s){var a="";return s>65535&&(s-=65536,a+=String.fromCharCode(s>>>10&1023|55296),s=56320|s&1023),a+=String.fromCharCode(s),a};function i(s){var a;return s>=55296&&s<=57343||s>1114111?65533:(a=n.get(s))!==null&&a!==void 0?a:s}e.replaceCodePoint=i;function o(s){return(0,e.fromCodePoint)(i(s))}e.default=o})(Mt);(function(e){var t=b&&b.__importDefault||function(g){return g&&g.__esModule?g:{default:g}};Object.defineProperty(e,"__esModule",{value:!0}),e.decodeXML=e.decodeHTMLStrict=e.decodeHTML=e.determineBranch=e.BinTrieFlags=e.fromCodePoint=e.replaceCodePoint=e.decodeCodePoint=e.xmlDecodeTree=e.htmlDecodeTree=void 0;var n=t(Vt);e.htmlDecodeTree=n.default;var i=t(zt);e.xmlDecodeTree=i.default;var o=t(Mt);e.decodeCodePoint=o.default;var s=Mt;Object.defineProperty(e,"replaceCodePoint",{enumerable:!0,get:function(){return s.replaceCodePoint}}),Object.defineProperty(e,"fromCodePoint",{enumerable:!0,get:function(){return s.fromCodePoint}});var a;(function(g){g[g.NUM=35]="NUM",g[g.SEMI=59]="SEMI",g[g.ZERO=48]="ZERO",g[g.NINE=57]="NINE",g[g.LOWER_A=97]="LOWER_A",g[g.LOWER_F=102]="LOWER_F",g[g.LOWER_X=120]="LOWER_X",g[g.To_LOWER_BIT=32]="To_LOWER_BIT"})(a||(a={}));var u;(function(g){g[g.VALUE_LENGTH=49152]="VALUE_LENGTH",g[g.BRANCH_LENGTH=16256]="BRANCH_LENGTH",g[g.JUMP_TABLE=127]="JUMP_TABLE"})(u=e.BinTrieFlags||(e.BinTrieFlags={}));function l(g){return function(q,m){for(var v="",w=0,y=0;(y=q.indexOf("&",y))>=0;){if(v+=q.slice(w,y),w=y,y+=1,q.charCodeAt(y)===a.NUM){var _=y+1,D=10,R=q.charCodeAt(_);(R|a.To_LOWER_BIT)===a.LOWER_X&&(D=16,y+=1,_+=1);do R=q.charCodeAt(++y);while(R>=a.ZERO&&R<=a.NINE||D===16&&(R|a.To_LOWER_BIT)>=a.LOWER_A&&(R|a.To_LOWER_BIT)<=a.LOWER_F);if(_!==y){var Y=q.substring(_,y),we=parseInt(Y,D);if(q.charCodeAt(y)===a.SEMI)y+=1;else if(m)continue;v+=(0,o.default)(we),w=y}continue}for(var U=0,K=1,I=0,W=g[I];y<q.length&&(I=r(g,W,I+1,q.charCodeAt(y)),!(I<0));y++,K++){W=g[I];var ee=W&u.VALUE_LENGTH;if(ee){(!m||q.charCodeAt(y)===a.SEMI)&&(U=I,K=0);var Q=(ee>>14)-1;if(Q===0)break;I+=Q}}if(U!==0){var Q=(g[U]&u.VALUE_LENGTH)>>14;v+=Q===1?String.fromCharCode(g[U]&~u.VALUE_LENGTH):Q===2?String.fromCharCode(g[U+1]):String.fromCharCode(g[U+1],g[U+2]),w=y-K+1}}return v+q.slice(w)}}function r(g,x,q,m){var v=(x&u.BRANCH_LENGTH)>>7,w=x&u.JUMP_TABLE;if(v===0)return w!==0&&m===w?q:-1;if(w){var y=m-w;return y<0||y>=v?-1:g[q+y]-1}for(var _=q,D=_+v-1;_<=D;){var R=_+D>>>1,Y=g[R];if(Y<m)_=R+1;else if(Y>m)D=R-1;else return g[R+v]}return-1}e.determineBranch=r;var p=l(n.default),d=l(i.default);function f(g){return p(g,!1)}e.decodeHTML=f;function h(g){return p(g,!0)}e.decodeHTMLStrict=h;function c(g){return d(g,!0)}e.decodeXML=c})(Jt);var Ae={},Gt={};Object.defineProperty(Gt,"__esModule",{value:!0});function it(e){for(var t=1;t<e.length;t++)e[t][0]+=e[t-1][0]+1;return e}Gt.default=new Map(it([[9,"&Tab;"],[0,"&NewLine;"],[22,"&excl;"],[0,"&quot;"],[0,"&num;"],[0,"&dollar;"],[0,"&percnt;"],[0,"&amp;"],[0,"&apos;"],[0,"&lpar;"],[0,"&rpar;"],[0,"&ast;"],[0,"&plus;"],[0,"&comma;"],[1,"&period;"],[0,"&sol;"],[10,"&colon;"],[0,"&semi;"],[0,{v:"&lt;",n:8402,o:"&nvlt;"}],[0,{v:"&equals;",n:8421,o:"&bne;"}],[0,{v:"&gt;",n:8402,o:"&nvgt;"}],[0,"&quest;"],[0,"&commat;"],[26,"&lbrack;"],[0,"&bsol;"],[0,"&rbrack;"],[0,"&Hat;"],[0,"&lowbar;"],[0,"&DiacriticalGrave;"],[5,{n:106,o:"&fjlig;"}],[20,"&lbrace;"],[0,"&verbar;"],[0,"&rbrace;"],[34,"&nbsp;"],[0,"&iexcl;"],[0,"&cent;"],[0,"&pound;"],[0,"&curren;"],[0,"&yen;"],[0,"&brvbar;"],[0,"&sect;"],[0,"&die;"],[0,"&copy;"],[0,"&ordf;"],[0,"&laquo;"],[0,"&not;"],[0,"&shy;"],[0,"&circledR;"],[0,"&macr;"],[0,"&deg;"],[0,"&PlusMinus;"],[0,"&sup2;"],[0,"&sup3;"],[0,"&acute;"],[0,"&micro;"],[0,"&para;"],[0,"&centerdot;"],[0,"&cedil;"],[0,"&sup1;"],[0,"&ordm;"],[0,"&raquo;"],[0,"&frac14;"],[0,"&frac12;"],[0,"&frac34;"],[0,"&iquest;"],[0,"&Agrave;"],[0,"&Aacute;"],[0,"&Acirc;"],[0,"&Atilde;"],[0,"&Auml;"],[0,"&angst;"],[0,"&AElig;"],[0,"&Ccedil;"],[0,"&Egrave;"],[0,"&Eacute;"],[0,"&Ecirc;"],[0,"&Euml;"],[0,"&Igrave;"],[0,"&Iacute;"],[0,"&Icirc;"],[0,"&Iuml;"],[0,"&ETH;"],[0,"&Ntilde;"],[0,"&Ograve;"],[0,"&Oacute;"],[0,"&Ocirc;"],[0,"&Otilde;"],[0,"&Ouml;"],[0,"&times;"],[0,"&Oslash;"],[0,"&Ugrave;"],[0,"&Uacute;"],[0,"&Ucirc;"],[0,"&Uuml;"],[0,"&Yacute;"],[0,"&THORN;"],[0,"&szlig;"],[0,"&agrave;"],[0,"&aacute;"],[0,"&acirc;"],[0,"&atilde;"],[0,"&auml;"],[0,"&aring;"],[0,"&aelig;"],[0,"&ccedil;"],[0,"&egrave;"],[0,"&eacute;"],[0,"&ecirc;"],[0,"&euml;"],[0,"&igrave;"],[0,"&iacute;"],[0,"&icirc;"],[0,"&iuml;"],[0,"&eth;"],[0,"&ntilde;"],[0,"&ograve;"],[0,"&oacute;"],[0,"&ocirc;"],[0,"&otilde;"],[0,"&ouml;"],[0,"&div;"],[0,"&oslash;"],[0,"&ugrave;"],[0,"&uacute;"],[0,"&ucirc;"],[0,"&uuml;"],[0,"&yacute;"],[0,"&thorn;"],[0,"&yuml;"],[0,"&Amacr;"],[0,"&amacr;"],[0,"&Abreve;"],[0,"&abreve;"],[0,"&Aogon;"],[0,"&aogon;"],[0,"&Cacute;"],[0,"&cacute;"],[0,"&Ccirc;"],[0,"&ccirc;"],[0,"&Cdot;"],[0,"&cdot;"],[0,"&Ccaron;"],[0,"&ccaron;"],[0,"&Dcaron;"],[0,"&dcaron;"],[0,"&Dstrok;"],[0,"&dstrok;"],[0,"&Emacr;"],[0,"&emacr;"],[2,"&Edot;"],[0,"&edot;"],[0,"&Eogon;"],[0,"&eogon;"],[0,"&Ecaron;"],[0,"&ecaron;"],[0,"&Gcirc;"],[0,"&gcirc;"],[0,"&Gbreve;"],[0,"&gbreve;"],[0,"&Gdot;"],[0,"&gdot;"],[0,"&Gcedil;"],[1,"&Hcirc;"],[0,"&hcirc;"],[0,"&Hstrok;"],[0,"&hstrok;"],[0,"&Itilde;"],[0,"&itilde;"],[0,"&Imacr;"],[0,"&imacr;"],[2,"&Iogon;"],[0,"&iogon;"],[0,"&Idot;"],[0,"&imath;"],[0,"&IJlig;"],[0,"&ijlig;"],[0,"&Jcirc;"],[0,"&jcirc;"],[0,"&Kcedil;"],[0,"&kcedil;"],[0,"&kgreen;"],[0,"&Lacute;"],[0,"&lacute;"],[0,"&Lcedil;"],[0,"&lcedil;"],[0,"&Lcaron;"],[0,"&lcaron;"],[0,"&Lmidot;"],[0,"&lmidot;"],[0,"&Lstrok;"],[0,"&lstrok;"],[0,"&Nacute;"],[0,"&nacute;"],[0,"&Ncedil;"],[0,"&ncedil;"],[0,"&Ncaron;"],[0,"&ncaron;"],[0,"&napos;"],[0,"&ENG;"],[0,"&eng;"],[0,"&Omacr;"],[0,"&omacr;"],[2,"&Odblac;"],[0,"&odblac;"],[0,"&OElig;"],[0,"&oelig;"],[0,"&Racute;"],[0,"&racute;"],[0,"&Rcedil;"],[0,"&rcedil;"],[0,"&Rcaron;"],[0,"&rcaron;"],[0,"&Sacute;"],[0,"&sacute;"],[0,"&Scirc;"],[0,"&scirc;"],[0,"&Scedil;"],[0,"&scedil;"],[0,"&Scaron;"],[0,"&scaron;"],[0,"&Tcedil;"],[0,"&tcedil;"],[0,"&Tcaron;"],[0,"&tcaron;"],[0,"&Tstrok;"],[0,"&tstrok;"],[0,"&Utilde;"],[0,"&utilde;"],[0,"&Umacr;"],[0,"&umacr;"],[0,"&Ubreve;"],[0,"&ubreve;"],[0,"&Uring;"],[0,"&uring;"],[0,"&Udblac;"],[0,"&udblac;"],[0,"&Uogon;"],[0,"&uogon;"],[0,"&Wcirc;"],[0,"&wcirc;"],[0,"&Ycirc;"],[0,"&ycirc;"],[0,"&Yuml;"],[0,"&Zacute;"],[0,"&zacute;"],[0,"&Zdot;"],[0,"&zdot;"],[0,"&Zcaron;"],[0,"&zcaron;"],[19,"&fnof;"],[34,"&imped;"],[63,"&gacute;"],[65,"&jmath;"],[142,"&circ;"],[0,"&caron;"],[16,"&breve;"],[0,"&DiacriticalDot;"],[0,"&ring;"],[0,"&ogon;"],[0,"&DiacriticalTilde;"],[0,"&dblac;"],[51,"&DownBreve;"],[127,"&Alpha;"],[0,"&Beta;"],[0,"&Gamma;"],[0,"&Delta;"],[0,"&Epsilon;"],[0,"&Zeta;"],[0,"&Eta;"],[0,"&Theta;"],[0,"&Iota;"],[0,"&Kappa;"],[0,"&Lambda;"],[0,"&Mu;"],[0,"&Nu;"],[0,"&Xi;"],[0,"&Omicron;"],[0,"&Pi;"],[0,"&Rho;"],[1,"&Sigma;"],[0,"&Tau;"],[0,"&Upsilon;"],[0,"&Phi;"],[0,"&Chi;"],[0,"&Psi;"],[0,"&ohm;"],[7,"&alpha;"],[0,"&beta;"],[0,"&gamma;"],[0,"&delta;"],[0,"&epsi;"],[0,"&zeta;"],[0,"&eta;"],[0,"&theta;"],[0,"&iota;"],[0,"&kappa;"],[0,"&lambda;"],[0,"&mu;"],[0,"&nu;"],[0,"&xi;"],[0,"&omicron;"],[0,"&pi;"],[0,"&rho;"],[0,"&sigmaf;"],[0,"&sigma;"],[0,"&tau;"],[0,"&upsi;"],[0,"&phi;"],[0,"&chi;"],[0,"&psi;"],[0,"&omega;"],[7,"&thetasym;"],[0,"&Upsi;"],[2,"&phiv;"],[0,"&piv;"],[5,"&Gammad;"],[0,"&digamma;"],[18,"&kappav;"],[0,"&rhov;"],[3,"&epsiv;"],[0,"&backepsilon;"],[10,"&IOcy;"],[0,"&DJcy;"],[0,"&GJcy;"],[0,"&Jukcy;"],[0,"&DScy;"],[0,"&Iukcy;"],[0,"&YIcy;"],[0,"&Jsercy;"],[0,"&LJcy;"],[0,"&NJcy;"],[0,"&TSHcy;"],[0,"&KJcy;"],[1,"&Ubrcy;"],[0,"&DZcy;"],[0,"&Acy;"],[0,"&Bcy;"],[0,"&Vcy;"],[0,"&Gcy;"],[0,"&Dcy;"],[0,"&IEcy;"],[0,"&ZHcy;"],[0,"&Zcy;"],[0,"&Icy;"],[0,"&Jcy;"],[0,"&Kcy;"],[0,"&Lcy;"],[0,"&Mcy;"],[0,"&Ncy;"],[0,"&Ocy;"],[0,"&Pcy;"],[0,"&Rcy;"],[0,"&Scy;"],[0,"&Tcy;"],[0,"&Ucy;"],[0,"&Fcy;"],[0,"&KHcy;"],[0,"&TScy;"],[0,"&CHcy;"],[0,"&SHcy;"],[0,"&SHCHcy;"],[0,"&HARDcy;"],[0,"&Ycy;"],[0,"&SOFTcy;"],[0,"&Ecy;"],[0,"&YUcy;"],[0,"&YAcy;"],[0,"&acy;"],[0,"&bcy;"],[0,"&vcy;"],[0,"&gcy;"],[0,"&dcy;"],[0,"&iecy;"],[0,"&zhcy;"],[0,"&zcy;"],[0,"&icy;"],[0,"&jcy;"],[0,"&kcy;"],[0,"&lcy;"],[0,"&mcy;"],[0,"&ncy;"],[0,"&ocy;"],[0,"&pcy;"],[0,"&rcy;"],[0,"&scy;"],[0,"&tcy;"],[0,"&ucy;"],[0,"&fcy;"],[0,"&khcy;"],[0,"&tscy;"],[0,"&chcy;"],[0,"&shcy;"],[0,"&shchcy;"],[0,"&hardcy;"],[0,"&ycy;"],[0,"&softcy;"],[0,"&ecy;"],[0,"&yucy;"],[0,"&yacy;"],[1,"&iocy;"],[0,"&djcy;"],[0,"&gjcy;"],[0,"&jukcy;"],[0,"&dscy;"],[0,"&iukcy;"],[0,"&yicy;"],[0,"&jsercy;"],[0,"&ljcy;"],[0,"&njcy;"],[0,"&tshcy;"],[0,"&kjcy;"],[1,"&ubrcy;"],[0,"&dzcy;"],[7074,"&ensp;"],[0,"&emsp;"],[0,"&emsp13;"],[0,"&emsp14;"],[1,"&numsp;"],[0,"&puncsp;"],[0,"&ThinSpace;"],[0,"&hairsp;"],[0,"&NegativeMediumSpace;"],[0,"&zwnj;"],[0,"&zwj;"],[0,"&lrm;"],[0,"&rlm;"],[0,"&dash;"],[2,"&ndash;"],[0,"&mdash;"],[0,"&horbar;"],[0,"&Verbar;"],[1,"&lsquo;"],[0,"&CloseCurlyQuote;"],[0,"&lsquor;"],[1,"&ldquo;"],[0,"&CloseCurlyDoubleQuote;"],[0,"&bdquo;"],[1,"&dagger;"],[0,"&Dagger;"],[0,"&bull;"],[2,"&nldr;"],[0,"&hellip;"],[9,"&permil;"],[0,"&pertenk;"],[0,"&prime;"],[0,"&Prime;"],[0,"&tprime;"],[0,"&backprime;"],[3,"&lsaquo;"],[0,"&rsaquo;"],[3,"&oline;"],[2,"&caret;"],[1,"&hybull;"],[0,"&frasl;"],[10,"&bsemi;"],[7,"&qprime;"],[7,{v:"&MediumSpace;",n:8202,o:"&ThickSpace;"}],[0,"&NoBreak;"],[0,"&af;"],[0,"&InvisibleTimes;"],[0,"&ic;"],[72,"&euro;"],[46,"&tdot;"],[0,"&DotDot;"],[37,"&complexes;"],[2,"&incare;"],[4,"&gscr;"],[0,"&hamilt;"],[0,"&Hfr;"],[0,"&Hopf;"],[0,"&planckh;"],[0,"&hbar;"],[0,"&imagline;"],[0,"&Ifr;"],[0,"&lagran;"],[0,"&ell;"],[1,"&naturals;"],[0,"&numero;"],[0,"&copysr;"],[0,"&weierp;"],[0,"&Popf;"],[0,"&Qopf;"],[0,"&realine;"],[0,"&real;"],[0,"&reals;"],[0,"&rx;"],[3,"&trade;"],[1,"&integers;"],[2,"&mho;"],[0,"&zeetrf;"],[0,"&iiota;"],[2,"&bernou;"],[0,"&Cayleys;"],[1,"&escr;"],[0,"&Escr;"],[0,"&Fouriertrf;"],[1,"&Mellintrf;"],[0,"&order;"],[0,"&alefsym;"],[0,"&beth;"],[0,"&gimel;"],[0,"&daleth;"],[12,"&CapitalDifferentialD;"],[0,"&dd;"],[0,"&ee;"],[0,"&ii;"],[10,"&frac13;"],[0,"&frac23;"],[0,"&frac15;"],[0,"&frac25;"],[0,"&frac35;"],[0,"&frac45;"],[0,"&frac16;"],[0,"&frac56;"],[0,"&frac18;"],[0,"&frac38;"],[0,"&frac58;"],[0,"&frac78;"],[49,"&larr;"],[0,"&ShortUpArrow;"],[0,"&rarr;"],[0,"&darr;"],[0,"&harr;"],[0,"&updownarrow;"],[0,"&nwarr;"],[0,"&nearr;"],[0,"&LowerRightArrow;"],[0,"&LowerLeftArrow;"],[0,"&nlarr;"],[0,"&nrarr;"],[1,{v:"&rarrw;",n:824,o:"&nrarrw;"}],[0,"&Larr;"],[0,"&Uarr;"],[0,"&Rarr;"],[0,"&Darr;"],[0,"&larrtl;"],[0,"&rarrtl;"],[0,"&LeftTeeArrow;"],[0,"&mapstoup;"],[0,"&map;"],[0,"&DownTeeArrow;"],[1,"&hookleftarrow;"],[0,"&hookrightarrow;"],[0,"&larrlp;"],[0,"&looparrowright;"],[0,"&harrw;"],[0,"&nharr;"],[1,"&lsh;"],[0,"&rsh;"],[0,"&ldsh;"],[0,"&rdsh;"],[1,"&crarr;"],[0,"&cularr;"],[0,"&curarr;"],[2,"&circlearrowleft;"],[0,"&circlearrowright;"],[0,"&leftharpoonup;"],[0,"&DownLeftVector;"],[0,"&RightUpVector;"],[0,"&LeftUpVector;"],[0,"&rharu;"],[0,"&DownRightVector;"],[0,"&dharr;"],[0,"&dharl;"],[0,"&RightArrowLeftArrow;"],[0,"&udarr;"],[0,"&LeftArrowRightArrow;"],[0,"&leftleftarrows;"],[0,"&upuparrows;"],[0,"&rightrightarrows;"],[0,"&ddarr;"],[0,"&leftrightharpoons;"],[0,"&Equilibrium;"],[0,"&nlArr;"],[0,"&nhArr;"],[0,"&nrArr;"],[0,"&DoubleLeftArrow;"],[0,"&DoubleUpArrow;"],[0,"&DoubleRightArrow;"],[0,"&dArr;"],[0,"&DoubleLeftRightArrow;"],[0,"&DoubleUpDownArrow;"],[0,"&nwArr;"],[0,"&neArr;"],[0,"&seArr;"],[0,"&swArr;"],[0,"&lAarr;"],[0,"&rAarr;"],[1,"&zigrarr;"],[6,"&larrb;"],[0,"&rarrb;"],[15,"&DownArrowUpArrow;"],[7,"&loarr;"],[0,"&roarr;"],[0,"&hoarr;"],[0,"&forall;"],[0,"&comp;"],[0,{v:"&part;",n:824,o:"&npart;"}],[0,"&exist;"],[0,"&nexist;"],[0,"&empty;"],[1,"&Del;"],[0,"&Element;"],[0,"&NotElement;"],[1,"&ni;"],[0,"&notni;"],[2,"&prod;"],[0,"&coprod;"],[0,"&sum;"],[0,"&minus;"],[0,"&MinusPlus;"],[0,"&dotplus;"],[1,"&Backslash;"],[0,"&lowast;"],[0,"&compfn;"],[1,"&radic;"],[2,"&prop;"],[0,"&infin;"],[0,"&angrt;"],[0,{v:"&ang;",n:8402,o:"&nang;"}],[0,"&angmsd;"],[0,"&angsph;"],[0,"&mid;"],[0,"&nmid;"],[0,"&DoubleVerticalBar;"],[0,"&NotDoubleVerticalBar;"],[0,"&and;"],[0,"&or;"],[0,{v:"&cap;",n:65024,o:"&caps;"}],[0,{v:"&cup;",n:65024,o:"&cups;"}],[0,"&int;"],[0,"&Int;"],[0,"&iiint;"],[0,"&conint;"],[0,"&Conint;"],[0,"&Cconint;"],[0,"&cwint;"],[0,"&ClockwiseContourIntegral;"],[0,"&awconint;"],[0,"&there4;"],[0,"&becaus;"],[0,"&ratio;"],[0,"&Colon;"],[0,"&dotminus;"],[1,"&mDDot;"],[0,"&homtht;"],[0,{v:"&sim;",n:8402,o:"&nvsim;"}],[0,{v:"&backsim;",n:817,o:"&race;"}],[0,{v:"&ac;",n:819,o:"&acE;"}],[0,"&acd;"],[0,"&VerticalTilde;"],[0,"&NotTilde;"],[0,{v:"&eqsim;",n:824,o:"&nesim;"}],[0,"&sime;"],[0,"&NotTildeEqual;"],[0,"&cong;"],[0,"&simne;"],[0,"&ncong;"],[0,"&ap;"],[0,"&nap;"],[0,"&ape;"],[0,{v:"&apid;",n:824,o:"&napid;"}],[0,"&backcong;"],[0,{v:"&asympeq;",n:8402,o:"&nvap;"}],[0,{v:"&bump;",n:824,o:"&nbump;"}],[0,{v:"&bumpe;",n:824,o:"&nbumpe;"}],[0,{v:"&doteq;",n:824,o:"&nedot;"}],[0,"&doteqdot;"],[0,"&efDot;"],[0,"&erDot;"],[0,"&Assign;"],[0,"&ecolon;"],[0,"&ecir;"],[0,"&circeq;"],[1,"&wedgeq;"],[0,"&veeeq;"],[1,"&triangleq;"],[2,"&equest;"],[0,"&ne;"],[0,{v:"&Congruent;",n:8421,o:"&bnequiv;"}],[0,"&nequiv;"],[1,{v:"&le;",n:8402,o:"&nvle;"}],[0,{v:"&ge;",n:8402,o:"&nvge;"}],[0,{v:"&lE;",n:824,o:"&nlE;"}],[0,{v:"&gE;",n:824,o:"&ngE;"}],[0,{v:"&lnE;",n:65024,o:"&lvertneqq;"}],[0,{v:"&gnE;",n:65024,o:"&gvertneqq;"}],[0,{v:"&ll;",n:new Map(it([[824,"&nLtv;"],[7577,"&nLt;"]]))}],[0,{v:"&gg;",n:new Map(it([[824,"&nGtv;"],[7577,"&nGt;"]]))}],[0,"&between;"],[0,"&NotCupCap;"],[0,"&nless;"],[0,"&ngt;"],[0,"&nle;"],[0,"&nge;"],[0,"&lesssim;"],[0,"&GreaterTilde;"],[0,"&nlsim;"],[0,"&ngsim;"],[0,"&LessGreater;"],[0,"&gl;"],[0,"&NotLessGreater;"],[0,"&NotGreaterLess;"],[0,"&pr;"],[0,"&sc;"],[0,"&prcue;"],[0,"&sccue;"],[0,"&PrecedesTilde;"],[0,{v:"&scsim;",n:824,o:"&NotSucceedsTilde;"}],[0,"&NotPrecedes;"],[0,"&NotSucceeds;"],[0,{v:"&sub;",n:8402,o:"&NotSubset;"}],[0,{v:"&sup;",n:8402,o:"&NotSuperset;"}],[0,"&nsub;"],[0,"&nsup;"],[0,"&sube;"],[0,"&supe;"],[0,"&NotSubsetEqual;"],[0,"&NotSupersetEqual;"],[0,{v:"&subne;",n:65024,o:"&varsubsetneq;"}],[0,{v:"&supne;",n:65024,o:"&varsupsetneq;"}],[1,"&cupdot;"],[0,"&UnionPlus;"],[0,{v:"&sqsub;",n:824,o:"&NotSquareSubset;"}],[0,{v:"&sqsup;",n:824,o:"&NotSquareSuperset;"}],[0,"&sqsube;"],[0,"&sqsupe;"],[0,{v:"&sqcap;",n:65024,o:"&sqcaps;"}],[0,{v:"&sqcup;",n:65024,o:"&sqcups;"}],[0,"&CirclePlus;"],[0,"&CircleMinus;"],[0,"&CircleTimes;"],[0,"&osol;"],[0,"&CircleDot;"],[0,"&circledcirc;"],[0,"&circledast;"],[1,"&circleddash;"],[0,"&boxplus;"],[0,"&boxminus;"],[0,"&boxtimes;"],[0,"&dotsquare;"],[0,"&RightTee;"],[0,"&dashv;"],[0,"&DownTee;"],[0,"&bot;"],[1,"&models;"],[0,"&DoubleRightTee;"],[0,"&Vdash;"],[0,"&Vvdash;"],[0,"&VDash;"],[0,"&nvdash;"],[0,"&nvDash;"],[0,"&nVdash;"],[0,"&nVDash;"],[0,"&prurel;"],[1,"&LeftTriangle;"],[0,"&RightTriangle;"],[0,{v:"&LeftTriangleEqual;",n:8402,o:"&nvltrie;"}],[0,{v:"&RightTriangleEqual;",n:8402,o:"&nvrtrie;"}],[0,"&origof;"],[0,"&imof;"],[0,"&multimap;"],[0,"&hercon;"],[0,"&intcal;"],[0,"&veebar;"],[1,"&barvee;"],[0,"&angrtvb;"],[0,"&lrtri;"],[0,"&bigwedge;"],[0,"&bigvee;"],[0,"&bigcap;"],[0,"&bigcup;"],[0,"&diam;"],[0,"&sdot;"],[0,"&sstarf;"],[0,"&divideontimes;"],[0,"&bowtie;"],[0,"&ltimes;"],[0,"&rtimes;"],[0,"&leftthreetimes;"],[0,"&rightthreetimes;"],[0,"&backsimeq;"],[0,"&curlyvee;"],[0,"&curlywedge;"],[0,"&Sub;"],[0,"&Sup;"],[0,"&Cap;"],[0,"&Cup;"],[0,"&fork;"],[0,"&epar;"],[0,"&lessdot;"],[0,"&gtdot;"],[0,{v:"&Ll;",n:824,o:"&nLl;"}],[0,{v:"&Gg;",n:824,o:"&nGg;"}],[0,{v:"&leg;",n:65024,o:"&lesg;"}],[0,{v:"&gel;",n:65024,o:"&gesl;"}],[2,"&cuepr;"],[0,"&cuesc;"],[0,"&NotPrecedesSlantEqual;"],[0,"&NotSucceedsSlantEqual;"],[0,"&NotSquareSubsetEqual;"],[0,"&NotSquareSupersetEqual;"],[2,"&lnsim;"],[0,"&gnsim;"],[0,"&precnsim;"],[0,"&scnsim;"],[0,"&nltri;"],[0,"&NotRightTriangle;"],[0,"&nltrie;"],[0,"&NotRightTriangleEqual;"],[0,"&vellip;"],[0,"&ctdot;"],[0,"&utdot;"],[0,"&dtdot;"],[0,"&disin;"],[0,"&isinsv;"],[0,"&isins;"],[0,{v:"&isindot;",n:824,o:"&notindot;"}],[0,"&notinvc;"],[0,"&notinvb;"],[1,{v:"&isinE;",n:824,o:"&notinE;"}],[0,"&nisd;"],[0,"&xnis;"],[0,"&nis;"],[0,"&notnivc;"],[0,"&notnivb;"],[6,"&barwed;"],[0,"&Barwed;"],[1,"&lceil;"],[0,"&rceil;"],[0,"&LeftFloor;"],[0,"&rfloor;"],[0,"&drcrop;"],[0,"&dlcrop;"],[0,"&urcrop;"],[0,"&ulcrop;"],[0,"&bnot;"],[1,"&profline;"],[0,"&profsurf;"],[1,"&telrec;"],[0,"&target;"],[5,"&ulcorn;"],[0,"&urcorn;"],[0,"&dlcorn;"],[0,"&drcorn;"],[2,"&frown;"],[0,"&smile;"],[9,"&cylcty;"],[0,"&profalar;"],[7,"&topbot;"],[6,"&ovbar;"],[1,"&solbar;"],[60,"&angzarr;"],[51,"&lmoustache;"],[0,"&rmoustache;"],[2,"&OverBracket;"],[0,"&bbrk;"],[0,"&bbrktbrk;"],[37,"&OverParenthesis;"],[0,"&UnderParenthesis;"],[0,"&OverBrace;"],[0,"&UnderBrace;"],[2,"&trpezium;"],[4,"&elinters;"],[59,"&blank;"],[164,"&circledS;"],[55,"&boxh;"],[1,"&boxv;"],[9,"&boxdr;"],[3,"&boxdl;"],[3,"&boxur;"],[3,"&boxul;"],[3,"&boxvr;"],[7,"&boxvl;"],[7,"&boxhd;"],[7,"&boxhu;"],[7,"&boxvh;"],[19,"&boxH;"],[0,"&boxV;"],[0,"&boxdR;"],[0,"&boxDr;"],[0,"&boxDR;"],[0,"&boxdL;"],[0,"&boxDl;"],[0,"&boxDL;"],[0,"&boxuR;"],[0,"&boxUr;"],[0,"&boxUR;"],[0,"&boxuL;"],[0,"&boxUl;"],[0,"&boxUL;"],[0,"&boxvR;"],[0,"&boxVr;"],[0,"&boxVR;"],[0,"&boxvL;"],[0,"&boxVl;"],[0,"&boxVL;"],[0,"&boxHd;"],[0,"&boxhD;"],[0,"&boxHD;"],[0,"&boxHu;"],[0,"&boxhU;"],[0,"&boxHU;"],[0,"&boxvH;"],[0,"&boxVh;"],[0,"&boxVH;"],[19,"&uhblk;"],[3,"&lhblk;"],[3,"&block;"],[8,"&blk14;"],[0,"&blk12;"],[0,"&blk34;"],[13,"&square;"],[8,"&blacksquare;"],[0,"&EmptyVerySmallSquare;"],[1,"&rect;"],[0,"&marker;"],[2,"&fltns;"],[1,"&bigtriangleup;"],[0,"&blacktriangle;"],[0,"&triangle;"],[2,"&blacktriangleright;"],[0,"&rtri;"],[3,"&bigtriangledown;"],[0,"&blacktriangledown;"],[0,"&dtri;"],[2,"&blacktriangleleft;"],[0,"&ltri;"],[6,"&loz;"],[0,"&cir;"],[32,"&tridot;"],[2,"&bigcirc;"],[8,"&ultri;"],[0,"&urtri;"],[0,"&lltri;"],[0,"&EmptySmallSquare;"],[0,"&FilledSmallSquare;"],[8,"&bigstar;"],[0,"&star;"],[7,"&phone;"],[49,"&female;"],[1,"&male;"],[29,"&spades;"],[2,"&clubs;"],[1,"&hearts;"],[0,"&diamondsuit;"],[3,"&sung;"],[2,"&flat;"],[0,"&natural;"],[0,"&sharp;"],[163,"&check;"],[3,"&cross;"],[8,"&malt;"],[21,"&sext;"],[33,"&VerticalSeparator;"],[25,"&lbbrk;"],[0,"&rbbrk;"],[84,"&bsolhsub;"],[0,"&suphsol;"],[28,"&LeftDoubleBracket;"],[0,"&RightDoubleBracket;"],[0,"&lang;"],[0,"&rang;"],[0,"&Lang;"],[0,"&Rang;"],[0,"&loang;"],[0,"&roang;"],[7,"&longleftarrow;"],[0,"&longrightarrow;"],[0,"&longleftrightarrow;"],[0,"&DoubleLongLeftArrow;"],[0,"&DoubleLongRightArrow;"],[0,"&DoubleLongLeftRightArrow;"],[1,"&longmapsto;"],[2,"&dzigrarr;"],[258,"&nvlArr;"],[0,"&nvrArr;"],[0,"&nvHarr;"],[0,"&Map;"],[6,"&lbarr;"],[0,"&bkarow;"],[0,"&lBarr;"],[0,"&dbkarow;"],[0,"&drbkarow;"],[0,"&DDotrahd;"],[0,"&UpArrowBar;"],[0,"&DownArrowBar;"],[2,"&Rarrtl;"],[2,"&latail;"],[0,"&ratail;"],[0,"&lAtail;"],[0,"&rAtail;"],[0,"&larrfs;"],[0,"&rarrfs;"],[0,"&larrbfs;"],[0,"&rarrbfs;"],[2,"&nwarhk;"],[0,"&nearhk;"],[0,"&hksearow;"],[0,"&hkswarow;"],[0,"&nwnear;"],[0,"&nesear;"],[0,"&seswar;"],[0,"&swnwar;"],[8,{v:"&rarrc;",n:824,o:"&nrarrc;"}],[1,"&cudarrr;"],[0,"&ldca;"],[0,"&rdca;"],[0,"&cudarrl;"],[0,"&larrpl;"],[2,"&curarrm;"],[0,"&cularrp;"],[7,"&rarrpl;"],[2,"&harrcir;"],[0,"&Uarrocir;"],[0,"&lurdshar;"],[0,"&ldrushar;"],[2,"&LeftRightVector;"],[0,"&RightUpDownVector;"],[0,"&DownLeftRightVector;"],[0,"&LeftUpDownVector;"],[0,"&LeftVectorBar;"],[0,"&RightVectorBar;"],[0,"&RightUpVectorBar;"],[0,"&RightDownVectorBar;"],[0,"&DownLeftVectorBar;"],[0,"&DownRightVectorBar;"],[0,"&LeftUpVectorBar;"],[0,"&LeftDownVectorBar;"],[0,"&LeftTeeVector;"],[0,"&RightTeeVector;"],[0,"&RightUpTeeVector;"],[0,"&RightDownTeeVector;"],[0,"&DownLeftTeeVector;"],[0,"&DownRightTeeVector;"],[0,"&LeftUpTeeVector;"],[0,"&LeftDownTeeVector;"],[0,"&lHar;"],[0,"&uHar;"],[0,"&rHar;"],[0,"&dHar;"],[0,"&luruhar;"],[0,"&ldrdhar;"],[0,"&ruluhar;"],[0,"&rdldhar;"],[0,"&lharul;"],[0,"&llhard;"],[0,"&rharul;"],[0,"&lrhard;"],[0,"&udhar;"],[0,"&duhar;"],[0,"&RoundImplies;"],[0,"&erarr;"],[0,"&simrarr;"],[0,"&larrsim;"],[0,"&rarrsim;"],[0,"&rarrap;"],[0,"&ltlarr;"],[1,"&gtrarr;"],[0,"&subrarr;"],[1,"&suplarr;"],[0,"&lfisht;"],[0,"&rfisht;"],[0,"&ufisht;"],[0,"&dfisht;"],[5,"&lopar;"],[0,"&ropar;"],[4,"&lbrke;"],[0,"&rbrke;"],[0,"&lbrkslu;"],[0,"&rbrksld;"],[0,"&lbrksld;"],[0,"&rbrkslu;"],[0,"&langd;"],[0,"&rangd;"],[0,"&lparlt;"],[0,"&rpargt;"],[0,"&gtlPar;"],[0,"&ltrPar;"],[3,"&vzigzag;"],[1,"&vangrt;"],[0,"&angrtvbd;"],[6,"&ange;"],[0,"&range;"],[0,"&dwangle;"],[0,"&uwangle;"],[0,"&angmsdaa;"],[0,"&angmsdab;"],[0,"&angmsdac;"],[0,"&angmsdad;"],[0,"&angmsdae;"],[0,"&angmsdaf;"],[0,"&angmsdag;"],[0,"&angmsdah;"],[0,"&bemptyv;"],[0,"&demptyv;"],[0,"&cemptyv;"],[0,"&raemptyv;"],[0,"&laemptyv;"],[0,"&ohbar;"],[0,"&omid;"],[0,"&opar;"],[1,"&operp;"],[1,"&olcross;"],[0,"&odsold;"],[1,"&olcir;"],[0,"&ofcir;"],[0,"&olt;"],[0,"&ogt;"],[0,"&cirscir;"],[0,"&cirE;"],[0,"&solb;"],[0,"&bsolb;"],[3,"&boxbox;"],[3,"&trisb;"],[0,"&rtriltri;"],[0,{v:"&LeftTriangleBar;",n:824,o:"&NotLeftTriangleBar;"}],[0,{v:"&RightTriangleBar;",n:824,o:"&NotRightTriangleBar;"}],[11,"&iinfin;"],[0,"&infintie;"],[0,"&nvinfin;"],[4,"&eparsl;"],[0,"&smeparsl;"],[0,"&eqvparsl;"],[5,"&blacklozenge;"],[8,"&RuleDelayed;"],[1,"&dsol;"],[9,"&bigodot;"],[0,"&bigoplus;"],[0,"&bigotimes;"],[1,"&biguplus;"],[1,"&bigsqcup;"],[5,"&iiiint;"],[0,"&fpartint;"],[2,"&cirfnint;"],[0,"&awint;"],[0,"&rppolint;"],[0,"&scpolint;"],[0,"&npolint;"],[0,"&pointint;"],[0,"&quatint;"],[0,"&intlarhk;"],[10,"&pluscir;"],[0,"&plusacir;"],[0,"&simplus;"],[0,"&plusdu;"],[0,"&plussim;"],[0,"&plustwo;"],[1,"&mcomma;"],[0,"&minusdu;"],[2,"&loplus;"],[0,"&roplus;"],[0,"&Cross;"],[0,"&timesd;"],[0,"&timesbar;"],[1,"&smashp;"],[0,"&lotimes;"],[0,"&rotimes;"],[0,"&otimesas;"],[0,"&Otimes;"],[0,"&odiv;"],[0,"&triplus;"],[0,"&triminus;"],[0,"&tritime;"],[0,"&intprod;"],[2,"&amalg;"],[0,"&capdot;"],[1,"&ncup;"],[0,"&ncap;"],[0,"&capand;"],[0,"&cupor;"],[0,"&cupcap;"],[0,"&capcup;"],[0,"&cupbrcap;"],[0,"&capbrcup;"],[0,"&cupcup;"],[0,"&capcap;"],[0,"&ccups;"],[0,"&ccaps;"],[2,"&ccupssm;"],[2,"&And;"],[0,"&Or;"],[0,"&andand;"],[0,"&oror;"],[0,"&orslope;"],[0,"&andslope;"],[1,"&andv;"],[0,"&orv;"],[0,"&andd;"],[0,"&ord;"],[1,"&wedbar;"],[6,"&sdote;"],[3,"&simdot;"],[2,{v:"&congdot;",n:824,o:"&ncongdot;"}],[0,"&easter;"],[0,"&apacir;"],[0,{v:"&apE;",n:824,o:"&napE;"}],[0,"&eplus;"],[0,"&pluse;"],[0,"&Esim;"],[0,"&Colone;"],[0,"&Equal;"],[1,"&ddotseq;"],[0,"&equivDD;"],[0,"&ltcir;"],[0,"&gtcir;"],[0,"&ltquest;"],[0,"&gtquest;"],[0,{v:"&leqslant;",n:824,o:"&nleqslant;"}],[0,{v:"&geqslant;",n:824,o:"&ngeqslant;"}],[0,"&lesdot;"],[0,"&gesdot;"],[0,"&lesdoto;"],[0,"&gesdoto;"],[0,"&lesdotor;"],[0,"&gesdotol;"],[0,"&lap;"],[0,"&gap;"],[0,"&lne;"],[0,"&gne;"],[0,"&lnap;"],[0,"&gnap;"],[0,"&lEg;"],[0,"&gEl;"],[0,"&lsime;"],[0,"&gsime;"],[0,"&lsimg;"],[0,"&gsiml;"],[0,"&lgE;"],[0,"&glE;"],[0,"&lesges;"],[0,"&gesles;"],[0,"&els;"],[0,"&egs;"],[0,"&elsdot;"],[0,"&egsdot;"],[0,"&el;"],[0,"&eg;"],[2,"&siml;"],[0,"&simg;"],[0,"&simlE;"],[0,"&simgE;"],[0,{v:"&LessLess;",n:824,o:"&NotNestedLessLess;"}],[0,{v:"&GreaterGreater;",n:824,o:"&NotNestedGreaterGreater;"}],[1,"&glj;"],[0,"&gla;"],[0,"&ltcc;"],[0,"&gtcc;"],[0,"&lescc;"],[0,"&gescc;"],[0,"&smt;"],[0,"&lat;"],[0,{v:"&smte;",n:65024,o:"&smtes;"}],[0,{v:"&late;",n:65024,o:"&lates;"}],[0,"&bumpE;"],[0,{v:"&PrecedesEqual;",n:824,o:"&NotPrecedesEqual;"}],[0,{v:"&sce;",n:824,o:"&NotSucceedsEqual;"}],[2,"&prE;"],[0,"&scE;"],[0,"&precneqq;"],[0,"&scnE;"],[0,"&prap;"],[0,"&scap;"],[0,"&precnapprox;"],[0,"&scnap;"],[0,"&Pr;"],[0,"&Sc;"],[0,"&subdot;"],[0,"&supdot;"],[0,"&subplus;"],[0,"&supplus;"],[0,"&submult;"],[0,"&supmult;"],[0,"&subedot;"],[0,"&supedot;"],[0,{v:"&subE;",n:824,o:"&nsubE;"}],[0,{v:"&supE;",n:824,o:"&nsupE;"}],[0,"&subsim;"],[0,"&supsim;"],[2,{v:"&subnE;",n:65024,o:"&varsubsetneqq;"}],[0,{v:"&supnE;",n:65024,o:"&varsupsetneqq;"}],[2,"&csub;"],[0,"&csup;"],[0,"&csube;"],[0,"&csupe;"],[0,"&subsup;"],[0,"&supsub;"],[0,"&subsub;"],[0,"&supsup;"],[0,"&suphsub;"],[0,"&supdsub;"],[0,"&forkv;"],[0,"&topfork;"],[0,"&mlcp;"],[8,"&Dashv;"],[1,"&Vdashl;"],[0,"&Barv;"],[0,"&vBar;"],[0,"&vBarv;"],[1,"&Vbar;"],[0,"&Not;"],[0,"&bNot;"],[0,"&rnmid;"],[0,"&cirmid;"],[0,"&midcir;"],[0,"&topcir;"],[0,"&nhpar;"],[0,"&parsim;"],[9,{v:"&parsl;",n:8421,o:"&nparsl;"}],[44343,{n:new Map(it([[56476,"&Ascr;"],[1,"&Cscr;"],[0,"&Dscr;"],[2,"&Gscr;"],[2,"&Jscr;"],[0,"&Kscr;"],[2,"&Nscr;"],[0,"&Oscr;"],[0,"&Pscr;"],[0,"&Qscr;"],[1,"&Sscr;"],[0,"&Tscr;"],[0,"&Uscr;"],[0,"&Vscr;"],[0,"&Wscr;"],[0,"&Xscr;"],[0,"&Yscr;"],[0,"&Zscr;"],[0,"&ascr;"],[0,"&bscr;"],[0,"&cscr;"],[0,"&dscr;"],[1,"&fscr;"],[1,"&hscr;"],[0,"&iscr;"],[0,"&jscr;"],[0,"&kscr;"],[0,"&lscr;"],[0,"&mscr;"],[0,"&nscr;"],[1,"&pscr;"],[0,"&qscr;"],[0,"&rscr;"],[0,"&sscr;"],[0,"&tscr;"],[0,"&uscr;"],[0,"&vscr;"],[0,"&wscr;"],[0,"&xscr;"],[0,"&yscr;"],[0,"&zscr;"],[52,"&Afr;"],[0,"&Bfr;"],[1,"&Dfr;"],[0,"&Efr;"],[0,"&Ffr;"],[0,"&Gfr;"],[2,"&Jfr;"],[0,"&Kfr;"],[0,"&Lfr;"],[0,"&Mfr;"],[0,"&Nfr;"],[0,"&Ofr;"],[0,"&Pfr;"],[0,"&Qfr;"],[1,"&Sfr;"],[0,"&Tfr;"],[0,"&Ufr;"],[0,"&Vfr;"],[0,"&Wfr;"],[0,"&Xfr;"],[0,"&Yfr;"],[1,"&afr;"],[0,"&bfr;"],[0,"&cfr;"],[0,"&dfr;"],[0,"&efr;"],[0,"&ffr;"],[0,"&gfr;"],[0,"&hfr;"],[0,"&ifr;"],[0,"&jfr;"],[0,"&kfr;"],[0,"&lfr;"],[0,"&mfr;"],[0,"&nfr;"],[0,"&ofr;"],[0,"&pfr;"],[0,"&qfr;"],[0,"&rfr;"],[0,"&sfr;"],[0,"&tfr;"],[0,"&ufr;"],[0,"&vfr;"],[0,"&wfr;"],[0,"&xfr;"],[0,"&yfr;"],[0,"&zfr;"],[0,"&Aopf;"],[0,"&Bopf;"],[1,"&Dopf;"],[0,"&Eopf;"],[0,"&Fopf;"],[0,"&Gopf;"],[1,"&Iopf;"],[0,"&Jopf;"],[0,"&Kopf;"],[0,"&Lopf;"],[0,"&Mopf;"],[1,"&Oopf;"],[3,"&Sopf;"],[0,"&Topf;"],[0,"&Uopf;"],[0,"&Vopf;"],[0,"&Wopf;"],[0,"&Xopf;"],[0,"&Yopf;"],[1,"&aopf;"],[0,"&bopf;"],[0,"&copf;"],[0,"&dopf;"],[0,"&eopf;"],[0,"&fopf;"],[0,"&gopf;"],[0,"&hopf;"],[0,"&iopf;"],[0,"&jopf;"],[0,"&kopf;"],[0,"&lopf;"],[0,"&mopf;"],[0,"&nopf;"],[0,"&oopf;"],[0,"&popf;"],[0,"&qopf;"],[0,"&ropf;"],[0,"&sopf;"],[0,"&topf;"],[0,"&uopf;"],[0,"&vopf;"],[0,"&wopf;"],[0,"&xopf;"],[0,"&yopf;"],[0,"&zopf;"]]))}],[8906,"&fflig;"],[0,"&filig;"],[0,"&fllig;"],[0,"&ffilig;"],[0,"&ffllig;"]]));var lt={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.escapeText=e.escapeAttribute=e.escapeUTF8=e.escape=e.encodeXML=e.getCodePoint=e.xmlReplacer=void 0,e.xmlReplacer=/["&'<>$\x80-\uFFFF]/g;var t=new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]);e.getCodePoint=String.prototype.codePointAt!=null?function(o,s){return o.codePointAt(s)}:function(o,s){return(o.charCodeAt(s)&64512)===55296?(o.charCodeAt(s)-55296)*1024+o.charCodeAt(s+1)-56320+65536:o.charCodeAt(s)};function n(o){for(var s="",a=0,u;(u=e.xmlReplacer.exec(o))!==null;){var l=u.index,r=o.charCodeAt(l),p=t.get(r);p!==void 0?(s+=o.substring(a,l)+p,a=l+1):(s+="".concat(o.substring(a,l),"&#x").concat((0,e.getCodePoint)(o,l).toString(16),";"),a=e.xmlReplacer.lastIndex+=+((r&64512)===55296))}return s+o.substr(a)}e.encodeXML=n,e.escape=n;function i(o,s){return function(u){for(var l,r=0,p="";l=o.exec(u);)r!==l.index&&(p+=u.substring(r,l.index)),p+=s.get(l[0].charCodeAt(0)),r=l.index+1;return p+u.substring(r)}}e.escapeUTF8=i(/[&<>'"]/g,t),e.escapeAttribute=i(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),e.escapeText=i(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]]))})(lt);var eo=b&&b.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Ae,"__esModule",{value:!0});Ae.encodeNonAsciiHTML=Ae.encodeHTML=void 0;var to=eo(Gt),Fn=lt,no=/[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;function io(e){return On(no,e)}Ae.encodeHTML=io;function oo(e){return On(Fn.xmlReplacer,e)}Ae.encodeNonAsciiHTML=oo;function On(e,t){for(var n="",i=0,o;(o=e.exec(t))!==null;){var s=o.index;n+=t.substring(i,s);var a=t.charCodeAt(s),u=to.default.get(a);if(typeof u=="object"){if(s+1<t.length){var l=t.charCodeAt(s+1),r=typeof u.n=="number"?u.n===l?u.o:void 0:u.n.get(l);if(r!==void 0){n+=r,i=e.lastIndex+=1;continue}}u=u.v}if(u!==void 0)n+=u,i=s+1;else{var p=(0,Fn.getCodePoint)(t,s);n+="&#x".concat(p.toString(16),";"),i=e.lastIndex+=+(p!==a)}}return n+t.substr(i)}(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.decodeXMLStrict=e.decodeHTML5Strict=e.decodeHTML4Strict=e.decodeHTML5=e.decodeHTML4=e.decodeHTMLStrict=e.decodeHTML=e.decodeXML=e.encodeHTML5=e.encodeHTML4=e.encodeNonAsciiHTML=e.encodeHTML=e.escapeText=e.escapeAttribute=e.escapeUTF8=e.escape=e.encodeXML=e.encode=e.decodeStrict=e.decode=e.EncodingMode=e.DecodingMode=e.EntityLevel=void 0;var t=Jt,n=Ae,i=lt,o;(function(h){h[h.XML=0]="XML",h[h.HTML=1]="HTML"})(o=e.EntityLevel||(e.EntityLevel={}));var s;(function(h){h[h.Legacy=0]="Legacy",h[h.Strict=1]="Strict"})(s=e.DecodingMode||(e.DecodingMode={}));var a;(function(h){h[h.UTF8=0]="UTF8",h[h.ASCII=1]="ASCII",h[h.Extensive=2]="Extensive",h[h.Attribute=3]="Attribute",h[h.Text=4]="Text"})(a=e.EncodingMode||(e.EncodingMode={}));function u(h,c){c===void 0&&(c=o.XML);var g=typeof c=="number"?{level:c}:c;return g.level===o.HTML?g.mode===s.Strict?(0,t.decodeHTMLStrict)(h):(0,t.decodeHTML)(h):(0,t.decodeXML)(h)}e.decode=u;function l(h,c){c===void 0&&(c=o.XML);var g=typeof c=="number"?{level:c}:c;return g.level===o.HTML?g.mode===s.Legacy?(0,t.decodeHTML)(h):(0,t.decodeHTMLStrict)(h):(0,t.decodeXML)(h)}e.decodeStrict=l;function r(h,c){c===void 0&&(c=o.XML);var g=typeof c=="number"?{level:c}:c;return g.mode===a.UTF8?(0,i.escapeUTF8)(h):g.mode===a.Attribute?(0,i.escapeAttribute)(h):g.mode===a.Text?(0,i.escapeText)(h):g.level===o.HTML?g.mode===a.ASCII?(0,n.encodeNonAsciiHTML)(h):(0,n.encodeHTML)(h):(0,i.encodeXML)(h)}e.encode=r;var p=lt;Object.defineProperty(e,"encodeXML",{enumerable:!0,get:function(){return p.encodeXML}}),Object.defineProperty(e,"escape",{enumerable:!0,get:function(){return p.escape}}),Object.defineProperty(e,"escapeUTF8",{enumerable:!0,get:function(){return p.escapeUTF8}}),Object.defineProperty(e,"escapeAttribute",{enumerable:!0,get:function(){return p.escapeAttribute}}),Object.defineProperty(e,"escapeText",{enumerable:!0,get:function(){return p.escapeText}});var d=Ae;Object.defineProperty(e,"encodeHTML",{enumerable:!0,get:function(){return d.encodeHTML}}),Object.defineProperty(e,"encodeNonAsciiHTML",{enumerable:!0,get:function(){return d.encodeNonAsciiHTML}}),Object.defineProperty(e,"encodeHTML4",{enumerable:!0,get:function(){return d.encodeHTML}}),Object.defineProperty(e,"encodeHTML5",{enumerable:!0,get:function(){return d.encodeHTML}});var f=Jt;Object.defineProperty(e,"decodeXML",{enumerable:!0,get:function(){return f.decodeXML}}),Object.defineProperty(e,"decodeHTML",{enumerable:!0,get:function(){return f.decodeHTML}}),Object.defineProperty(e,"decodeHTMLStrict",{enumerable:!0,get:function(){return f.decodeHTMLStrict}}),Object.defineProperty(e,"decodeHTML4",{enumerable:!0,get:function(){return f.decodeHTML}}),Object.defineProperty(e,"decodeHTML5",{enumerable:!0,get:function(){return f.decodeHTML}}),Object.defineProperty(e,"decodeHTML4Strict",{enumerable:!0,get:function(){return f.decodeHTMLStrict}}),Object.defineProperty(e,"decodeHTML5Strict",{enumerable:!0,get:function(){return f.decodeHTMLStrict}}),Object.defineProperty(e,"decodeXMLStrict",{enumerable:!0,get:function(){return f.decodeXML}})})(Bn);var Je={};Object.defineProperty(Je,"__esModule",{value:!0});Je.attributeNames=Je.elementNames=void 0;Je.elementNames=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map(function(e){return[e.toLowerCase(),e]}));Je.attributeNames=new Map(["definitionURL","attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map(function(e){return[e.toLowerCase(),e]}));var Se=b&&b.__assign||function(){return Se=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},Se.apply(this,arguments)},so=b&&b.__createBinding||(Object.create?function(e,t,n,i){i===void 0&&(i=n);var o=Object.getOwnPropertyDescriptor(t,n);(!o||("get"in o?!t.__esModule:o.writable||o.configurable))&&(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,o)}:function(e,t,n,i){i===void 0&&(i=n),e[i]=t[n]}),ao=b&&b.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),ro=b&&b.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(e!=null)for(var n in e)n!=="default"&&Object.prototype.hasOwnProperty.call(e,n)&&so(t,e,n);return ao(t,e),t};Object.defineProperty(Ge,"__esModule",{value:!0});Ge.render=void 0;var se=ro(Wn),ut=Bn,Ln=Je,lo=new Set(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]);function uo(e){return e.replace(/"/g,"&quot;")}function ho(e,t){var n;if(e){var i=((n=t.encodeEntities)!==null&&n!==void 0?n:t.decodeEntities)===!1?uo:t.xmlMode||t.encodeEntities!=="utf8"?ut.encodeXML:ut.escapeAttribute;return Object.keys(e).map(function(o){var s,a,u=(s=e[o])!==null&&s!==void 0?s:"";return t.xmlMode==="foreign"&&(o=(a=Ln.attributeNames.get(o))!==null&&a!==void 0?a:o),!t.emptyAttrs&&!t.xmlMode&&u===""?o:"".concat(o,'="').concat(i(u),'"')}).join(" ")}}var hn=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]);function mt(e,t){t===void 0&&(t={});for(var n=("length"in e)?e:[e],i="",o=0;o<n.length;o++)i+=po(n[o],t);return i}Ge.render=mt;Ge.default=mt;function po(e,t){switch(e.type){case se.Root:return mt(e.children,t);case se.Doctype:case se.Directive:return mo(e);case se.Comment:return wo(e);case se.CDATA:return yo(e);case se.Script:case se.Style:case se.Tag:return fo(e,t);case se.Text:return bo(e,t)}}var co=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),go=new Set(["svg","math"]);function fo(e,t){var n;t.xmlMode==="foreign"&&(e.name=(n=Ln.elementNames.get(e.name))!==null&&n!==void 0?n:e.name,e.parent&&co.has(e.parent.name)&&(t=Se(Se({},t),{xmlMode:!1}))),!t.xmlMode&&go.has(e.name)&&(t=Se(Se({},t),{xmlMode:"foreign"}));var i="<".concat(e.name),o=ho(e.attribs,t);return o&&(i+=" ".concat(o)),e.children.length===0&&(t.xmlMode?t.selfClosingTags!==!1:t.selfClosingTags&&hn.has(e.name))?(t.xmlMode||(i+=" "),i+="/>"):(i+=">",e.children.length>0&&(i+=mt(e.children,t)),(t.xmlMode||!hn.has(e.name))&&(i+="</".concat(e.name,">"))),i}function mo(e){return"<".concat(e.data,">")}function bo(e,t){var n,i=e.data||"";return((n=t.encodeEntities)!==null&&n!==void 0?n:t.decodeEntities)!==!1&&!(!t.xmlMode&&e.parent&&lo.has(e.parent.name))&&(i=t.xmlMode||t.encodeEntities!=="utf8"?(0,ut.encodeXML)(i):(0,ut.escapeText)(i)),i}function yo(e){return"<![CDATA[".concat(e.children[0].data,"]]>")}function wo(e){return"<!--".concat(e.data,"-->")}var vo=b&&b.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(z,"__esModule",{value:!0});z.innerText=z.textContent=z.getText=z.getInnerHTML=z.getOuterHTML=void 0;var ie=De,To=vo(Ge),qo=ct;function Hn(e,t){return(0,To.default)(e,t)}z.getOuterHTML=Hn;function xo(e,t){return(0,ie.hasChildren)(e)?e.children.map(function(n){return Hn(n,t)}).join(""):""}z.getInnerHTML=xo;function st(e){return Array.isArray(e)?e.map(st).join(""):(0,ie.isTag)(e)?e.name==="br"?`
`:st(e.children):(0,ie.isCDATA)(e)?st(e.children):(0,ie.isText)(e)?e.data:""}z.getText=st;function Nt(e){return Array.isArray(e)?e.map(Nt).join(""):(0,ie.hasChildren)(e)&&!(0,ie.isComment)(e)?Nt(e.children):(0,ie.isText)(e)?e.data:""}z.textContent=Nt;function Wt(e){return Array.isArray(e)?e.map(Wt).join(""):(0,ie.hasChildren)(e)&&(e.type===qo.ElementType.Tag||(0,ie.isCDATA)(e))?Wt(e.children):(0,ie.isText)(e)?e.data:""}z.innerText=Wt;var M={};Object.defineProperty(M,"__esModule",{value:!0});M.prevElementSibling=M.nextElementSibling=M.getName=M.hasAttrib=M.getAttributeValue=M.getSiblings=M.getParent=M.getChildren=void 0;var Qt=De;function Pn(e){return(0,Qt.hasChildren)(e)?e.children:[]}M.getChildren=Pn;function Un(e){return e.parent||null}M.getParent=Un;function _o(e){var t,n,i=Un(e);if(i!=null)return Pn(i);for(var o=[e],s=e.prev,a=e.next;s!=null;)o.unshift(s),t=s,s=t.prev;for(;a!=null;)o.push(a),n=a,a=n.next;return o}M.getSiblings=_o;function Ao(e,t){var n;return(n=e.attribs)===null||n===void 0?void 0:n[t]}M.getAttributeValue=Ao;function Co(e,t){return e.attribs!=null&&Object.prototype.hasOwnProperty.call(e.attribs,t)&&e.attribs[t]!=null}M.hasAttrib=Co;function Do(e){return e.name}M.getName=Do;function ko(e){for(var t,n=e.next;n!==null&&!(0,Qt.isTag)(n);)t=n,n=t.next;return n}M.nextElementSibling=ko;function Ro(e){for(var t,n=e.prev;n!==null&&!(0,Qt.isTag)(n);)t=n,n=t.prev;return n}M.prevElementSibling=Ro;var H={};Object.defineProperty(H,"__esModule",{value:!0});H.prepend=H.prependChild=H.append=H.appendChild=H.replaceElement=H.removeElement=void 0;function Qe(e){if(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.parent){var t=e.parent.children;t.splice(t.lastIndexOf(e),1)}}H.removeElement=Qe;function So(e,t){var n=t.prev=e.prev;n&&(n.next=t);var i=t.next=e.next;i&&(i.prev=t);var o=t.parent=e.parent;if(o){var s=o.children;s[s.lastIndexOf(e)]=t,e.parent=null}}H.replaceElement=So;function jo(e,t){if(Qe(t),t.next=null,t.parent=e,e.children.push(t)>1){var n=e.children[e.children.length-2];n.next=t,t.prev=n}else t.prev=null}H.appendChild=jo;function $o(e,t){Qe(t);var n=e.parent,i=e.next;if(t.next=i,t.prev=e,e.next=t,t.parent=n,i){if(i.prev=t,n){var o=n.children;o.splice(o.lastIndexOf(i),0,t)}}else n&&n.children.push(t)}H.append=$o;function Io(e,t){if(Qe(t),t.parent=e,t.prev=null,e.children.unshift(t)!==1){var n=e.children[1];n.prev=t,t.next=n}else t.next=null}H.prependChild=Io;function Eo(e,t){Qe(t);var n=e.parent;if(n){var i=n.children;i.splice(i.indexOf(e),0,t)}e.prev&&(e.prev.next=t),t.parent=n,t.prev=e.prev,t.next=e,e.prev=t}H.prepend=Eo;var B={};Object.defineProperty(B,"__esModule",{value:!0});B.findAll=B.existsOne=B.findOne=B.findOneChild=B.find=B.filter=void 0;var Ve=De;function Jo(e,t,n,i){return n===void 0&&(n=!0),i===void 0&&(i=1/0),Array.isArray(t)||(t=[t]),Xt(e,t,n,i)}B.filter=Jo;function Xt(e,t,n,i){for(var o=[],s=0,a=t;s<a.length;s++){var u=a[s];if(e(u)&&(o.push(u),--i<=0))break;if(n&&(0,Ve.hasChildren)(u)&&u.children.length>0){var l=Xt(e,u.children,n,i);if(o.push.apply(o,l),i-=l.length,i<=0)break}}return o}B.find=Xt;function Mo(e,t){return t.find(e)}B.findOneChild=Mo;function Vn(e,t,n){n===void 0&&(n=!0);for(var i=null,o=0;o<t.length&&!i;o++){var s=t[o];if((0,Ve.isTag)(s))e(s)?i=s:n&&s.children.length>0&&(i=Vn(e,s.children,!0));else continue}return i}B.findOne=Vn;function zn(e,t){return t.some(function(n){return(0,Ve.isTag)(n)&&(e(n)||n.children.length>0&&zn(e,n.children))})}B.existsOne=zn;function No(e,t){for(var n,i=[],o=t.filter(Ve.isTag),s;s=o.shift();){var a=(n=s.children)===null||n===void 0?void 0:n.filter(Ve.isTag);a&&a.length>0&&o.unshift.apply(o,a),e(s)&&i.push(s)}return i}B.findAll=No;var G={};Object.defineProperty(G,"__esModule",{value:!0});G.getElementsByTagType=G.getElementsByTagName=G.getElementById=G.getElements=G.testElement=void 0;var xe=De,bt=B,ht={tag_name:function(e){return typeof e=="function"?function(t){return(0,xe.isTag)(t)&&e(t.name)}:e==="*"?xe.isTag:function(t){return(0,xe.isTag)(t)&&t.name===e}},tag_type:function(e){return typeof e=="function"?function(t){return e(t.type)}:function(t){return t.type===e}},tag_contains:function(e){return typeof e=="function"?function(t){return(0,xe.isText)(t)&&e(t.data)}:function(t){return(0,xe.isText)(t)&&t.data===e}}};function Gn(e,t){return typeof t=="function"?function(n){return(0,xe.isTag)(n)&&t(n.attribs[e])}:function(n){return(0,xe.isTag)(n)&&n.attribs[e]===t}}function Wo(e,t){return function(n){return e(n)||t(n)}}function Qn(e){var t=Object.keys(e).map(function(n){var i=e[n];return Object.prototype.hasOwnProperty.call(ht,n)?ht[n](i):Gn(n,i)});return t.length===0?null:t.reduce(Wo)}function Bo(e,t){var n=Qn(e);return n?n(t):!0}G.testElement=Bo;function Fo(e,t,n,i){i===void 0&&(i=1/0);var o=Qn(e);return o?(0,bt.filter)(o,t,n,i):[]}G.getElements=Fo;function Oo(e,t,n){return n===void 0&&(n=!0),Array.isArray(t)||(t=[t]),(0,bt.findOne)(Gn("id",e),t,n)}G.getElementById=Oo;function Lo(e,t,n,i){return n===void 0&&(n=!0),i===void 0&&(i=1/0),(0,bt.filter)(ht.tag_name(e),t,n,i)}G.getElementsByTagName=Lo;function Ho(e,t,n,i){return n===void 0&&(n=!0),i===void 0&&(i=1/0),(0,bt.filter)(ht.tag_type(e),t,n,i)}G.getElementsByTagType=Ho;var Xn={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.uniqueSort=e.compareDocumentPosition=e.DocumentPosition=e.removeSubsets=void 0;var t=De;function n(a){for(var u=a.length;--u>=0;){var l=a[u];if(u>0&&a.lastIndexOf(l,u-1)>=0){a.splice(u,1);continue}for(var r=l.parent;r;r=r.parent)if(a.includes(r)){a.splice(u,1);break}}return a}e.removeSubsets=n;var i;(function(a){a[a.DISCONNECTED=1]="DISCONNECTED",a[a.PRECEDING=2]="PRECEDING",a[a.FOLLOWING=4]="FOLLOWING",a[a.CONTAINS=8]="CONTAINS",a[a.CONTAINED_BY=16]="CONTAINED_BY"})(i=e.DocumentPosition||(e.DocumentPosition={}));function o(a,u){var l=[],r=[];if(a===u)return 0;for(var p=(0,t.hasChildren)(a)?a:a.parent;p;)l.unshift(p),p=p.parent;for(p=(0,t.hasChildren)(u)?u:u.parent;p;)r.unshift(p),p=p.parent;for(var d=Math.min(l.length,r.length),f=0;f<d&&l[f]===r[f];)f++;if(f===0)return i.DISCONNECTED;var h=l[f-1],c=h.children,g=l[f],x=r[f];return c.indexOf(g)>c.indexOf(x)?h===u?i.FOLLOWING|i.CONTAINED_BY:i.FOLLOWING:h===a?i.PRECEDING|i.CONTAINS:i.PRECEDING}e.compareDocumentPosition=o;function s(a){return a=a.filter(function(u,l,r){return!r.includes(u,l+1)}),a.sort(function(u,l){var r=o(u,l);return r&i.PRECEDING?-1:r&i.FOLLOWING?1:0}),a}e.uniqueSort=s})(Xn);var yt={};Object.defineProperty(yt,"__esModule",{value:!0});yt.getFeed=void 0;var Po=z,Xe=G;function Uo(e){var t=dt(Xo,e);return t?t.name==="feed"?Vo(t):zo(t):null}yt.getFeed=Uo;function Vo(e){var t,n=e.children,i={type:"atom",items:(0,Xe.getElementsByTagName)("entry",n).map(function(a){var u,l=a.children,r={media:Zn(l)};L(r,"id","id",l),L(r,"title","title",l);var p=(u=dt("link",l))===null||u===void 0?void 0:u.attribs.href;p&&(r.link=p);var d=_e("summary",l)||_e("content",l);d&&(r.description=d);var f=_e("updated",l);return f&&(r.pubDate=new Date(f)),r})};L(i,"id","id",n),L(i,"title","title",n);var o=(t=dt("link",n))===null||t===void 0?void 0:t.attribs.href;o&&(i.link=o),L(i,"description","subtitle",n);var s=_e("updated",n);return s&&(i.updated=new Date(s)),L(i,"author","email",n,!0),i}function zo(e){var t,n,i=(n=(t=dt("channel",e.children))===null||t===void 0?void 0:t.children)!==null&&n!==void 0?n:[],o={type:e.name.substr(0,3),id:"",items:(0,Xe.getElementsByTagName)("item",e.children).map(function(a){var u=a.children,l={media:Zn(u)};L(l,"id","guid",u),L(l,"title","title",u),L(l,"link","link",u),L(l,"description","description",u);var r=_e("pubDate",u);return r&&(l.pubDate=new Date(r)),l})};L(o,"title","title",i),L(o,"link","link",i),L(o,"description","description",i);var s=_e("lastBuildDate",i);return s&&(o.updated=new Date(s)),L(o,"author","managingEditor",i,!0),o}var Go=["url","type","lang"],Qo=["fileSize","bitrate","framerate","samplingrate","channels","duration","height","width"];function Zn(e){return(0,Xe.getElementsByTagName)("media:content",e).map(function(t){for(var n=t.attribs,i={medium:n.medium,isDefault:!!n.isDefault},o=0,s=Go;o<s.length;o++){var a=s[o];n[a]&&(i[a]=n[a])}for(var u=0,l=Qo;u<l.length;u++){var a=l[u];n[a]&&(i[a]=parseInt(n[a],10))}return n.expression&&(i.expression=n.expression),i})}function dt(e,t){return(0,Xe.getElementsByTagName)(e,t,!0,1)[0]}function _e(e,t,n){return n===void 0&&(n=!1),(0,Po.textContent)((0,Xe.getElementsByTagName)(e,t,n,1)).trim()}function L(e,t,n,i,o){o===void 0&&(o=!1);var s=_e(n,i,o);s&&(e[t]=s)}function Xo(e){return e==="rss"||e==="feed"||e==="rdf:RDF"}(function(e){var t=b&&b.__createBinding||(Object.create?function(o,s,a,u){u===void 0&&(u=a);var l=Object.getOwnPropertyDescriptor(s,a);(!l||("get"in l?!s.__esModule:l.writable||l.configurable))&&(l={enumerable:!0,get:function(){return s[a]}}),Object.defineProperty(o,u,l)}:function(o,s,a,u){u===void 0&&(u=a),o[u]=s[a]}),n=b&&b.__exportStar||function(o,s){for(var a in o)a!=="default"&&!Object.prototype.hasOwnProperty.call(s,a)&&t(s,o,a)};Object.defineProperty(e,"__esModule",{value:!0}),e.hasChildren=e.isDocument=e.isComment=e.isText=e.isCDATA=e.isTag=void 0,n(z,e),n(M,e),n(H,e),n(B,e),n(G,e),n(Xn,e),n(yt,e);var i=De;Object.defineProperty(e,"isTag",{enumerable:!0,get:function(){return i.isTag}}),Object.defineProperty(e,"isCDATA",{enumerable:!0,get:function(){return i.isCDATA}}),Object.defineProperty(e,"isText",{enumerable:!0,get:function(){return i.isText}}),Object.defineProperty(e,"isComment",{enumerable:!0,get:function(){return i.isComment}}),Object.defineProperty(e,"isDocument",{enumerable:!0,get:function(){return i.isDocument}}),Object.defineProperty(e,"hasChildren",{enumerable:!0,get:function(){return i.hasChildren}})})(An);var Be={trueFunc:function(){return!0},falseFunc:function(){return!1}},fe={},C;(function(e){e.Attribute="attribute",e.Pseudo="pseudo",e.PseudoElement="pseudo-element",e.Tag="tag",e.Universal="universal",e.Adjacent="adjacent",e.Child="child",e.Descendant="descendant",e.Parent="parent",e.Sibling="sibling",e.ColumnCombinator="column-combinator"})(C||(C={}));const Zo={Unknown:null,QuirksMode:"quirks",IgnoreCase:!0,CaseSensitive:!1};var $;(function(e){e.Any="any",e.Element="element",e.End="end",e.Equals="equals",e.Exists="exists",e.Hyphen="hyphen",e.Not="not",e.Start="start"})($||($={}));const dn=/^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/,Yo=/\\([\da-f]{1,6}\s?|(\s)|.)/gi,Ko=new Map([[126,$.Element],[94,$.Start],[36,$.End],[42,$.Any],[33,$.Not],[124,$.Hyphen]]),es=new Set(["has","not","matches","is","where","host","host-context"]);function Yn(e){switch(e.type){case C.Adjacent:case C.Child:case C.Descendant:case C.Parent:case C.Sibling:case C.ColumnCombinator:return!0;default:return!1}}const ts=new Set(["contains","icontains"]);function ns(e,t,n){const i=parseInt(t,16)-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,i&1023|56320)}function Oe(e){return e.replace(Yo,ns)}function Rt(e){return e===39||e===34}function pn(e){return e===32||e===9||e===10||e===12||e===13}function is(e){const t=[],n=Kn(t,`${e}`,0);if(n<e.length)throw new Error(`Unmatched selector: ${e.slice(n)}`);return t}function Kn(e,t,n){let i=[];function o(f){const h=t.slice(n+f).match(dn);if(!h)throw new Error(`Expected name, found ${t.slice(n)}`);const[c]=h;return n+=f+c.length,Oe(c)}function s(f){for(n+=f;n<t.length&&pn(t.charCodeAt(n));)n++}function a(){n+=1;const f=n;let h=1;for(;h>0&&n<t.length;n++)t.charCodeAt(n)===40&&!u(n)?h++:t.charCodeAt(n)===41&&!u(n)&&h--;if(h)throw new Error("Parenthesis not matched");return Oe(t.slice(f,n-1))}function u(f){let h=0;for(;t.charCodeAt(--f)===92;)h++;return(h&1)===1}function l(){if(i.length>0&&Yn(i[i.length-1]))throw new Error("Did not expect successive traversals.")}function r(f){if(i.length>0&&i[i.length-1].type===C.Descendant){i[i.length-1].type=f;return}l(),i.push({type:f})}function p(f,h){i.push({type:C.Attribute,name:f,action:h,value:o(1),namespace:null,ignoreCase:"quirks"})}function d(){if(i.length&&i[i.length-1].type===C.Descendant&&i.pop(),i.length===0)throw new Error("Empty sub-selector");e.push(i)}if(s(0),t.length===n)return n;e:for(;n<t.length;){const f=t.charCodeAt(n);switch(f){case 32:case 9:case 10:case 12:case 13:{(i.length===0||i[0].type!==C.Descendant)&&(l(),i.push({type:C.Descendant})),s(1);break}case 62:{r(C.Child),s(1);break}case 60:{r(C.Parent),s(1);break}case 126:{r(C.Sibling),s(1);break}case 43:{r(C.Adjacent),s(1);break}case 46:{p("class",$.Element);break}case 35:{p("id",$.Equals);break}case 91:{s(1);let h,c=null;t.charCodeAt(n)===124?h=o(1):t.startsWith("*|",n)?(c="*",h=o(2)):(h=o(0),t.charCodeAt(n)===124&&t.charCodeAt(n+1)!==61&&(c=h,h=o(1))),s(0);let g=$.Exists;const x=Ko.get(t.charCodeAt(n));if(x){if(g=x,t.charCodeAt(n+1)!==61)throw new Error("Expected `=`");s(2)}else t.charCodeAt(n)===61&&(g=$.Equals,s(1));let q="",m=null;if(g!=="exists"){if(Rt(t.charCodeAt(n))){const y=t.charCodeAt(n);let _=n+1;for(;_<t.length&&(t.charCodeAt(_)!==y||u(_));)_+=1;if(t.charCodeAt(_)!==y)throw new Error("Attribute value didn't end");q=Oe(t.slice(n+1,_)),n=_+1}else{const y=n;for(;n<t.length&&(!pn(t.charCodeAt(n))&&t.charCodeAt(n)!==93||u(n));)n+=1;q=Oe(t.slice(y,n))}s(0);const w=t.charCodeAt(n)|32;w===115?(m=!1,s(1)):w===105&&(m=!0,s(1))}if(t.charCodeAt(n)!==93)throw new Error("Attribute selector didn't terminate");n+=1;const v={type:C.Attribute,name:h,action:g,value:q,namespace:c,ignoreCase:m};i.push(v);break}case 58:{if(t.charCodeAt(n+1)===58){i.push({type:C.PseudoElement,name:o(2).toLowerCase(),data:t.charCodeAt(n)===40?a():null});continue}const h=o(1).toLowerCase();let c=null;if(t.charCodeAt(n)===40)if(es.has(h)){if(Rt(t.charCodeAt(n+1)))throw new Error(`Pseudo-selector ${h} cannot be quoted`);if(c=[],n=Kn(c,t,n+1),t.charCodeAt(n)!==41)throw new Error(`Missing closing parenthesis in :${h} (${t})`);n+=1}else{if(c=a(),ts.has(h)){const g=c.charCodeAt(0);g===c.charCodeAt(c.length-1)&&Rt(g)&&(c=c.slice(1,-1))}c=Oe(c)}i.push({type:C.Pseudo,name:h,data:c});break}case 44:{d(),i=[],s(1);break}default:{if(t.startsWith("/*",n)){const g=t.indexOf("*/",n+2);if(g<0)throw new Error("Comment was not terminated");n=g+2,i.length===0&&s(0);break}let h=null,c;if(f===42)n+=1,c="*";else if(f===124){if(c="",t.charCodeAt(n+1)===124){r(C.ColumnCombinator),s(2);break}}else if(dn.test(t.slice(n)))c=o(0);else break e;t.charCodeAt(n)===124&&t.charCodeAt(n+1)!==124&&(h=c,t.charCodeAt(n+1)===42?(c="*",n+=2):c=o(1)),i.push(c==="*"?{type:C.Universal,namespace:h}:{type:C.Tag,name:c,namespace:h})}}}return d(),n}const ei=["\\",'"'],ti=[...ei,"(",")"],os=new Set(ei.map(e=>e.charCodeAt(0))),cn=new Set(ti.map(e=>e.charCodeAt(0))),je=new Set([...ti,"~","^","$","*","+","!","|",":","[","]"," ","."].map(e=>e.charCodeAt(0)));function ni(e){return e.map(t=>t.map(ss).join("")).join(", ")}function ss(e,t,n){switch(e.type){case C.Child:return t===0?"> ":" > ";case C.Parent:return t===0?"< ":" < ";case C.Sibling:return t===0?"~ ":" ~ ";case C.Adjacent:return t===0?"+ ":" + ";case C.Descendant:return" ";case C.ColumnCombinator:return t===0?"|| ":" || ";case C.Universal:return e.namespace==="*"&&t+1<n.length&&"name"in n[t+1]?"":`${ii(e.namespace)}*`;case C.Tag:return gn(e);case C.PseudoElement:return`::${le(e.name,je)}${e.data===null?"":`(${le(e.data,cn)})`}`;case C.Pseudo:return`:${le(e.name,je)}${e.data===null?"":`(${typeof e.data=="string"?le(e.data,cn):ni(e.data)})`}`;case C.Attribute:{if(e.name==="id"&&e.action===$.Equals&&e.ignoreCase==="quirks"&&!e.namespace)return`#${le(e.value,je)}`;if(e.name==="class"&&e.action===$.Element&&e.ignoreCase==="quirks"&&!e.namespace)return`.${le(e.value,je)}`;const i=gn(e);return e.action===$.Exists?`[${i}]`:`[${i}${as(e.action)}="${le(e.value,os)}"${e.ignoreCase===null?"":e.ignoreCase?" i":" s"}]`}}}function as(e){switch(e){case $.Equals:return"";case $.Element:return"~";case $.Start:return"^";case $.End:return"$";case $.Any:return"*";case $.Not:return"!";case $.Hyphen:return"|";case $.Exists:throw new Error("Shouldn't be here")}}function gn(e){return`${ii(e.namespace)}${le(e.name,je)}`}function ii(e){return e!==null?`${e==="*"?"*":le(e,je)}|`:""}function le(e,t){let n=0,i="";for(let o=0;o<e.length;o++)t.has(e.charCodeAt(o))&&(i+=`${e.slice(n,o)}\\${e.charAt(o)}`,n=o+1);return i.length>0?i+e.slice(n):e}const rs=Object.freeze(Object.defineProperty({__proto__:null,get AttributeAction(){return $},IgnoreCaseMode:Zo,get SelectorType(){return C},isTraversal:Yn,parse:is,stringify:ni},Symbol.toStringTag,{value:"Module"})),wt=Si(rs);var Fe={};Object.defineProperty(Fe,"__esModule",{value:!0});Fe.isTraversal=void 0;var V=wt,oi=new Map([[V.SelectorType.Universal,50],[V.SelectorType.Tag,30],[V.SelectorType.Attribute,1],[V.SelectorType.Pseudo,0]]);function ls(e){return!oi.has(e.type)}Fe.isTraversal=ls;var us=new Map([[V.AttributeAction.Exists,10],[V.AttributeAction.Equals,8],[V.AttributeAction.Not,7],[V.AttributeAction.Start,6],[V.AttributeAction.End,6],[V.AttributeAction.Any,5]]);function hs(e){for(var t=e.map(si),n=1;n<e.length;n++){var i=t[n];if(!(i<0))for(var o=n-1;o>=0&&i<t[o];o--){var s=e[o+1];e[o+1]=e[o],e[o]=s,t[o+1]=t[o],t[o]=i}}}Fe.default=hs;function si(e){var t,n,i=(t=oi.get(e.type))!==null&&t!==void 0?t:-1;return e.type===V.SelectorType.Attribute?(i=(n=us.get(e.action))!==null&&n!==void 0?n:4,e.action===V.AttributeAction.Equals&&e.name==="id"&&(i=9),e.ignoreCase&&(i>>=1)):e.type===V.SelectorType.Pseudo&&(e.data?e.name==="has"||e.name==="contains"?i=0:Array.isArray(e.data)?(i=Math.min.apply(Math,e.data.map(function(o){return Math.min.apply(Math,o.map(si))})),i<0&&(i=0)):i=2:i=3),i}var vt={},Tt={},ds=b&&b.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Tt,"__esModule",{value:!0});Tt.attributeRules=void 0;var ot=ds(Be),ps=/[-[\]{}()*+?.,\\^$|#\s]/g;function fn(e){return e.replace(ps,"\\$&")}var cs=new Set(["accept","accept-charset","align","alink","axis","bgcolor","charset","checked","clear","codetype","color","compact","declare","defer","dir","direction","disabled","enctype","face","frame","hreflang","http-equiv","lang","language","link","media","method","multiple","nohref","noresize","noshade","nowrap","readonly","rel","rev","rules","scope","scrolling","selected","shape","target","text","type","valign","valuetype","vlink"]);function qe(e,t){return typeof e.ignoreCase=="boolean"?e.ignoreCase:e.ignoreCase==="quirks"?!!t.quirksMode:!t.xmlMode&&cs.has(e.name)}Tt.attributeRules={equals:function(e,t,n){var i=n.adapter,o=t.name,s=t.value;return qe(t,n)?(s=s.toLowerCase(),function(a){var u=i.getAttributeValue(a,o);return u!=null&&u.length===s.length&&u.toLowerCase()===s&&e(a)}):function(a){return i.getAttributeValue(a,o)===s&&e(a)}},hyphen:function(e,t,n){var i=n.adapter,o=t.name,s=t.value,a=s.length;return qe(t,n)?(s=s.toLowerCase(),function(l){var r=i.getAttributeValue(l,o);return r!=null&&(r.length===a||r.charAt(a)==="-")&&r.substr(0,a).toLowerCase()===s&&e(l)}):function(l){var r=i.getAttributeValue(l,o);return r!=null&&(r.length===a||r.charAt(a)==="-")&&r.substr(0,a)===s&&e(l)}},element:function(e,t,n){var i=n.adapter,o=t.name,s=t.value;if(/\s/.test(s))return ot.default.falseFunc;var a=new RegExp("(?:^|\\s)".concat(fn(s),"(?:$|\\s)"),qe(t,n)?"i":"");return function(l){var r=i.getAttributeValue(l,o);return r!=null&&r.length>=s.length&&a.test(r)&&e(l)}},exists:function(e,t,n){var i=t.name,o=n.adapter;return function(s){return o.hasAttrib(s,i)&&e(s)}},start:function(e,t,n){var i=n.adapter,o=t.name,s=t.value,a=s.length;return a===0?ot.default.falseFunc:qe(t,n)?(s=s.toLowerCase(),function(u){var l=i.getAttributeValue(u,o);return l!=null&&l.length>=a&&l.substr(0,a).toLowerCase()===s&&e(u)}):function(u){var l;return!!(!((l=i.getAttributeValue(u,o))===null||l===void 0)&&l.startsWith(s))&&e(u)}},end:function(e,t,n){var i=n.adapter,o=t.name,s=t.value,a=-s.length;return a===0?ot.default.falseFunc:qe(t,n)?(s=s.toLowerCase(),function(u){var l;return((l=i.getAttributeValue(u,o))===null||l===void 0?void 0:l.substr(a).toLowerCase())===s&&e(u)}):function(u){var l;return!!(!((l=i.getAttributeValue(u,o))===null||l===void 0)&&l.endsWith(s))&&e(u)}},any:function(e,t,n){var i=n.adapter,o=t.name,s=t.value;if(s==="")return ot.default.falseFunc;if(qe(t,n)){var a=new RegExp(fn(s),"i");return function(l){var r=i.getAttributeValue(l,o);return r!=null&&r.length>=s.length&&a.test(r)&&e(l)}}return function(u){var l;return!!(!((l=i.getAttributeValue(u,o))===null||l===void 0)&&l.includes(s))&&e(u)}},not:function(e,t,n){var i=n.adapter,o=t.name,s=t.value;return s===""?function(a){return!!i.getAttributeValue(a,o)&&e(a)}:qe(t,n)?(s=s.toLowerCase(),function(a){var u=i.getAttributeValue(a,o);return(u==null||u.length!==s.length||u.toLowerCase()!==s)&&e(a)}):function(a){return i.getAttributeValue(a,o)!==s&&e(a)}}};var Zt={},ai={},ri={},qt={};Object.defineProperty(qt,"__esModule",{value:!0});qt.parse=void 0;var gs=new Set([9,10,12,13,32]),mn="0".charCodeAt(0),fs="9".charCodeAt(0);function ms(e){if(e=e.trim().toLowerCase(),e==="even")return[2,0];if(e==="odd")return[2,1];var t=0,n=0,i=s(),o=a();if(t<e.length&&e.charAt(t)==="n"&&(t++,n=i*(o??1),u(),t<e.length?(i=s(),u(),o=a()):i=o=0),o===null||t<e.length)throw new Error("n-th rule couldn't be parsed ('".concat(e,"')"));return[n,i*o];function s(){return e.charAt(t)==="-"?(t++,-1):(e.charAt(t)==="+"&&t++,1)}function a(){for(var l=t,r=0;t<e.length&&e.charCodeAt(t)>=mn&&e.charCodeAt(t)<=fs;)r=r*10+(e.charCodeAt(t)-mn),t++;return t===l?null:r}function u(){for(;t<e.length&&gs.has(e.charCodeAt(t));)t++}}qt.parse=ms;var Me={},bs=b&&b.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Me,"__esModule",{value:!0});Me.generate=Me.compile=void 0;var bn=bs(Be);function ys(e){var t=e[0],n=e[1]-1;if(n<0&&t<=0)return bn.default.falseFunc;if(t===-1)return function(s){return s<=n};if(t===0)return function(s){return s===n};if(t===1)return n<0?bn.default.trueFunc:function(s){return s>=n};var i=Math.abs(t),o=(n%i+i)%i;return t>1?function(s){return s>=n&&s%i===o}:function(s){return s<=n&&s%i===o}}Me.compile=ys;function ws(e){var t=e[0],n=e[1]-1,i=0;if(t<0){var o=-t,s=(n%o+o)%o;return function(){var a=s+o*i++;return a>n?null:a}}return t===0?n<0?function(){return null}:function(){return i++===0?n:null}:(n<0&&(n+=t*Math.ceil(-n/t)),function(){return t*i+++n})}Me.generate=ws;(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.sequence=e.generate=e.compile=e.parse=void 0;var t=qt;Object.defineProperty(e,"parse",{enumerable:!0,get:function(){return t.parse}});var n=Me;Object.defineProperty(e,"compile",{enumerable:!0,get:function(){return n.compile}}),Object.defineProperty(e,"generate",{enumerable:!0,get:function(){return n.generate}});function i(s){return(0,n.compile)((0,t.parse)(s))}e.default=i;function o(s){return(0,n.generate)((0,t.parse)(s))}e.sequence=o})(ri);(function(e){var t=b&&b.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(e,"__esModule",{value:!0}),e.filters=void 0;var n=t(ri),i=t(Be);function o(a,u){return function(l){var r=u.getParent(l);return r!=null&&u.isTag(r)&&a(l)}}e.filters={contains:function(a,u,l){var r=l.adapter;return function(d){return a(d)&&r.getText(d).includes(u)}},icontains:function(a,u,l){var r=l.adapter,p=u.toLowerCase();return function(f){return a(f)&&r.getText(f).toLowerCase().includes(p)}},"nth-child":function(a,u,l){var r=l.adapter,p=l.equals,d=(0,n.default)(u);return d===i.default.falseFunc?i.default.falseFunc:d===i.default.trueFunc?o(a,r):function(h){for(var c=r.getSiblings(h),g=0,x=0;x<c.length&&!p(h,c[x]);x++)r.isTag(c[x])&&g++;return d(g)&&a(h)}},"nth-last-child":function(a,u,l){var r=l.adapter,p=l.equals,d=(0,n.default)(u);return d===i.default.falseFunc?i.default.falseFunc:d===i.default.trueFunc?o(a,r):function(h){for(var c=r.getSiblings(h),g=0,x=c.length-1;x>=0&&!p(h,c[x]);x--)r.isTag(c[x])&&g++;return d(g)&&a(h)}},"nth-of-type":function(a,u,l){var r=l.adapter,p=l.equals,d=(0,n.default)(u);return d===i.default.falseFunc?i.default.falseFunc:d===i.default.trueFunc?o(a,r):function(h){for(var c=r.getSiblings(h),g=0,x=0;x<c.length;x++){var q=c[x];if(p(h,q))break;r.isTag(q)&&r.getName(q)===r.getName(h)&&g++}return d(g)&&a(h)}},"nth-last-of-type":function(a,u,l){var r=l.adapter,p=l.equals,d=(0,n.default)(u);return d===i.default.falseFunc?i.default.falseFunc:d===i.default.trueFunc?o(a,r):function(h){for(var c=r.getSiblings(h),g=0,x=c.length-1;x>=0;x--){var q=c[x];if(p(h,q))break;r.isTag(q)&&r.getName(q)===r.getName(h)&&g++}return d(g)&&a(h)}},root:function(a,u,l){var r=l.adapter;return function(p){var d=r.getParent(p);return(d==null||!r.isTag(d))&&a(p)}},scope:function(a,u,l,r){var p=l.equals;return!r||r.length===0?e.filters.root(a,u,l):r.length===1?function(d){return p(r[0],d)&&a(d)}:function(d){return r.includes(d)&&a(d)}},hover:s("isHovered"),visited:s("isVisited"),active:s("isActive")};function s(a){return function(l,r,p){var d=p.adapter,f=d[a];return typeof f!="function"?i.default.falseFunc:function(c){return f(c)&&l(c)}}}})(ai);var Ne={};Object.defineProperty(Ne,"__esModule",{value:!0});Ne.verifyPseudoArgs=Ne.pseudos=void 0;Ne.pseudos={empty:function(e,t){var n=t.adapter;return!n.getChildren(e).some(function(i){return n.isTag(i)||n.getText(i)!==""})},"first-child":function(e,t){var n=t.adapter,i=t.equals;if(n.prevElementSibling)return n.prevElementSibling(e)==null;var o=n.getSiblings(e).find(function(s){return n.isTag(s)});return o!=null&&i(e,o)},"last-child":function(e,t){for(var n=t.adapter,i=t.equals,o=n.getSiblings(e),s=o.length-1;s>=0;s--){if(i(e,o[s]))return!0;if(n.isTag(o[s]))break}return!1},"first-of-type":function(e,t){for(var n=t.adapter,i=t.equals,o=n.getSiblings(e),s=n.getName(e),a=0;a<o.length;a++){var u=o[a];if(i(e,u))return!0;if(n.isTag(u)&&n.getName(u)===s)break}return!1},"last-of-type":function(e,t){for(var n=t.adapter,i=t.equals,o=n.getSiblings(e),s=n.getName(e),a=o.length-1;a>=0;a--){var u=o[a];if(i(e,u))return!0;if(n.isTag(u)&&n.getName(u)===s)break}return!1},"only-of-type":function(e,t){var n=t.adapter,i=t.equals,o=n.getName(e);return n.getSiblings(e).every(function(s){return i(e,s)||!n.isTag(s)||n.getName(s)!==o})},"only-child":function(e,t){var n=t.adapter,i=t.equals;return n.getSiblings(e).every(function(o){return i(e,o)||!n.isTag(o)})}};function vs(e,t,n,i){if(n===null){if(e.length>i)throw new Error("Pseudo-class :".concat(t," requires an argument"))}else if(e.length===i)throw new Error("Pseudo-class :".concat(t," doesn't have any arguments"))}Ne.verifyPseudoArgs=vs;var xt={};Object.defineProperty(xt,"__esModule",{value:!0});xt.aliases=void 0;xt.aliases={"any-link":":is(a, area, link)[href]",link:":any-link:not(:visited)",disabled:`:is(
        :is(button, input, select, textarea, optgroup, option)[disabled],
        optgroup[disabled] > option,
        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)
    )`,enabled:":not(:disabled)",checked:":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",required:":is(input, select, textarea)[required]",optional:":is(input, select, textarea):not([required])",selected:"option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",checkbox:"[type=checkbox]",file:"[type=file]",password:"[type=password]",radio:"[type=radio]",reset:"[type=reset]",image:"[type=image]",submit:"[type=submit]",parent:":not(:empty)",header:":is(h1, h2, h3, h4, h5, h6)",button:":is(button, input[type=button])",input:":is(input, textarea, select, button)",text:"input:is(:not([type!='']), [type=text])"};var _t={};(function(e){var t=b&&b.__spreadArray||function(r,p,d){if(d||arguments.length===2)for(var f=0,h=p.length,c;f<h;f++)(c||!(f in p))&&(c||(c=Array.prototype.slice.call(p,0,f)),c[f]=p[f]);return r.concat(c||Array.prototype.slice.call(p))},n=b&&b.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(e,"__esModule",{value:!0}),e.subselects=e.getNextSiblings=e.ensureIsTag=e.PLACEHOLDER_ELEMENT=void 0;var i=n(Be),o=Fe;e.PLACEHOLDER_ELEMENT={};function s(r,p){return r===i.default.falseFunc?i.default.falseFunc:function(d){return p.isTag(d)&&r(d)}}e.ensureIsTag=s;function a(r,p){var d=p.getSiblings(r);if(d.length<=1)return[];var f=d.indexOf(r);return f<0||f===d.length-1?[]:d.slice(f+1).filter(p.isTag)}e.getNextSiblings=a;function u(r){return{xmlMode:!!r.xmlMode,lowerCaseAttributeNames:!!r.lowerCaseAttributeNames,lowerCaseTags:!!r.lowerCaseTags,quirksMode:!!r.quirksMode,cacheResults:!!r.cacheResults,pseudos:r.pseudos,adapter:r.adapter,equals:r.equals}}var l=function(r,p,d,f,h){var c=h(p,u(d),f);return c===i.default.trueFunc?r:c===i.default.falseFunc?i.default.falseFunc:function(g){return c(g)&&r(g)}};e.subselects={is:l,matches:l,where:l,not:function(r,p,d,f,h){var c=h(p,u(d),f);return c===i.default.falseFunc?r:c===i.default.trueFunc?i.default.falseFunc:function(g){return!c(g)&&r(g)}},has:function(r,p,d,f,h){var c=d.adapter,g=u(d);g.relativeSelector=!0;var x=p.some(function(y){return y.some(o.isTraversal)})?[e.PLACEHOLDER_ELEMENT]:void 0,q=h(p,g,x);if(q===i.default.falseFunc)return i.default.falseFunc;var m=s(q,c);if(x&&q!==i.default.trueFunc){var v=q.shouldTestNextSiblings,w=v===void 0?!1:v;return function(y){if(!r(y))return!1;x[0]=y;var _=c.getChildren(y),D=w?t(t([],_,!0),a(y,c),!0):_;return c.existsOne(m,D)}}return function(y){return r(y)&&c.existsOne(m,c.getChildren(y))}}}})(_t);(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.compilePseudoSelector=e.aliases=e.pseudos=e.filters=void 0;var t=wt,n=ai;Object.defineProperty(e,"filters",{enumerable:!0,get:function(){return n.filters}});var i=Ne;Object.defineProperty(e,"pseudos",{enumerable:!0,get:function(){return i.pseudos}});var o=xt;Object.defineProperty(e,"aliases",{enumerable:!0,get:function(){return o.aliases}});var s=_t;function a(u,l,r,p,d){var f,h=l.name,c=l.data;if(Array.isArray(c)){if(!(h in s.subselects))throw new Error("Unknown pseudo-class :".concat(h,"(").concat(c,")"));return s.subselects[h](u,c,r,p,d)}var g=(f=r.pseudos)===null||f===void 0?void 0:f[h],x=typeof g=="string"?g:o.aliases[h];if(typeof x=="string"){if(c!=null)throw new Error("Pseudo ".concat(h," doesn't have any arguments"));var q=(0,t.parse)(x);return s.subselects.is(u,q,r,p,d)}if(typeof g=="function")return(0,i.verifyPseudoArgs)(g,h,c,1),function(v){return g(v,c)&&u(v)};if(h in n.filters)return n.filters[h](u,c,r,p);if(h in i.pseudos){var m=i.pseudos[h];return(0,i.verifyPseudoArgs)(m,h,c,2),function(v){return m(v,r,c)&&u(v)}}throw new Error("Unknown pseudo-class :".concat(h))}e.compilePseudoSelector=a})(Zt);Object.defineProperty(vt,"__esModule",{value:!0});vt.compileGeneralSelector=void 0;var Ts=Tt,qs=Zt,Z=wt;function St(e,t){var n=t.getParent(e);return n&&t.isTag(n)?n:null}function xs(e,t,n,i,o){var s=n.adapter,a=n.equals;switch(t.type){case Z.SelectorType.PseudoElement:throw new Error("Pseudo-elements are not supported by css-select");case Z.SelectorType.ColumnCombinator:throw new Error("Column combinators are not yet supported by css-select");case Z.SelectorType.Attribute:{if(t.namespace!=null)throw new Error("Namespaced attributes are not yet supported by css-select");return(!n.xmlMode||n.lowerCaseAttributeNames)&&(t.name=t.name.toLowerCase()),Ts.attributeRules[t.action](e,t,n)}case Z.SelectorType.Pseudo:return(0,qs.compilePseudoSelector)(e,t,n,i,o);case Z.SelectorType.Tag:{if(t.namespace!=null)throw new Error("Namespaced tag names are not yet supported by css-select");var u=t.name;return(!n.xmlMode||n.lowerCaseTags)&&(u=u.toLowerCase()),function(p){return s.getName(p)===u&&e(p)}}case Z.SelectorType.Descendant:{if(n.cacheResults===!1||typeof WeakSet>"u")return function(p){for(var d=p;d=St(d,s);)if(e(d))return!0;return!1};var l=new WeakSet;return function(p){for(var d=p;d=St(d,s);)if(!l.has(d)){if(s.isTag(d)&&e(d))return!0;l.add(d)}return!1}}case"_flexibleDescendant":return function(p){var d=p;do if(e(d))return!0;while(d=St(d,s));return!1};case Z.SelectorType.Parent:return function(p){return s.getChildren(p).some(function(d){return s.isTag(d)&&e(d)})};case Z.SelectorType.Child:return function(p){var d=s.getParent(p);return d!=null&&s.isTag(d)&&e(d)};case Z.SelectorType.Sibling:return function(p){for(var d=s.getSiblings(p),f=0;f<d.length;f++){var h=d[f];if(a(p,h))break;if(s.isTag(h)&&e(h))return!0}return!1};case Z.SelectorType.Adjacent:return s.prevElementSibling?function(p){var d=s.prevElementSibling(p);return d!=null&&e(d)}:function(p){for(var d=s.getSiblings(p),f,h=0;h<d.length;h++){var c=d[h];if(a(p,c))break;s.isTag(c)&&(f=c)}return!!f&&e(f)};case Z.SelectorType.Universal:{if(t.namespace!=null&&t.namespace!=="*")throw new Error("Namespaced universal selectors are not yet supported by css-select");return e}}}vt.compileGeneralSelector=xs;var _s=b&&b.__createBinding||(Object.create?function(e,t,n,i){i===void 0&&(i=n);var o=Object.getOwnPropertyDescriptor(t,n);(!o||("get"in o?!t.__esModule:o.writable||o.configurable))&&(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,o)}:function(e,t,n,i){i===void 0&&(i=n),e[i]=t[n]}),As=b&&b.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),Cs=b&&b.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(e!=null)for(var n in e)n!=="default"&&Object.prototype.hasOwnProperty.call(e,n)&&_s(t,e,n);return As(t,e),t},Ds=b&&b.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(fe,"__esModule",{value:!0});fe.compileToken=fe.compileUnsafe=fe.compile=void 0;var he=wt,ge=Ds(Be),Bt=Cs(Fe),ks=vt,li=_t;function Rs(e,t,n){var i=ui(e,t,n);return(0,li.ensureIsTag)(i,t.adapter)}fe.compile=Rs;function ui(e,t,n){var i=typeof e=="string"?(0,he.parse)(e):e;return Yt(i,t,n)}fe.compileUnsafe=ui;function hi(e){return e.type===he.SelectorType.Pseudo&&(e.name==="scope"||Array.isArray(e.data)&&e.data.some(function(t){return t.some(hi)}))}var Ss={type:he.SelectorType.Descendant},js={type:"_flexibleDescendant"},$s={type:he.SelectorType.Pseudo,name:"scope",data:null};function Is(e,t,n){for(var i=t.adapter,o=!!(n!=null&&n.every(function(l){var r=i.isTag(l)&&i.getParent(l);return l===li.PLACEHOLDER_ELEMENT||r&&i.isTag(r)})),s=0,a=e;s<a.length;s++){var u=a[s];if(!(u.length>0&&(0,Bt.isTraversal)(u[0])&&u[0].type!==he.SelectorType.Descendant))if(o&&!u.some(hi))u.unshift(Ss);else continue;u.unshift($s)}}function Yt(e,t,n){var i;e.forEach(Bt.default),n=(i=t.context)!==null&&i!==void 0?i:n;var o=Array.isArray(n),s=n&&(Array.isArray(n)?n:[n]);if(t.relativeSelector!==!1)Is(e,t,s);else if(e.some(function(l){return l.length>0&&(0,Bt.isTraversal)(l[0])}))throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");var a=!1,u=e.map(function(l){if(l.length>=2){var r=l[0],p=l[1];r.type!==he.SelectorType.Pseudo||r.name!=="scope"||(o&&p.type===he.SelectorType.Descendant?l[1]=js:(p.type===he.SelectorType.Adjacent||p.type===he.SelectorType.Sibling)&&(a=!0))}return Es(l,t,s)}).reduce(Js,ge.default.falseFunc);return u.shouldTestNextSiblings=a,u}fe.compileToken=Yt;function Es(e,t,n){var i;return e.reduce(function(o,s){return o===ge.default.falseFunc?ge.default.falseFunc:(0,ks.compileGeneralSelector)(o,s,t,n,Yt)},(i=t.rootFunc)!==null&&i!==void 0?i:ge.default.trueFunc)}function Js(e,t){return t===ge.default.falseFunc||e===ge.default.trueFunc?e:e===ge.default.falseFunc||t===ge.default.trueFunc?t:function(i){return e(i)||t(i)}}(function(e){var t=b&&b.__createBinding||(Object.create?function(m,v,w,y){y===void 0&&(y=w);var _=Object.getOwnPropertyDescriptor(v,w);(!_||("get"in _?!v.__esModule:_.writable||_.configurable))&&(_={enumerable:!0,get:function(){return v[w]}}),Object.defineProperty(m,y,_)}:function(m,v,w,y){y===void 0&&(y=w),m[y]=v[w]}),n=b&&b.__setModuleDefault||(Object.create?function(m,v){Object.defineProperty(m,"default",{enumerable:!0,value:v})}:function(m,v){m.default=v}),i=b&&b.__importStar||function(m){if(m&&m.__esModule)return m;var v={};if(m!=null)for(var w in m)w!=="default"&&Object.prototype.hasOwnProperty.call(m,w)&&t(v,m,w);return n(v,m),v},o=b&&b.__importDefault||function(m){return m&&m.__esModule?m:{default:m}};Object.defineProperty(e,"__esModule",{value:!0}),e.aliases=e.pseudos=e.filters=e.is=e.selectOne=e.selectAll=e.prepareContext=e._compileToken=e._compileUnsafe=e.compile=void 0;var s=i(An),a=o(Be),u=fe,l=_t,r=function(m,v){return m===v},p={adapter:s,equals:r};function d(m){var v,w,y,_,D=m??p;return(v=D.adapter)!==null&&v!==void 0||(D.adapter=s),(w=D.equals)!==null&&w!==void 0||(D.equals=(_=(y=D.adapter)===null||y===void 0?void 0:y.equals)!==null&&_!==void 0?_:r),D}function f(m){return function(w,y,_){var D=d(y);return m(w,D,_)}}e.compile=f(u.compile),e._compileUnsafe=f(u.compileUnsafe),e._compileToken=f(u.compileToken);function h(m){return function(w,y,_){var D=d(_);typeof w!="function"&&(w=(0,u.compileUnsafe)(w,D,y));var R=c(y,D.adapter,w.shouldTestNextSiblings);return m(w,R,D)}}function c(m,v,w){return w===void 0&&(w=!1),w&&(m=g(m,v)),Array.isArray(m)?v.removeSubsets(m):v.getChildren(m)}e.prepareContext=c;function g(m,v){for(var w=Array.isArray(m)?m.slice(0):[m],y=w.length,_=0;_<y;_++){var D=(0,l.getNextSiblings)(w[_],v);w.push.apply(w,D)}return w}e.selectAll=h(function(m,v,w){return m===a.default.falseFunc||!v||v.length===0?[]:w.adapter.findAll(m,v)}),e.selectOne=h(function(m,v,w){return m===a.default.falseFunc||!v||v.length===0?null:w.adapter.findOne(m,v)});function x(m,v,w){var y=d(w);return(typeof v=="function"?v:(0,u.compile)(v,y))(m)}e.is=x,e.default=e.selectAll;var q=Zt;Object.defineProperty(e,"filters",{enumerable:!0,get:function(){return q.filters}}),Object.defineProperty(e,"pseudos",{enumerable:!0,get:function(){return q.pseudos}}),Object.defineProperty(e,"aliases",{enumerable:!0,get:function(){return q.aliases}})})(_n);var Kt={};Object.defineProperty(Kt,"__esModule",{value:!0});function Ms(e){return e[e.length-1]}Kt.default=Ms;var en={},Ns=b&&b.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(en,"__esModule",{value:!0});var Ws=Ns(Ce);function At(e){return e&&e.nodeType===Ws.default.ELEMENT_NODE}function di(e,t){return At(e)?e.getAttribute(t):void 0}function Bs(e){return(e&&e.rawTagName||"").toLowerCase()}function Ze(e){return e&&e.childNodes}function tn(e){return e?e.parentNode:null}function Fs(e){return e.text}function Os(e){for(var t=e.length,n,i,o;--t>-1;){for(n=i=e[t],e[t]=null,o=!0;i;){if(e.indexOf(i)>-1){o=!1,e.splice(t,1);break}i=tn(i)}o&&(e[t]=n)}return e}function pi(e,t){return t.some(function(n){return At(n)?e(n)||pi(e,Ze(n)):!1})}function Ls(e){var t=tn(e);return t?Ze(t):[]}function Hs(e,t){return di(e,t)!==void 0}function ci(e,t){for(var n=null,i=0,o=t==null?void 0:t.length;i<o&&!n;i++){var s=t[i];if(e(s))n=s;else{var a=Ze(s);a&&a.length>0&&(n=ci(e,a))}}return n}function gi(e,t){for(var n=[],i=0,o=t.length;i<o;i++)if(At(t[i])){e(t[i])&&n.push(t[i]);var s=Ze(t[i]);s&&(n=n.concat(gi(e,s)))}return n}en.default={isTag:At,getAttributeValue:di,getName:Bs,getChildren:Ze,getParent:tn,getText:Fs,removeSubsets:Os,existsOne:pi,getSiblings:Ls,hasAttrib:Hs,findOne:ci,findAll:gi};var nn={};Object.defineProperty(nn,"__esModule",{value:!0});var Ps=function(){function e(t,n){t===void 0&&(t=!1),this.addClosingSlash=t,Array.isArray(n)?this.voidTags=n.reduce(function(i,o){return i.add(o.toLowerCase())},new Set):this.voidTags=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"].reduce(function(i,o){return i.add(o)},new Set)}return e.prototype.formatNode=function(t,n,i){var o=this.addClosingSlash,s=o&&n&&!n.endsWith(" ")?" ":"",a=o?"".concat(s,"/"):"";return this.isVoidElement(t.toLowerCase())?"<".concat(t).concat(n).concat(a,">"):"<".concat(t).concat(n,">").concat(i,"</").concat(t,">")},e.prototype.isVoidElement=function(t){return this.voidTags.has(t)},e}();nn.default=Ps;var Ct={},Us=b&&b.__extends||function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,o){i.__proto__=o}||function(i,o){for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&(i[s]=o[s])},e(t,n)};return function(t,n){if(typeof n!="function"&&n!==null)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");e(t,n);function i(){this.constructor=t}t.prototype=n===null?Object.create(n):(i.prototype=n.prototype,new i)}}(),fi=b&&b.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Ct,"__esModule",{value:!0});var Vs=Ht,zs=fi(We),Gs=fi(Ce),Qs=function(e){Us(t,e);function t(n,i,o){var s=e.call(this,i,o)||this;return s.nodeType=Gs.default.TEXT_NODE,s._rawText=n,s}return t.prototype.clone=function(){return new t(this._rawText,null)},Object.defineProperty(t.prototype,"rawText",{get:function(){return this._rawText},set:function(n){this._rawText=n,this._trimmedRawText=void 0,this._trimmedText=void 0},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"trimmedRawText",{get:function(){return this._trimmedRawText!==void 0?this._trimmedRawText:(this._trimmedRawText=yn(this.rawText),this._trimmedRawText)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"trimmedText",{get:function(){return this._trimmedText!==void 0?this._trimmedText:(this._trimmedText=yn(this.text),this._trimmedText)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"text",{get:function(){return(0,Vs.decode)(this.rawText)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isWhitespace",{get:function(){return/^(\s|&nbsp;)*$/.test(this.rawText)},enumerable:!1,configurable:!0}),t.prototype.toString=function(){return this.rawText},t}(zs.default);Ct.default=Qs;function yn(e){for(var t=0,n,i;t>=0&&t<e.length;)/\S/.test(e[t])&&(n===void 0?(n=t,t=e.length):(i=t,t=void 0)),n===void 0?t++:t--;n===void 0&&(n=0),i===void 0&&(i=e.length-1);var o=n>0&&/[^\S\r\n]/.test(e[n-1]),s=i<e.length-1&&/[^\S\r\n]/.test(e[i+1]);return(o?" ":"")+e.slice(n,i+1)+(s?" ":"")}var Xs=b&&b.__extends||function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,o){i.__proto__=o}||function(i,o){for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&(i[s]=o[s])},e(t,n)};return function(t,n){if(typeof n!="function"&&n!==null)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");e(t,n);function i(){this.constructor=t}t.prototype=n===null?Object.create(n):(i.prototype=n.prototype,new i)}}(),$e=b&&b.__assign||function(){return $e=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},$e.apply(this,arguments)},Le=b&&b.__spreadArray||function(e,t,n){if(n||arguments.length===2)for(var i=0,o=t.length,s;i<o;i++)(s||!(i in t))&&(s||(s=Array.prototype.slice.call(t,0,i)),s[i]=t[i]);return e.concat(s||Array.prototype.slice.call(t))},ye=b&&b.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(de,"__esModule",{value:!0});de.parse=de.base_parse=void 0;var jt=_n,Zs=ye(Ht),Ie=ye(Kt),$t=ye(en),mi=ye(nn),Ys=ye(pt),It=ye(We),Ee=ye(Ct),ne=ye(Ce);function He(e){return JSON.parse(JSON.stringify(Zs.default.decode(e)))}var Ks=["h1","h2","h3","h4","h5","h6","header","hgroup"],ea=["details","dialog","dd","div","dt"],ta=["fieldset","figcaption","figure","footer","form"],na=["table","td","tr"],ia=["address","article","aside","blockquote","br","hr","li","main","nav","ol","p","pre","section","ul"],Ft=new Set;function oa(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=function(a){for(var u=0;u<a.length;u++){var l=a[u];Ft.add(l),Ft.add(l.toUpperCase())}},i=0,o=e;i<o.length;i++){var s=o[i];n(s)}}oa(Ks,ea,ta,na,ia);var sa=function(){function e(t,n){t===void 0&&(t=[]),n===void 0&&(n=function(){return null}),this._set=new Set(t),this._afterUpdate=n}return e.prototype._validate=function(t){if(/\s/.test(t))throw new Error("DOMException in DOMTokenList.add: The token '".concat(t,"' contains HTML space characters, which are not valid in tokens."))},e.prototype.add=function(t){this._validate(t),this._set.add(t),this._afterUpdate(this)},e.prototype.replace=function(t,n){this._validate(n),this._set.delete(t),this._set.add(n),this._afterUpdate(this)},e.prototype.remove=function(t){this._set.delete(t)&&this._afterUpdate(this)},e.prototype.toggle=function(t){this._validate(t),this._set.has(t)?this._set.delete(t):this._set.add(t),this._afterUpdate(this)},e.prototype.contains=function(t){return this._set.has(t)},Object.defineProperty(e.prototype,"length",{get:function(){return this._set.size},enumerable:!1,configurable:!0}),e.prototype.values=function(){return this._set.values()},Object.defineProperty(e.prototype,"value",{get:function(){return Array.from(this._set.values())},enumerable:!1,configurable:!0}),e.prototype.toString=function(){return Array.from(this._set.values()).join(" ")},e}(),Ot=function(e){Xs(t,e);function t(n,i,o,s,a,u,l){o===void 0&&(o=""),u===void 0&&(u=new mi.default),l===void 0&&(l={});var r=e.call(this,s,a)||this;if(r.rawAttrs=o,r.voidTag=u,r.nodeType=ne.default.ELEMENT_NODE,r.rawTagName=n,r.rawAttrs=o||"",r.id=i.id||"",r.childNodes=[],r._parseOptions=l,r.classList=new sa(i.class?i.class.split(/\s+/):[],function(d){return r.setAttribute("class",d.toString())}),i.id&&(o||(r.rawAttrs='id="'.concat(i.id,'"'))),i.class&&!o){var p='class="'.concat(r.classList.toString(),'"');r.rawAttrs?r.rawAttrs+=" ".concat(p):r.rawAttrs=p}return r}return t.prototype.quoteAttribute=function(n){return n==null?"null":JSON.stringify(n.replace(/"/g,"&quot;"))},t.prototype.removeChild=function(n){return this.childNodes=this.childNodes.filter(function(i){return i!==n}),this},t.prototype.exchangeChild=function(n,i){var o=this.childNodes;return this.childNodes=o.map(function(s){return s===n?i:s}),this},Object.defineProperty(t.prototype,"tagName",{get:function(){return this.rawTagName?this.rawTagName.toUpperCase():this.rawTagName},set:function(n){this.rawTagName=n.toLowerCase()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"localName",{get:function(){return this.rawTagName.toLowerCase()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isVoidElement",{get:function(){return this.voidTag.isVoidElement(this.localName)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rawText",{get:function(){return this.childNodes.reduce(function(n,i){return n+=i.rawText},"")},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"textContent",{get:function(){return He(this.rawText)},set:function(n){var i=[new Ee.default(n,this)];this.childNodes=i},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"text",{get:function(){return He(this.rawText)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"structuredText",{get:function(){var n=[],i=[n];function o(s){if(s.nodeType===ne.default.ELEMENT_NODE)Ft.has(s.rawTagName)?(n.length>0&&i.push(n=[]),s.childNodes.forEach(o),n.length>0&&i.push(n=[])):s.childNodes.forEach(o);else if(s.nodeType===ne.default.TEXT_NODE)if(s.isWhitespace)n.prependWhitespace=!0;else{var a=s.trimmedText;n.prependWhitespace&&(a=" ".concat(a),n.prependWhitespace=!1),n.push(a)}}return o(this),i.map(function(s){return s.join("").replace(/\s{2,}/g," ")}).join(`
`).replace(/\s+$/,"")},enumerable:!1,configurable:!0}),t.prototype.toString=function(){var n=this.rawTagName;if(n){var i=this.rawAttrs?" ".concat(this.rawAttrs):"";return this.voidTag.formatNode(n,i,this.innerHTML)}return this.innerHTML},Object.defineProperty(t.prototype,"innerHTML",{get:function(){return this.childNodes.map(function(n){return n.toString()}).join("")},set:function(n){var i=Re(n,this._parseOptions),o=i.childNodes.length?i.childNodes:[new Ee.default(n,this)];re(o,this),re(this.childNodes,null),this.childNodes=o},enumerable:!1,configurable:!0}),t.prototype.set_content=function(n,i){if(i===void 0&&(i={}),n instanceof It.default)n=[n];else if(typeof n=="string"){i=$e($e({},this._parseOptions),i);var o=Re(n,i);n=o.childNodes.length?o.childNodes:[new Ee.default(o.innerHTML,this)]}return re(this.childNodes,null),re(n,this),this.childNodes=n,this},t.prototype.replaceWith=function(){for(var n=this,i=[],o=0;o<arguments.length;o++)i[o]=arguments[o];var s=this.parentNode,a=i.map(function(l){if(l instanceof It.default)return[l];if(typeof l=="string"){var r=Re(l,n._parseOptions);return r.childNodes.length?r.childNodes:[new Ee.default(l,n)]}return[]}).flat(),u=s.childNodes.findIndex(function(l){return l===n});return re([this],null),s.childNodes=Le(Le(Le([],s.childNodes.slice(0,u),!0),re(a,s),!0),s.childNodes.slice(u+1),!0),this},Object.defineProperty(t.prototype,"outerHTML",{get:function(){return this.toString()},enumerable:!1,configurable:!0}),t.prototype.trimRight=function(n){for(var i=0;i<this.childNodes.length;i++){var o=this.childNodes[i];if(o.nodeType===ne.default.ELEMENT_NODE)o.trimRight(n);else{var s=o.rawText.search(n);s>-1&&(o.rawText=o.rawText.substr(0,s),this.childNodes.length=i+1)}}return this},Object.defineProperty(t.prototype,"structure",{get:function(){var n=[],i=0;function o(a){n.push("  ".repeat(i)+a)}function s(a){var u=a.id?"#".concat(a.id):"",l=a.classList.length?".".concat(a.classList.value.join(".")):"";o("".concat(a.rawTagName).concat(u).concat(l)),i++,a.childNodes.forEach(function(r){r.nodeType===ne.default.ELEMENT_NODE?s(r):r.nodeType===ne.default.TEXT_NODE&&(r.isWhitespace||o("#text"))}),i--}return s(this),n.join(`
`)},enumerable:!1,configurable:!0}),t.prototype.removeWhitespace=function(){var n=this,i=0;return this.childNodes.forEach(function(o){if(o.nodeType===ne.default.TEXT_NODE){if(o.isWhitespace)return;o.rawText=o.trimmedRawText}else o.nodeType===ne.default.ELEMENT_NODE&&o.removeWhitespace();n.childNodes[i++]=o}),this.childNodes.length=i,this},t.prototype.querySelectorAll=function(n){return(0,jt.selectAll)(n,this,{xmlMode:!0,adapter:$t.default})},t.prototype.querySelector=function(n){return(0,jt.selectOne)(n,this,{xmlMode:!0,adapter:$t.default})},t.prototype.getElementsByTagName=function(n){for(var i=n.toUpperCase(),o=[],s=[],a=this,u=0;u!==void 0;){var l=void 0;do l=a.childNodes[u++];while(u<a.childNodes.length&&l===void 0);if(l===void 0){a=a.parentNode,u=s.pop();continue}l.nodeType===ne.default.ELEMENT_NODE&&((n==="*"||l.tagName===i)&&o.push(l),l.childNodes.length>0&&(s.push(u),a=l,u=0))}return o},t.prototype.getElementById=function(n){for(var i=[],o=this,s=0;s!==void 0;){var a=void 0;do a=o.childNodes[s++];while(s<o.childNodes.length&&a===void 0);if(a===void 0){o=o.parentNode,s=i.pop();continue}if(a.nodeType===ne.default.ELEMENT_NODE){if(a.id===n)return a;a.childNodes.length>0&&(i.push(s),o=a,s=0)}}return null},t.prototype.closest=function(n){var i=new Map,o=this,s=null;function a(l,r){for(var p=null,d=0,f=r.length;d<f&&!p;d++){var h=r[d];if(l(h))p=h;else{var c=i.get(h);c&&(p=a(l,[c]))}}return p}for(;o;)i.set(o,s),s=o,o=o.parentNode;for(o=this;o;){var u=(0,jt.selectOne)(n,o,{xmlMode:!0,adapter:$e($e({},$t.default),{getChildren:function(l){var r=i.get(l);return r&&[r]},getSiblings:function(l){return[l]},findOne:a,findAll:function(){return[]}})});if(u)return u;o=o.parentNode}return null},t.prototype.appendChild=function(n){return n.remove(),this.childNodes.push(n),n.parentNode=this,n},Object.defineProperty(t.prototype,"firstChild",{get:function(){return this.childNodes[0]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastChild",{get:function(){return(0,Ie.default)(this.childNodes)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attrs",{get:function(){if(this._attrs)return this._attrs;this._attrs={};var n=this.rawAttributes;for(var i in n){var o=n[i]||"";this._attrs[i.toLowerCase()]=He(o)}return this._attrs},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){var n={},i=this.rawAttributes;for(var o in i){var s=i[o]||"";n[o]=He(s)}return n},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rawAttributes",{get:function(){if(this._rawAttrs)return this._rawAttrs;var n={};if(this.rawAttrs)for(var i=/([a-zA-Z()[\]#@$.?:][a-zA-Z0-9-_:()[\]#]*)(?:\s*=\s*((?:'[^']*')|(?:"[^"]*")|\S+))?/g,o=void 0;o=i.exec(this.rawAttrs);){var s=o[1],a=o[2]||null;a&&(a[0]==="'"||a[0]==='"')&&(a=a.slice(1,a.length-1)),n[s]=n[s]||a}return this._rawAttrs=n,n},enumerable:!1,configurable:!0}),t.prototype.removeAttribute=function(n){var i=this.rawAttributes;return delete i[n],this._attrs&&delete this._attrs[n],this.rawAttrs=Object.keys(i).map(function(o){var s=JSON.stringify(i[o]);return s===void 0||s==="null"?o:"".concat(o,"=").concat(s)}).join(" "),n==="id"&&(this.id=""),this},t.prototype.hasAttribute=function(n){return n.toLowerCase()in this.attrs},t.prototype.getAttribute=function(n){return this.attrs[n.toLowerCase()]},t.prototype.setAttribute=function(n,i){var o=this;if(arguments.length<2)throw new Error("Failed to execute 'setAttribute' on 'Element'");var s=n.toLowerCase(),a=this.rawAttributes;for(var u in a)if(u.toLowerCase()===s){n=u;break}return a[n]=String(i),this._attrs&&(this._attrs[s]=He(a[n])),this.rawAttrs=Object.keys(a).map(function(l){var r=o.quoteAttribute(a[l]);return r==="null"||r==='""'?l:"".concat(l,"=").concat(r)}).join(" "),n==="id"&&(this.id=i),this},t.prototype.setAttributes=function(n){var i=this;return this._attrs&&delete this._attrs,this._rawAttrs&&delete this._rawAttrs,this.rawAttrs=Object.keys(n).map(function(o){var s=n[o];return s==="null"||s==='""'?o:"".concat(o,"=").concat(i.quoteAttribute(String(s)))}).join(" "),this},t.prototype.insertAdjacentHTML=function(n,i){var o,s,a,u=this;if(arguments.length<2)throw new Error("2 arguments required");var l=Re(i,this._parseOptions);if(n==="afterend"){var r=this.parentNode.childNodes.findIndex(function(p){return p===u});re(l.childNodes,this.parentNode),(o=this.parentNode.childNodes).splice.apply(o,Le([r+1,0],l.childNodes,!1))}else if(n==="afterbegin")re(l.childNodes,this),(s=this.childNodes).unshift.apply(s,l.childNodes);else if(n==="beforeend")l.childNodes.forEach(function(p){u.appendChild(p)});else if(n==="beforebegin"){var r=this.parentNode.childNodes.findIndex(function(d){return d===u});re(l.childNodes,this.parentNode),(a=this.parentNode.childNodes).splice.apply(a,Le([r,0],l.childNodes,!1))}else throw new Error("The value provided ('".concat(n,"') is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'"));return this},Object.defineProperty(t.prototype,"nextSibling",{get:function(){if(this.parentNode){for(var n=this.parentNode.childNodes,i=0;i<n.length;){var o=n[i++];if(this===o)return n[i]||null}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nextElementSibling",{get:function(){if(this.parentNode){for(var n=this.parentNode.childNodes,i=0,o=!1;i<n.length;){var s=n[i++];if(o){if(s instanceof t)return s||null}else this===s&&(o=!0)}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"previousSibling",{get:function(){if(this.parentNode){for(var n=this.parentNode.childNodes,i=n.length;i>0;){var o=n[--i];if(this===o)return n[i-1]||null}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"previousElementSibling",{get:function(){if(this.parentNode){for(var n=this.parentNode.childNodes,i=n.length,o=!1;i>0;){var s=n[--i];if(o){if(s instanceof t)return s||null}else this===s&&(o=!0)}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classNames",{get:function(){return this.classList.toString()},enumerable:!1,configurable:!0}),t.prototype.clone=function(){return Re(this.toString(),this._parseOptions).firstChild},t}(It.default);de.default=Ot;var ae=/<!--[\s\S]*?-->|<(\/?)([a-zA-Z][-.:0-9_a-zA-Z]*)((?:\s+[^>]*?(?:(?:'[^']*')|(?:"[^"]*"))?)*)\s*(\/?)>/g,aa=/(?:^|\s)(id|class)\s*=\s*((?:'[^']*')|(?:"[^"]*")|\S+)/gi,ra={area:!0,AREA:!0,base:!0,BASE:!0,br:!0,BR:!0,col:!0,COL:!0,hr:!0,HR:!0,img:!0,IMG:!0,input:!0,INPUT:!0,link:!0,LINK:!0,meta:!0,META:!0,source:!0,SOURCE:!0,embed:!0,EMBED:!0,param:!0,PARAM:!0,track:!0,TRACK:!0,wbr:!0,WBR:!0},wn={li:{li:!0,LI:!0},LI:{li:!0,LI:!0},p:{p:!0,div:!0,P:!0,DIV:!0},P:{p:!0,div:!0,P:!0,DIV:!0},b:{div:!0,DIV:!0},B:{div:!0,DIV:!0},td:{td:!0,th:!0,TD:!0,TH:!0},TD:{td:!0,th:!0,TD:!0,TH:!0},th:{td:!0,th:!0,TD:!0,TH:!0},TH:{td:!0,th:!0,TD:!0,TH:!0},h1:{h1:!0,H1:!0},H1:{h1:!0,H1:!0},h2:{h2:!0,H2:!0},H2:{h2:!0,H2:!0},h3:{h3:!0,H3:!0},H3:{h3:!0,H3:!0},h4:{h4:!0,H4:!0},H4:{h4:!0,H4:!0},h5:{h5:!0,H5:!0},H5:{h5:!0,H5:!0},h6:{h6:!0,H6:!0},H6:{h6:!0,H6:!0}},vn={li:{ul:!0,ol:!0,UL:!0,OL:!0},LI:{ul:!0,ol:!0,UL:!0,OL:!0},a:{div:!0,DIV:!0},A:{div:!0,DIV:!0},b:{div:!0,DIV:!0},B:{div:!0,DIV:!0},i:{div:!0,DIV:!0},I:{div:!0,DIV:!0},p:{div:!0,DIV:!0},P:{div:!0,DIV:!0},td:{tr:!0,table:!0,TR:!0,TABLE:!0},TD:{tr:!0,table:!0,TR:!0,TABLE:!0},th:{tr:!0,table:!0,TR:!0,TABLE:!0},TH:{tr:!0,table:!0,TR:!0,TABLE:!0}},Pe="documentfragmentcontainer";function bi(e,t){var n,i;t===void 0&&(t={});var o=new mi.default((n=t==null?void 0:t.voidTag)===null||n===void 0?void 0:n.closingSlash,(i=t==null?void 0:t.voidTag)===null||i===void 0?void 0:i.tags),s=t.blockTextElements||{script:!0,noscript:!0,style:!0,pre:!0},a=Object.keys(s),u=a.map(function(J){return new RegExp("^".concat(J,"$"),"i")}),l=a.filter(function(J){return s[J]}).map(function(J){return new RegExp("^".concat(J,"$"),"i")});function r(J){return l.some(function(E){return E.test(J)})}function p(J){return u.some(function(E){return E.test(J)})}var d=function(J,E){return[J-y,E-y]},f=new Ot(null,{},"",null,[0,e.length],o,t),h=f,c=[f],g=-1,x=void 0,q;e="<".concat(Pe,">").concat(e,"</").concat(Pe,">");for(var m=t.lowerCaseTagName,v=t.fixNestedATags,w=e.length-(Pe.length+2),y=Pe.length+2;q=ae.exec(e);){var _=q[0],D=q[1],R=q[2],Y=q[3],we=q[4],U=_.length,K=ae.lastIndex-U,I=ae.lastIndex;if(g>-1&&g+U<I){var W=e.substring(g,K);h.appendChild(new Ee.default(W,h,d(g,K)))}if(g=ae.lastIndex,R!==Pe){if(_[1]==="!"){if(t.comment){var W=e.substring(K+4,I-3);h.appendChild(new Ys.default(W,h,d(K,I)))}continue}if(m&&(R=R.toLowerCase()),!D){for(var ee={},Q=void 0;Q=aa.exec(Y);){var ve=Q[1],oe=Q[2],T=oe[0]==="'"||oe[0]==='"';ee[ve.toLowerCase()]=T?oe.slice(1,oe.length-1):oe}var k=h.rawTagName;!we&&wn[k]&&wn[k][R]&&(c.pop(),h=(0,Ie.default)(c)),v&&(R==="a"||R==="A")&&(x!==void 0&&(c.splice(x),h=(0,Ie.default)(c)),x=c.length);var j=ae.lastIndex,F=j-U;if(h=h.appendChild(new Ot(R,ee,Y.slice(1),null,d(F,j),o,t)),c.push(h),p(R)){var X="</".concat(R,">"),te=m?e.toLocaleLowerCase().indexOf(X,ae.lastIndex):e.indexOf(X,ae.lastIndex),Te=te===-1?w:te;if(r(R)){var W=e.substring(j,Te);W.length>0&&/\S/.test(W)&&h.appendChild(new Ee.default(W,h,d(j,Te)))}te===-1?g=ae.lastIndex=e.length+1:(g=ae.lastIndex=te+X.length,D="/")}}if(D||we||ra[R])for(;;)if(x!=null&&(R==="a"||R==="A")&&(x=void 0),h.rawTagName===R){h.range[1]=d(-1,Math.max(g,I))[1],c.pop(),h=(0,Ie.default)(c);break}else{var k=h.tagName;if(vn[k]&&vn[k][R]){c.pop(),h=(0,Ie.default)(c);continue}break}}}return c}de.base_parse=bi;function Re(e,t){t===void 0&&(t={});for(var n=bi(e,t),i=n[0],o=function(){var s=n.pop(),a=(0,Ie.default)(n);s.parentNode&&s.parentNode.parentNode&&(s.parentNode===a&&s.tagName===a.tagName?t.parseNoneClosedTags!==!0&&(a.removeChild(s),s.childNodes.forEach(function(u){a.parentNode.appendChild(u)}),n.pop()):t.parseNoneClosedTags!==!0&&(a.removeChild(s),s.childNodes.forEach(function(u){a.appendChild(u)})))};n.length>1;)o();return i}de.parse=Re;function re(e,t){return e.map(function(n){return n.parentNode=t,n})}var yi={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t=de;Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.parse}})})(yi);var on={};Object.defineProperty(on,"__esModule",{value:!0});var la=de;function ua(e,t){t===void 0&&(t={});var n=(0,la.base_parse)(e,t);return n.length===1}on.default=ua;var ke=b&&b.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(N,"__esModule",{value:!0});N.NodeType=N.TextNode=N.Node=N.valid=N.CommentNode=N.HTMLElement=Ci=N.parse=void 0;var wi=ke(pt);N.CommentNode=wi.default;var vi=ke(de);N.HTMLElement=vi.default;var Ti=ke(We);N.Node=Ti.default;var qi=ke(Ct);N.TextNode=qi.default;var xi=ke(Ce);N.NodeType=xi.default;var _i=ke(yi),Ai=ke(on);N.valid=Ai.default;function pe(e,t){return t===void 0&&(t={}),(0,_i.default)(e,t)}N.default=pe;var Ci=N.parse=pe;pe.parse=_i.default;pe.HTMLElement=vi.default;pe.CommentNode=wi.default;pe.valid=Ai.default;pe.Node=Ti.default;pe.TextNode=qi.default;pe.NodeType=xi.default;const ce=class ce extends me{constructor(n,i){super("Extract all images from a layoutConfig using the meta paths.",[],"ExctractImages");S(this,"_isOfficial");S(this,"_sharedTagRenderings");this._isOfficial=n,this._sharedTagRenderings=i}static mightBeTagRendering(n){if(!n.type)return!1;let i;return Array.isArray(n.type)?i=n.type:i=[n.type],i.some(o=>{var s,a;return o!==null&&(o.$ref=="#/definitions/TagRenderingConfigJson"||o.$ref=="#/definitions/MinimalTagRenderingConfigJson"||o.$ref=="#/definitions/QuestionableTagRenderingConfigJson"||((s=o.properties)==null?void 0:s.render)!==void 0&&((a=o.properties)==null?void 0:a.mappings)!==void 0)})}convert(n,i){var a,u,l;const o=[];for(const r of ce.layoutMetaPaths){const p=ce.mightBeTagRendering(r),d=r.hints.typehint==="icon"||r.hints.typehint==="image",f=ue.CollectPath(r.path,n);if(p)for(const h of f){const c=h.path,g=h.leaf;if(typeof g=="string"){if(!d||(g==""&&i.warn(i+"."+c.join(".")+" Found an empty image"),(a=this._sharedTagRenderings)!=null&&a.has(g)))continue;o.push({path:g,context:i+"."+c})}else for(const x of ce.tagRenderingMetaPaths){const q=ue.CollectPath(x.path,g),m=x.hints.typehint==="rendered",v=x.hints.typehint==="icon"||x.hints.typehint==="image";for(const w of q){if(d&&m)if(w.leaf===""||w.leaf.path=="")i.enter(c).enter(w.path).warn("Found an emtpy image");else if(typeof w.leaf!="string"){const y=i.enter(w.path),_="found an image path that is not a string: "+JSON.stringify(w.leaf);this._isOfficial?y.err(_):y.warn(_)}else o.push({path:w.leaf,context:i+"."+c});!d&&v&&o.push(...Ri.T(w.leaf,"extract_images from "+w.path.join(".")).ExtractImages(!1).map(y=>({path:y,context:i+"."+y})))}}}else for(const h of f){if(h.leaf===""){i.enter(h.path).warn("Found an empty image");continue}typeof h.leaf=="string"&&o.push({context:i+"."+h.path.join("."),path:h.leaf})}}const s=[];for(const r of o){if(r.path.startsWith("<")&&r.path.endsWith(">")){const d=Ci(r.path),h=Array.from(d.getElementsByTagName("img")).map(c=>c.getAttribute("src"));s.push(...h.map(c=>({path:c,context:r.context+" (in html)"})));continue}const p=ue.NoNull(ue.NoEmpty((l=(u=r.path)==null?void 0:u.split(";"))==null?void 0:l.map(d=>d.split(":")[0])));for(const d of p)s.push({path:d,context:r.context})}return s}};S(ce,"layoutMetaPaths",Tn.filter(n=>{const i=n.hints.typehint;return ce.mightBeTagRendering(n)||i!==void 0&&(i==="image"||i==="icon"||i==="image[]"||i==="icon[]")})),S(ce,"tagRenderingMetaPaths",qn);let Lt=ce;class _a extends ze{constructor(n){super("Walks over the entire theme and replaces images to the relative URL. Only works if the ID of the theme is an URL",[],"fixImages");S(this,"_knownImages");this._knownImages=n}convert(n,i){let o;try{o=new URL(n.id)}catch{return n}const s=o.protocol+"//"+o.host;let a=o.protocol+"//"+o.host+o.pathname;a=a.substring(0,a.lastIndexOf("/"));const u=this;a.endsWith("assets/generated/themes")&&(i.warn("Detected 'assets/generated/themes' as relative URL. I'm assuming that you are loading your file for the MC-repository, so I'm rewriting all image links as if they were absolute instead of relative"),a=s);function l(r){return u._knownImages.has(r)?r:typeof r!="string"?(i.warn("Found a non-string object while replacing images: "+JSON.stringify(r)),r):r.startsWith("./")?a+r.substring(1):r.startsWith("/")?s+r:r}n=ue.Clone(n);for(const r of Tn){if(r.hints.typehint!=="image"&&r.hints.typehint!=="icon")continue;const p=Lt.mightBeTagRendering(r);ue.WalkPath(r.path,n,d=>{if(typeof d=="string")return l(d);if(p)for(const f of qn)f.hints.typehint==="rendered"&&ue.WalkPath(f.path,d,h=>l(h));return d})}return n}}function ha(e){let t,n,i,o;const s=e[4].default,a=Ei(s,e,e[3],null);return{c(){t=Ji("select"),a&&a.c(),ln(t,"class",e[1])},m(u,l){Mi(u,t,l),a&&a.m(t,null),e[5](t),n=!0,i||(o=Ni(t,"change",e[6]),i=!0)},p(u,[l]){a&&a.p&&(!n||l&8)&&Wi(a,s,u,u[3],n?Fi(s,u[3],l,null):Bi(u[3]),null),(!n||l&2)&&ln(t,"class",u[1])},i(u){n||(Oi(a,u),n=!0)},o(u){Li(a,u),n=!1},d(u){u&&Hi(t),a&&a.d(u),e[5](null),i=!1,o()}}}function da(e,t,n){let{$$slots:i={},$$scope:o}=t,{value:s}=t,a;function u(){if(!a)return;const d=s.data;for(let f of a.getElementsByTagName("option"))if(f.value===d){f.selected=!0;return}}s.addCallbackD(()=>u());let{cls:l=void 0}=t;function r(d){Pi[d?"unshift":"push"](()=>{a=d,n(2,a)})}const p=d=>{s.setData(d.srcElement.value)};return e.$$set=d=>{"value"in d&&n(0,s=d.value),"cls"in d&&n(1,l=d.cls),"$$scope"in d&&n(3,o=d.$$scope)},e.$$.update=()=>{e.$$.dirty&4&&a&&u()},[s,l,a,o,i,r,p]}class Aa extends ji{constructor(t){super(),$i(this,t,da,ha,Ii,{value:0,cls:1})}}export{ba as B,at as C,Aa as D,Lt as E,qa as F,ya as O,Ui as P,xa as S,ze as a,me as b,zi as c,va as d,Ta as e,wa as f,_a as g,Tn as l,Ci as p,qn as q};
//# sourceMappingURL=Dropdown-f1aca8f0.js.map
